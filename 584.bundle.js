"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[584],{7584:(e,t,r)=>{r.d(t,{WebGLRenderer:()=>qe});var n=r(8507),s=r(9313),i=r(5611),a=r(4459),o=r(4e3),c=r(2067),u=r(6665),l=r(6040),_=r(8475),h=r(5811);class d{contextChange(e){const t=new h.k({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new s.u,type:"mat3x3<f32>"},uRound:{value:0,type:"f32"}}),r=e.limits.maxBatchableTextures,n=(0,i.I)({name:"graphics",bits:[a.a,(0,o.P)(r),c.mA,u.m]});this.shader=new _.M({glProgram:n,resources:{localUniforms:t,batchSamplers:(0,l.n)(r)}})}execute(e,t){const r=t.context,n=r.customShader||this.shader,s=e.renderer,i=s.graphicsContext,{batcher:a,instructions:o}=i.getContextRenderData(r);n.groups[0]=s.globalUniforms.bindGroup,s.state.set(e.state),s.shader.bind(n),s.geometry.bind(a.geometry,n.glProgram);const c=o.instructions;for(let e=0;e<o.instructionSize;e++){const t=c[e];if(t.size){for(let e=0;e<t.textures.count;e++)s.texture.bind(t.textures.textures[e],e);s.geometry.draw(t.topology,t.size,t.start)}}}destroy(){this.shader.destroy(!0),this.shader=null}}d.extension={type:[n.Ag.WebGLPipesAdaptor],name:"graphics"};var g=r(3391),f=r(4492),m=r(268);class E{init(){const e=(0,i.I)({name:"mesh",bits:[c.mA,g.m,u.m]});this._shader=new _.M({glProgram:e,resources:{uTexture:f.g.EMPTY.source,textureUniforms:{uTextureMatrix:{type:"mat3x3<f32>",value:new s.u}}}})}execute(e,t){const r=e.renderer;let n=t._shader;if(n){if(!n.glProgram)return void(0,m.R)("Mesh shader has no glProgram",t.shader)}else{n=this._shader;const e=t.texture,r=e.source;n.resources.uTexture=r,n.resources.uSampler=r.style,n.resources.textureUniforms.uniforms.uTextureMatrix=e.textureMatrix.mapCoord}n.groups[100]=r.globalUniforms.bindGroup,n.groups[101]=e.localUniformsBindGroup,r.encoder.draw({geometry:t._geometry,shader:n,state:t.state})}destroy(){this._shader.destroy(!0),this._shader=null}}E.extension={type:[n.Ag.WebGLPipesAdaptor],name:"mesh"};var b=r(7547);class T{constructor(){this._tempState=b.U.for2d(),this._didUploadHash={}}init(e){e.renderer.runners.contextChange.add(this)}contextChange(){this._didUploadHash={}}start(e,t,r){const n=e.renderer,s=this._didUploadHash[r.uid];n.shader.bind(r,s),s||(this._didUploadHash[r.uid]=!0),n.shader.updateUniformGroup(n.globalUniforms.uniformGroup),n.geometry.bind(t,r.glProgram)}execute(e,t){const r=e.renderer;this._tempState.blendMode=t.blendMode,r.state.set(this._tempState);const n=t.textures.textures;for(let e=0;e<t.textures.count;e++)r.texture.bind(n[e],e);r.geometry.draw(t.topology,t.size,t.start)}}T.extension={type:[n.Ag.WebGLPipesAdaptor],name:"batch"};var R=r(800),p=r(5008),x=r(5099),S=r(1132),v=(e=>(e[e.ELEMENT_ARRAY_BUFFER=34963]="ELEMENT_ARRAY_BUFFER",e[e.ARRAY_BUFFER=34962]="ARRAY_BUFFER",e[e.UNIFORM_BUFFER=35345]="UNIFORM_BUFFER",e))(v||{});class A{constructor(e,t){this._lastBindBaseLocation=-1,this._lastBindCallId=-1,this.buffer=e||null,this.updateID=-1,this.byteLength=-1,this.type=t}}class B{constructor(e){this._gpuBuffers=Object.create(null),this._boundBufferBases=Object.create(null),this._minBaseLocation=0,this._nextBindBaseIndex=this._minBaseLocation,this._bindCallId=0,this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_gpuBuffers")}destroy(){this._renderer=null,this._gl=null,this._gpuBuffers=null,this._boundBufferBases=null}contextChange(){this._gl=this._renderer.gl,this._gpuBuffers=Object.create(null),this._maxBindings=this._renderer.limits.maxUniformBindings}getGlBuffer(e){return this._gpuBuffers[e.uid]||this.createGLBuffer(e)}bind(e){const{_gl:t}=this,r=this.getGlBuffer(e);t.bindBuffer(r.type,r.buffer)}bindBufferBase(e,t){const{_gl:r}=this;this._boundBufferBases[t]!==e&&(this._boundBufferBases[t]=e,e._lastBindBaseLocation=t,r.bindBufferBase(r.UNIFORM_BUFFER,t,e.buffer))}nextBindBase(e){this._bindCallId++,this._minBaseLocation=0,e&&(this._boundBufferBases[0]=null,this._minBaseLocation=1,this._nextBindBaseIndex<1&&(this._nextBindBaseIndex=1))}freeLocationForBufferBase(e){let t=this.getLastBindBaseLocation(e);if(t>=this._minBaseLocation)return e._lastBindCallId=this._bindCallId,t;let r=0,n=this._nextBindBaseIndex;for(;r<2;){n>=this._maxBindings&&(n=this._minBaseLocation,r++);const e=this._boundBufferBases[n];if(!e||e._lastBindCallId!==this._bindCallId)break;n++}return t=n,this._nextBindBaseIndex=n+1,r>=2?-1:(e._lastBindCallId=this._bindCallId,this._boundBufferBases[t]=null,t)}getLastBindBaseLocation(e){const t=e._lastBindBaseLocation;return this._boundBufferBases[t]===e?t:-1}bindBufferRange(e,t,r,n){const{_gl:s}=this;r||(r=0),t||(t=0),this._boundBufferBases[t]=null,s.bindBufferRange(s.UNIFORM_BUFFER,t||0,e.buffer,256*r,n||256)}updateBuffer(e){const{_gl:t}=this,r=this.getGlBuffer(e);if(e._updateID===r.updateID)return r;r.updateID=e._updateID,t.bindBuffer(r.type,r.buffer);const n=e.data,s=e.descriptor.usage&S.S.STATIC?t.STATIC_DRAW:t.DYNAMIC_DRAW;return n?r.byteLength>=n.byteLength?t.bufferSubData(r.type,0,n,0,e._updateSize/n.BYTES_PER_ELEMENT):(r.byteLength=n.byteLength,t.bufferData(r.type,n,s)):(r.byteLength=e.descriptor.size,t.bufferData(r.type,r.byteLength,s)),r}destroyAll(){const e=this._gl;for(const t in this._gpuBuffers)e.deleteBuffer(this._gpuBuffers[t].buffer);this._gpuBuffers=Object.create(null)}onBufferDestroy(e,t){const r=this._gpuBuffers[e.uid],n=this._gl;t||n.deleteBuffer(r.buffer),this._gpuBuffers[e.uid]=null}createGLBuffer(e){const{_gl:t}=this;let r=v.ARRAY_BUFFER;e.descriptor.usage&S.S.INDEX?r=v.ELEMENT_ARRAY_BUFFER:e.descriptor.usage&S.S.UNIFORM&&(r=v.UNIFORM_BUFFER);const n=new A(t.createBuffer(),r);return this._gpuBuffers[e.uid]=n,e.on("destroy",this.onBufferDestroy,this),n}resetState(){this._boundBufferBases=Object.create(null)}}B.extension={type:[n.Ag.WebGLSystem],name:"buffer"};var N=r(1761);const C=class e{constructor(e){this.supports={uint32Indices:!0,uniformBufferObject:!0,vertexArrayObject:!0,srgbTextures:!0,nonPowOf2wrapping:!0,msaa:!0,nonPowOf2mipmaps:!0},this._renderer=e,this.extensions=Object.create(null),this.handleContextLost=this.handleContextLost.bind(this),this.handleContextRestored=this.handleContextRestored.bind(this)}get isLost(){return!this.gl||this.gl.isContextLost()}contextChange(e){this.gl=e,this._renderer.gl=e}init(t){t={...e.defaultOptions,...t};let r=this.multiView=t.multiView;if(t.context&&r&&((0,m.R)("Renderer created with both a context and multiview enabled. Disabling multiView as both cannot work together."),r=!1),this.canvas=r?N.e.get().createCanvas(this._renderer.canvas.width,this._renderer.canvas.height):this._renderer.view.canvas,t.context)this.initFromContext(t.context);else{const e=this._renderer.background.alpha<1,r=t.premultipliedAlpha??!0,n=t.antialias&&!this._renderer.backBuffer.useBackBuffer;this.createContext(t.preferWebGLVersion,{alpha:e,premultipliedAlpha:r,antialias:n,stencil:!0,preserveDrawingBuffer:t.preserveDrawingBuffer,powerPreference:t.powerPreference??"default"})}}ensureCanvasSize(e){if(!this.multiView)return void(e!==this.canvas&&(0,m.R)("multiView is disabled, but targetCanvas is not the main canvas"));const{canvas:t}=this;(t.width<e.width||t.height<e.height)&&(t.width=Math.max(e.width,e.width),t.height=Math.max(e.height,e.height))}initFromContext(e){this.gl=e,this.webGLVersion=e instanceof N.e.get().getWebGLRenderingContext()?1:2,this.getExtensions(),this.validateContext(e),this._renderer.runners.contextChange.emit(e);const t=this._renderer.view.canvas;t.addEventListener("webglcontextlost",this.handleContextLost,!1),t.addEventListener("webglcontextrestored",this.handleContextRestored,!1)}createContext(e,t){let r;const n=this.canvas;if(2===e&&(r=n.getContext("webgl2",t)),!r&&(r=n.getContext("webgl",t),!r))throw new Error("This browser does not support WebGL. Try using the canvas renderer");this.gl=r,this.initFromContext(this.gl)}getExtensions(){const{gl:e}=this,t={anisotropicFiltering:e.getExtension("EXT_texture_filter_anisotropic"),floatTextureLinear:e.getExtension("OES_texture_float_linear"),s3tc:e.getExtension("WEBGL_compressed_texture_s3tc"),s3tc_sRGB:e.getExtension("WEBGL_compressed_texture_s3tc_srgb"),etc:e.getExtension("WEBGL_compressed_texture_etc"),etc1:e.getExtension("WEBGL_compressed_texture_etc1"),pvrtc:e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),atc:e.getExtension("WEBGL_compressed_texture_atc"),astc:e.getExtension("WEBGL_compressed_texture_astc"),bptc:e.getExtension("EXT_texture_compression_bptc"),rgtc:e.getExtension("EXT_texture_compression_rgtc"),loseContext:e.getExtension("WEBGL_lose_context")};if(1===this.webGLVersion)this.extensions={...t,drawBuffers:e.getExtension("WEBGL_draw_buffers"),depthTexture:e.getExtension("WEBGL_depth_texture"),vertexArrayObject:e.getExtension("OES_vertex_array_object")||e.getExtension("MOZ_OES_vertex_array_object")||e.getExtension("WEBKIT_OES_vertex_array_object"),uint32ElementIndex:e.getExtension("OES_element_index_uint"),floatTexture:e.getExtension("OES_texture_float"),floatTextureLinear:e.getExtension("OES_texture_float_linear"),textureHalfFloat:e.getExtension("OES_texture_half_float"),textureHalfFloatLinear:e.getExtension("OES_texture_half_float_linear"),vertexAttribDivisorANGLE:e.getExtension("ANGLE_instanced_arrays"),srgb:e.getExtension("EXT_sRGB")};else{this.extensions={...t,colorBufferFloat:e.getExtension("EXT_color_buffer_float")};const r=e.getExtension("WEBGL_provoking_vertex");r&&r.provokingVertexWEBGL(r.FIRST_VERTEX_CONVENTION_WEBGL)}}handleContextLost(e){e.preventDefault(),this._contextLossForced&&(this._contextLossForced=!1,setTimeout(()=>{this.gl.isContextLost()&&this.extensions.loseContext?.restoreContext()},0))}handleContextRestored(){this.getExtensions(),this._renderer.runners.contextChange.emit(this.gl)}destroy(){const e=this._renderer.view.canvas;this._renderer=null,e.removeEventListener("webglcontextlost",this.handleContextLost),e.removeEventListener("webglcontextrestored",this.handleContextRestored),this.gl.useProgram(null),this.extensions.loseContext?.loseContext()}forceContextLoss(){this.extensions.loseContext?.loseContext(),this._contextLossForced=!0}validateContext(e){const t=e.getContextAttributes();t&&!t.stencil&&(0,m.R)("Provided WebGL context does not have a stencil buffer, masks may not render correctly");const r=this.supports,n=2===this.webGLVersion,s=this.extensions;r.uint32Indices=n||!!s.uint32ElementIndex,r.uniformBufferObject=n,r.vertexArrayObject=n||!!s.vertexArrayObject,r.srgbTextures=n||!!s.srgb,r.nonPowOf2wrapping=n,r.nonPowOf2mipmaps=n,r.msaa=n,r.uint32Indices||(0,m.R)("Provided WebGL context does not support 32 index buffer, large scenes may not render correctly")}};C.extension={type:[n.Ag.WebGLSystem],name:"context"},C.defaultOptions={context:null,premultipliedAlpha:!0,preserveDrawingBuffer:!1,powerPreference:void 0,preferWebGLVersion:2,multiView:!1};let G=C;var I=r(8306),D=r(7084),y=(e=>(e[e.RGBA=6408]="RGBA",e[e.RGB=6407]="RGB",e[e.RG=33319]="RG",e[e.RED=6403]="RED",e[e.RGBA_INTEGER=36249]="RGBA_INTEGER",e[e.RGB_INTEGER=36248]="RGB_INTEGER",e[e.RG_INTEGER=33320]="RG_INTEGER",e[e.RED_INTEGER=36244]="RED_INTEGER",e[e.ALPHA=6406]="ALPHA",e[e.LUMINANCE=6409]="LUMINANCE",e[e.LUMINANCE_ALPHA=6410]="LUMINANCE_ALPHA",e[e.DEPTH_COMPONENT=6402]="DEPTH_COMPONENT",e[e.DEPTH_STENCIL=34041]="DEPTH_STENCIL",e))(y||{}),O=(e=>(e[e.TEXTURE_2D=3553]="TEXTURE_2D",e[e.TEXTURE_CUBE_MAP=34067]="TEXTURE_CUBE_MAP",e[e.TEXTURE_2D_ARRAY=35866]="TEXTURE_2D_ARRAY",e[e.TEXTURE_CUBE_MAP_POSITIVE_X=34069]="TEXTURE_CUBE_MAP_POSITIVE_X",e[e.TEXTURE_CUBE_MAP_NEGATIVE_X=34070]="TEXTURE_CUBE_MAP_NEGATIVE_X",e[e.TEXTURE_CUBE_MAP_POSITIVE_Y=34071]="TEXTURE_CUBE_MAP_POSITIVE_Y",e[e.TEXTURE_CUBE_MAP_NEGATIVE_Y=34072]="TEXTURE_CUBE_MAP_NEGATIVE_Y",e[e.TEXTURE_CUBE_MAP_POSITIVE_Z=34073]="TEXTURE_CUBE_MAP_POSITIVE_Z",e[e.TEXTURE_CUBE_MAP_NEGATIVE_Z=34074]="TEXTURE_CUBE_MAP_NEGATIVE_Z",e))(O||{}),F=(e=>(e[e.UNSIGNED_BYTE=5121]="UNSIGNED_BYTE",e[e.UNSIGNED_SHORT=5123]="UNSIGNED_SHORT",e[e.UNSIGNED_SHORT_5_6_5=33635]="UNSIGNED_SHORT_5_6_5",e[e.UNSIGNED_SHORT_4_4_4_4=32819]="UNSIGNED_SHORT_4_4_4_4",e[e.UNSIGNED_SHORT_5_5_5_1=32820]="UNSIGNED_SHORT_5_5_5_1",e[e.UNSIGNED_INT=5125]="UNSIGNED_INT",e[e.UNSIGNED_INT_10F_11F_11F_REV=35899]="UNSIGNED_INT_10F_11F_11F_REV",e[e.UNSIGNED_INT_2_10_10_10_REV=33640]="UNSIGNED_INT_2_10_10_10_REV",e[e.UNSIGNED_INT_24_8=34042]="UNSIGNED_INT_24_8",e[e.UNSIGNED_INT_5_9_9_9_REV=35902]="UNSIGNED_INT_5_9_9_9_REV",e[e.BYTE=5120]="BYTE",e[e.SHORT=5122]="SHORT",e[e.INT=5124]="INT",e[e.FLOAT=5126]="FLOAT",e[e.FLOAT_32_UNSIGNED_INT_24_8_REV=36269]="FLOAT_32_UNSIGNED_INT_24_8_REV",e[e.HALF_FLOAT=36193]="HALF_FLOAT",e))(F||{});const P={uint8x2:F.UNSIGNED_BYTE,uint8x4:F.UNSIGNED_BYTE,sint8x2:F.BYTE,sint8x4:F.BYTE,unorm8x2:F.UNSIGNED_BYTE,unorm8x4:F.UNSIGNED_BYTE,snorm8x2:F.BYTE,snorm8x4:F.BYTE,uint16x2:F.UNSIGNED_SHORT,uint16x4:F.UNSIGNED_SHORT,sint16x2:F.SHORT,sint16x4:F.SHORT,unorm16x2:F.UNSIGNED_SHORT,unorm16x4:F.UNSIGNED_SHORT,snorm16x2:F.SHORT,snorm16x4:F.SHORT,float16x2:F.HALF_FLOAT,float16x4:F.HALF_FLOAT,float32:F.FLOAT,float32x2:F.FLOAT,float32x3:F.FLOAT,float32x4:F.FLOAT,uint32:F.UNSIGNED_INT,uint32x2:F.UNSIGNED_INT,uint32x3:F.UNSIGNED_INT,uint32x4:F.UNSIGNED_INT,sint32:F.INT,sint32x2:F.INT,sint32x3:F.INT,sint32x4:F.INT};function U(e){return P[e]??P.float32}const L={"point-list":0,"line-list":1,"line-strip":3,"triangle-list":4,"triangle-strip":5};class M{constructor(e){this._geometryVaoHash=Object.create(null),this._renderer=e,this._activeGeometry=null,this._activeVao=null,this.hasVao=!0,this.hasInstance=!0,this._renderer.renderableGC.addManagedHash(this,"_geometryVaoHash")}contextChange(){const e=this.gl=this._renderer.gl;if(!this._renderer.context.supports.vertexArrayObject)throw new Error("[PixiJS] Vertex Array Objects are not supported on this device");const t=this._renderer.context.extensions.vertexArrayObject;t&&(e.createVertexArray=()=>t.createVertexArrayOES(),e.bindVertexArray=e=>t.bindVertexArrayOES(e),e.deleteVertexArray=e=>t.deleteVertexArrayOES(e));const r=this._renderer.context.extensions.vertexAttribDivisorANGLE;r&&(e.drawArraysInstanced=(e,t,n,s)=>{r.drawArraysInstancedANGLE(e,t,n,s)},e.drawElementsInstanced=(e,t,n,s,i)=>{r.drawElementsInstancedANGLE(e,t,n,s,i)},e.vertexAttribDivisor=(e,t)=>r.vertexAttribDivisorANGLE(e,t)),this._activeGeometry=null,this._activeVao=null,this._geometryVaoHash=Object.create(null)}bind(e,t){const r=this.gl;this._activeGeometry=e;const n=this.getVao(e,t);this._activeVao!==n&&(this._activeVao=n,r.bindVertexArray(n)),this.updateBuffers()}resetState(){this.unbind()}updateBuffers(){const e=this._activeGeometry,t=this._renderer.buffer;for(let r=0;r<e.buffers.length;r++){const n=e.buffers[r];t.updateBuffer(n)}}checkCompatibility(e,t){const r=e.attributes,n=t._attributeData;for(const e in n)if(!r[e])throw new Error(`shader and geometry incompatible, geometry missing the "${e}" attribute`)}getSignature(e,t){const r=e.attributes,n=t._attributeData,s=["g",e.uid];for(const e in r)n[e]&&s.push(e,n[e].location);return s.join("-")}getVao(e,t){return this._geometryVaoHash[e.uid]?.[t._key]||this.initGeometryVao(e,t)}initGeometryVao(e,t,r=!0){const n=this._renderer.gl,s=this._renderer.buffer;this._renderer.shader._getProgramData(t),this.checkCompatibility(e,t);const i=this.getSignature(e,t);this._geometryVaoHash[e.uid]||(this._geometryVaoHash[e.uid]=Object.create(null),e.on("destroy",this.onGeometryDestroy,this));const a=this._geometryVaoHash[e.uid];let o=a[i];if(o)return a[t._key]=o,o;(0,D.q)(e,t._attributeData);const c=e.buffers;o=n.createVertexArray(),n.bindVertexArray(o);for(let e=0;e<c.length;e++){const t=c[e];s.bind(t)}return this.activateVao(e,t),a[t._key]=o,a[i]=o,n.bindVertexArray(null),o}onGeometryDestroy(e,t){const r=this._geometryVaoHash[e.uid],n=this.gl;if(r){if(t)for(const e in r)this._activeVao!==r[e]&&this.unbind(),n.deleteVertexArray(r[e]);this._geometryVaoHash[e.uid]=null}}destroyAll(e=!1){const t=this.gl;for(const r in this._geometryVaoHash){if(e)for(const e in this._geometryVaoHash[r]){const n=this._geometryVaoHash[r];this._activeVao!==n&&this.unbind(),t.deleteVertexArray(n[e])}this._geometryVaoHash[r]=null}}activateVao(e,t){const r=this._renderer.gl,n=this._renderer.buffer,s=e.attributes;e.indexBuffer&&n.bind(e.indexBuffer);let i=null;for(const e in s){const a=s[e],o=a.buffer,c=n.getGlBuffer(o),u=t._attributeData[e];if(u){i!==c&&(n.bind(o),i=c);const e=u.location;r.enableVertexAttribArray(e);const t=(0,I.m)(a.format),s=U(a.format);if("int"===u.format?.substring(1,4)?r.vertexAttribIPointer(e,t.size,s,a.stride,a.offset):r.vertexAttribPointer(e,t.size,s,t.normalised,a.stride,a.offset),a.instance){if(!this.hasInstance)throw new Error("geometry error, GPU Instancing is not supported on this device");{const t=a.divisor??1;r.vertexAttribDivisor(e,t)}}}}}draw(e,t,r,n){const{gl:s}=this._renderer,i=this._activeGeometry,a=L[e||i.topology];if(n??(n=i.instanceCount),i.indexBuffer){const e=i.indexBuffer.data.BYTES_PER_ELEMENT,o=2===e?s.UNSIGNED_SHORT:s.UNSIGNED_INT;n>1?s.drawElementsInstanced(a,t||i.indexBuffer.data.length,o,(r||0)*e,n):s.drawElements(a,t||i.indexBuffer.data.length,o,(r||0)*e)}else n>1?s.drawArraysInstanced(a,r||0,t||i.getSize(),n):s.drawArrays(a,r||0,t||i.getSize());return this}unbind(){this.gl.bindVertexArray(null),this._activeVao=null,this._activeGeometry=null}destroy(){this._renderer=null,this.gl=null,this._activeVao=null,this._activeGeometry=null}}M.extension={type:[n.Ag.WebGLSystem],name:"geometry"};var H=r(6011),w=r(583),V=r(9113);const k=new H.V({attributes:{aPosition:[-1,-1,3,-1,-1,3]}}),X=class e{constructor(e){this.useBackBuffer=!1,this._useBackBufferThisRender=!1,this._renderer=e}init(t={}){const{useBackBuffer:r,antialias:n}={...e.defaultOptions,...t};this.useBackBuffer=r,this._antialias=n,this._renderer.context.supports.msaa||((0,m.R)("antialiasing, is not supported on when using the back buffer"),this._antialias=!1),this._state=b.U.for2d();const s=new V.M({vertex:"\n                attribute vec2 aPosition;\n                out vec2 vUv;\n\n                void main() {\n                    gl_Position = vec4(aPosition, 0.0, 1.0);\n\n                    vUv = (aPosition + 1.0) / 2.0;\n\n                    // flip dem UVs\n                    vUv.y = 1.0 - vUv.y;\n                }",fragment:"\n                in vec2 vUv;\n                out vec4 finalColor;\n\n                uniform sampler2D uTexture;\n\n                void main() {\n                    finalColor = texture(uTexture, vUv);\n                }",name:"big-triangle"});this._bigTriangleShader=new _.M({glProgram:s,resources:{uTexture:f.g.WHITE.source}})}renderStart(e){const t=this._renderer.renderTarget.getRenderTarget(e.target);if(this._useBackBufferThisRender=this.useBackBuffer&&!!t.isRoot,this._useBackBufferThisRender){const t=this._renderer.renderTarget.getRenderTarget(e.target);this._targetTexture=t.colorTexture,e.target=this._getBackBufferTexture(t.colorTexture)}}renderEnd(){this._presentBackBuffer()}_presentBackBuffer(){const e=this._renderer;e.renderTarget.finishRenderPass(),this._useBackBufferThisRender&&(e.renderTarget.bind(this._targetTexture,!1),this._bigTriangleShader.resources.uTexture=this._backBufferTexture.source,e.encoder.draw({geometry:k,shader:this._bigTriangleShader,state:this._state}))}_getBackBufferTexture(e){return this._backBufferTexture=this._backBufferTexture||new f.g({source:new w.v({width:e.width,height:e.height,resolution:e._resolution,antialias:this._antialias})}),this._backBufferTexture.source.resize(e.width,e.height,e._resolution),this._backBufferTexture}destroy(){this._backBufferTexture&&(this._backBufferTexture.destroy(),this._backBufferTexture=null)}};X.extension={type:[n.Ag.WebGLSystem],name:"backBuffer",priority:1},X.defaultOptions={useBackBuffer:!1};let W=X;class Y{constructor(e){this._colorMaskCache=15,this._renderer=e}setMask(e){this._colorMaskCache!==e&&(this._colorMaskCache=e,this._renderer.gl.colorMask(!!(8&e),!!(4&e),!!(2&e),!!(1&e)))}}Y.extension={type:[n.Ag.WebGLSystem],name:"colorMask"};class K{constructor(e){this.commandFinished=Promise.resolve(),this._renderer=e}setGeometry(e,t){this._renderer.geometry.bind(e,t.glProgram)}finishRenderPass(){}draw(e){const t=this._renderer,{geometry:r,shader:n,state:s,skipSync:i,topology:a,size:o,start:c,instanceCount:u}=e;t.shader.bind(n,i),t.geometry.bind(r,t.shader._activeProgram),s&&t.state.set(s),t.geometry.draw(a,o,c,u??r.instanceCount)}destroy(){this._renderer=null}}K.extension={type:[n.Ag.WebGLSystem],name:"encoder"};var j=r(6512);class z{constructor(e){this._renderer=e}contextChange(){const e=this._renderer.gl;this.maxTextures=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),this.maxBatchableTextures=(0,j.u)(this.maxTextures,e),this.maxUniformBindings=e.getParameter(e.MAX_UNIFORM_BUFFER_BINDINGS)}destroy(){}}z.extension={type:[n.Ag.WebGLSystem],name:"limits"};var $=r(1172),q=r(1957);class Z{constructor(e){this._stencilCache={enabled:!1,stencilReference:0,stencilMode:q.K.NONE},this._renderTargetStencilState=Object.create(null),e.renderTarget.onRenderTargetChange.add(this)}contextChange(e){this._gl=e,this._comparisonFuncMapping={always:e.ALWAYS,never:e.NEVER,equal:e.EQUAL,"not-equal":e.NOTEQUAL,less:e.LESS,"less-equal":e.LEQUAL,greater:e.GREATER,"greater-equal":e.GEQUAL},this._stencilOpsMapping={keep:e.KEEP,zero:e.ZERO,replace:e.REPLACE,invert:e.INVERT,"increment-clamp":e.INCR,"decrement-clamp":e.DECR,"increment-wrap":e.INCR_WRAP,"decrement-wrap":e.DECR_WRAP},this.resetState()}onRenderTargetChange(e){if(this._activeRenderTarget===e)return;this._activeRenderTarget=e;let t=this._renderTargetStencilState[e.uid];t||(t=this._renderTargetStencilState[e.uid]={stencilMode:q.K.DISABLED,stencilReference:0}),this.setStencilMode(t.stencilMode,t.stencilReference)}resetState(){this._stencilCache.enabled=!1,this._stencilCache.stencilMode=q.K.NONE,this._stencilCache.stencilReference=0}setStencilMode(e,t){const r=this._renderTargetStencilState[this._activeRenderTarget.uid],n=this._gl,s=$.g[e],i=this._stencilCache;r.stencilMode=e,r.stencilReference=t,e!==q.K.DISABLED?(this._stencilCache.enabled||(this._stencilCache.enabled=!0,n.enable(n.STENCIL_TEST)),e===i.stencilMode&&i.stencilReference===t||(i.stencilMode=e,i.stencilReference=t,n.stencilFunc(this._comparisonFuncMapping[s.stencilBack.compare],t,255),n.stencilOp(n.KEEP,n.KEEP,this._stencilOpsMapping[s.stencilBack.passOp]))):this._stencilCache.enabled&&(this._stencilCache.enabled=!1,n.disable(n.STENCIL_TEST))}}Z.extension={type:[n.Ag.WebGLSystem],name:"stencil"};var Q=r(7047);const J={f32:4,i32:4,"vec2<f32>":8,"vec3<f32>":12,"vec4<f32>":16,"vec2<i32>":8,"vec3<i32>":12,"vec4<i32>":16,"mat2x2<f32>":32,"mat3x3<f32>":48,"mat4x4<f32>":64};function ee(e){const t=e.map(e=>({data:e,offset:0,size:0}));let r=0,n=0;for(let e=0;e<t.length;e++){const s=t[e];if(r=J[s.data.type],!r)throw new Error(`Unknown type ${s.data.type}`);s.data.size>1&&(r=Math.max(r,16)*s.data.size);const i=12===r?16:r;s.size=r;const a=n%16;n+=a>0&&16-a<i?(16-a)%16:(r-a%r)%r,s.offset=n,n+=r}return n=16*Math.ceil(n/16),{uboElements:t,size:n}}var te=r(6423),re=r(1266);function ne(e,t){const r=Math.max(J[e.data.type]/16,1),n=e.data.value.length/e.data.size,s=(4-n%4)%4,i=e.data.type.indexOf("i32")>=0?"dataInt32":"data";return`\n        v = uv.${e.data.name};\n        offset += ${t};\n\n        arrayOffset = offset;\n\n        t = 0;\n\n        for(var i=0; i < ${e.data.size*r}; i++)\n        {\n            for(var j = 0; j < ${n}; j++)\n            {\n                ${i}[arrayOffset++] = v[t++];\n            }\n            ${0!==s?`arrayOffset += ${s};`:""}\n        }\n    `}function se(e){return(0,te.E)(e,"uboStd40",ne,re.g)}class ie extends Q.W{constructor(){super({createUboElements:ee,generateUboSync:se})}}ie.extension={type:[n.Ag.WebGLSystem],name:"ubo"};var ae=r(7238),oe=r(9252),ce=r(4884),ue=r(1257);class le{constructor(){this.width=-1,this.height=-1,this.msaa=!1,this.msaaRenderBuffer=[]}}class _e{constructor(){this._clearColorCache=[0,0,0,0],this._viewPortCache=new oe.M}init(e,t){this._renderer=e,this._renderTargetSystem=t,e.runners.contextChange.add(this)}contextChange(){this._clearColorCache=[0,0,0,0],this._viewPortCache=new oe.M}copyToTexture(e,t,r,n,s){const i=this._renderTargetSystem,a=this._renderer,o=i.getGpuRenderTarget(e),c=a.gl;return this.finishRenderPass(e),c.bindFramebuffer(c.FRAMEBUFFER,o.resolveTargetFramebuffer),a.texture.bind(t,0),c.copyTexSubImage2D(c.TEXTURE_2D,0,s.x,s.y,r.x,r.y,n.width,n.height),t}startRenderPass(e,t=!0,r,n){const s=this._renderTargetSystem,i=e.colorTexture,a=s.getGpuRenderTarget(e);let o=n.y;e.isRoot&&(o=i.pixelHeight-n.height),e.colorTextures.forEach(e=>{this._renderer.texture.unbind(e)});const c=this._renderer.gl;c.bindFramebuffer(c.FRAMEBUFFER,a.framebuffer);const u=this._viewPortCache;u.x===n.x&&u.y===o&&u.width===n.width&&u.height===n.height||(u.x=n.x,u.y=o,u.width=n.width,u.height=n.height,c.viewport(n.x,o,n.width,n.height)),a.depthStencilRenderBuffer||!e.stencil&&!e.depth||this._initStencil(a),this.clear(e,t,r)}finishRenderPass(e){const t=this._renderTargetSystem.getGpuRenderTarget(e);if(!t.msaa)return;const r=this._renderer.gl;r.bindFramebuffer(r.FRAMEBUFFER,t.resolveTargetFramebuffer),r.bindFramebuffer(r.READ_FRAMEBUFFER,t.framebuffer),r.blitFramebuffer(0,0,t.width,t.height,0,0,t.width,t.height,r.COLOR_BUFFER_BIT,r.NEAREST),r.bindFramebuffer(r.FRAMEBUFFER,t.framebuffer)}initGpuRenderTarget(e){const t=this._renderer.gl,r=new le;return e.colorTexture instanceof ce.q?(this._renderer.context.ensureCanvasSize(e.colorTexture.resource),r.framebuffer=null,r):(this._initColor(e,r),t.bindFramebuffer(t.FRAMEBUFFER,null),r)}destroyGpuRenderTarget(e){const t=this._renderer.gl;e.framebuffer&&(t.deleteFramebuffer(e.framebuffer),e.framebuffer=null),e.resolveTargetFramebuffer&&(t.deleteFramebuffer(e.resolveTargetFramebuffer),e.resolveTargetFramebuffer=null),e.depthStencilRenderBuffer&&(t.deleteRenderbuffer(e.depthStencilRenderBuffer),e.depthStencilRenderBuffer=null),e.msaaRenderBuffer.forEach(e=>{t.deleteRenderbuffer(e)}),e.msaaRenderBuffer=null}clear(e,t,r){if(!t)return;const n=this._renderTargetSystem;"boolean"==typeof t&&(t=t?ue.u.ALL:ue.u.NONE);const s=this._renderer.gl;if(t&ue.u.COLOR){r??(r=n.defaultClearColor);const e=this._clearColorCache,t=r;e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]||(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],s.clearColor(t[0],t[1],t[2],t[3]))}s.clear(t)}resizeGpuRenderTarget(e){if(e.isRoot)return;const t=this._renderTargetSystem.getGpuRenderTarget(e);this._resizeColor(e,t),(e.stencil||e.depth)&&this._resizeStencil(t)}_initColor(e,t){const r=this._renderer,n=r.gl,s=n.createFramebuffer();if(t.resolveTargetFramebuffer=s,n.bindFramebuffer(n.FRAMEBUFFER,s),t.width=e.colorTexture.source.pixelWidth,t.height=e.colorTexture.source.pixelHeight,e.colorTextures.forEach((e,s)=>{const i=e.source;i.antialias&&(r.context.supports.msaa?t.msaa=!0:(0,m.R)("[RenderTexture] Antialiasing on textures is not supported in WebGL1")),r.texture.bindSource(i,0);const a=r.texture.getGlSource(i).texture;n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0+s,3553,a,0)}),t.msaa){const r=n.createFramebuffer();t.framebuffer=r,n.bindFramebuffer(n.FRAMEBUFFER,r),e.colorTextures.forEach((e,r)=>{const s=n.createRenderbuffer();t.msaaRenderBuffer[r]=s})}else t.framebuffer=s;this._resizeColor(e,t)}_resizeColor(e,t){const r=e.colorTexture.source;if(t.width=r.pixelWidth,t.height=r.pixelHeight,e.colorTextures.forEach((e,t)=>{0!==t&&e.source.resize(r.width,r.height,r._resolution)}),t.msaa){const r=this._renderer,n=r.gl,s=t.framebuffer;n.bindFramebuffer(n.FRAMEBUFFER,s),e.colorTextures.forEach((e,s)=>{const i=e.source;r.texture.bindSource(i,0);const a=r.texture.getGlSource(i).internalFormat,o=t.msaaRenderBuffer[s];n.bindRenderbuffer(n.RENDERBUFFER,o),n.renderbufferStorageMultisample(n.RENDERBUFFER,4,a,i.pixelWidth,i.pixelHeight),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0+s,n.RENDERBUFFER,o)})}}_initStencil(e){if(null===e.framebuffer)return;const t=this._renderer.gl,r=t.createRenderbuffer();e.depthStencilRenderBuffer=r,t.bindRenderbuffer(t.RENDERBUFFER,r),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.RENDERBUFFER,r),this._resizeStencil(e)}_resizeStencil(e){const t=this._renderer.gl;t.bindRenderbuffer(t.RENDERBUFFER,e.depthStencilRenderBuffer),e.msaa?t.renderbufferStorageMultisample(t.RENDERBUFFER,4,t.DEPTH24_STENCIL8,e.width,e.height):t.renderbufferStorage(t.RENDERBUFFER,2===this._renderer.context.webGLVersion?t.DEPTH24_STENCIL8:t.DEPTH_STENCIL,e.width,e.height)}prerender(e){const t=e.colorTexture.resource;this._renderer.context.multiView&&ce.q.test(t)&&this._renderer.context.ensureCanvasSize(t)}postrender(e){if(this._renderer.context.multiView&&ce.q.test(e.colorTexture.resource)){const t=this._renderer.context.canvas,r=e.colorTexture;r.context2D.drawImage(t,0,r.pixelHeight-t.height)}}}class he extends ae.l{constructor(e){super(e),this.adaptor=new _e,this.adaptor.init(e,this)}}he.extension={type:[n.Ag.WebGLSystem],name:"renderTarget"};var de=r(581);class ge{constructor(e,t){this.program=e,this.uniformData=t,this.uniformGroups={},this.uniformDirtyGroups={},this.uniformBlockBindings={}}destroy(){this.uniformData=null,this.uniformGroups=null,this.uniformDirtyGroups=null,this.uniformBlockBindings=null,this.program=null}}function fe(e,t,r){const n=e.createShader(t);return e.shaderSource(n,r),e.compileShader(n),n}function me(e){const t=new Array(e);for(let e=0;e<t.length;e++)t[e]=!1;return t}function Ee(e,t){switch(e){case"float":case"int":case"uint":case"sampler2D":case"sampler2DArray":return 0;case"vec2":return new Float32Array(2*t);case"vec3":return new Float32Array(3*t);case"vec4":return new Float32Array(4*t);case"ivec2":return new Int32Array(2*t);case"ivec3":return new Int32Array(3*t);case"ivec4":return new Int32Array(4*t);case"uvec2":return new Uint32Array(2*t);case"uvec3":return new Uint32Array(3*t);case"uvec4":return new Uint32Array(4*t);case"bool":return!1;case"bvec2":return me(2*t);case"bvec3":return me(3*t);case"bvec4":return me(4*t);case"mat2":return new Float32Array([1,0,0,1]);case"mat3":return new Float32Array([1,0,0,0,1,0,0,0,1]);case"mat4":return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}return null}let be=null;const Te={FLOAT:"float",FLOAT_VEC2:"vec2",FLOAT_VEC3:"vec3",FLOAT_VEC4:"vec4",INT:"int",INT_VEC2:"ivec2",INT_VEC3:"ivec3",INT_VEC4:"ivec4",UNSIGNED_INT:"uint",UNSIGNED_INT_VEC2:"uvec2",UNSIGNED_INT_VEC3:"uvec3",UNSIGNED_INT_VEC4:"uvec4",BOOL:"bool",BOOL_VEC2:"bvec2",BOOL_VEC3:"bvec3",BOOL_VEC4:"bvec4",FLOAT_MAT2:"mat2",FLOAT_MAT3:"mat3",FLOAT_MAT4:"mat4",SAMPLER_2D:"sampler2D",INT_SAMPLER_2D:"sampler2D",UNSIGNED_INT_SAMPLER_2D:"sampler2D",SAMPLER_CUBE:"samplerCube",INT_SAMPLER_CUBE:"samplerCube",UNSIGNED_INT_SAMPLER_CUBE:"samplerCube",SAMPLER_2D_ARRAY:"sampler2DArray",INT_SAMPLER_2D_ARRAY:"sampler2DArray",UNSIGNED_INT_SAMPLER_2D_ARRAY:"sampler2DArray"},Re={float:"float32",vec2:"float32x2",vec3:"float32x3",vec4:"float32x4",int:"sint32",ivec2:"sint32x2",ivec3:"sint32x3",ivec4:"sint32x4",uint:"uint32",uvec2:"uint32x2",uvec3:"uint32x3",uvec4:"uint32x4",bool:"uint32",bvec2:"uint32x2",bvec3:"uint32x3",bvec4:"uint32x4"};function pe(e,t){if(!be){const t=Object.keys(Te);be={};for(let r=0;r<t.length;++r){const n=t[r];be[e[n]]=Te[n]}}return be[t]}function xe(e,t){const r=pe(e,t);return Re[r]||"float32"}function Se(e,t){const r=e.getShaderSource(t).split("\n").map((e,t)=>`${t}: ${e}`),n=e.getShaderInfoLog(t),s=n.split("\n"),i={},a=s.map(e=>parseFloat(e.replace(/^ERROR\: 0\:([\d]+)\:.*$/,"$1"))).filter(e=>!(!e||i[e]||(i[e]=!0,0))),o=[""];a.forEach(e=>{r[e-1]=`%c${r[e-1]}%c`,o.push("background: #FF0000; color:#FFFFFF; font-size: 10px","font-size: 10px")});const c=r.join("\n");o[0]=c,console.error(n),console.groupCollapsed("click to view full shader code"),console.warn(...o),console.groupEnd()}const ve={textureCount:0,blockIndex:0};class Ae{constructor(e){this._activeProgram=null,this._programDataHash=Object.create(null),this._shaderSyncFunctions=Object.create(null),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_programDataHash")}contextChange(e){this._gl=e,this._programDataHash=Object.create(null),this._shaderSyncFunctions=Object.create(null),this._activeProgram=null}bind(e,t){if(this._setProgram(e.glProgram),t)return;ve.textureCount=0,ve.blockIndex=0;let r=this._shaderSyncFunctions[e.glProgram._key];r||(r=this._shaderSyncFunctions[e.glProgram._key]=this._generateShaderSync(e,this)),this._renderer.buffer.nextBindBase(!!e.glProgram.transformFeedbackVaryings),r(this._renderer,e,ve)}updateUniformGroup(e){this._renderer.uniformGroup.updateUniformGroup(e,this._activeProgram,ve)}bindUniformBlock(e,t,r=0){const n=this._renderer.buffer,s=this._getProgramData(this._activeProgram),i=e._bufferResource;i||this._renderer.ubo.updateUniformGroup(e);const a=e.buffer,o=n.updateBuffer(a),c=n.freeLocationForBufferBase(o);if(i){const{offset:t,size:r}=e;0===t&&r===a.data.byteLength?n.bindBufferBase(o,c):n.bindBufferRange(o,c,t)}else n.getLastBindBaseLocation(o)!==c&&n.bindBufferBase(o,c);const u=this._activeProgram._uniformBlockData[t].index;s.uniformBlockBindings[r]!==c&&(s.uniformBlockBindings[r]=c,this._renderer.gl.uniformBlockBinding(s.program,u,c))}_setProgram(e){if(this._activeProgram===e)return;this._activeProgram=e;const t=this._getProgramData(e);this._gl.useProgram(t.program)}_getProgramData(e){return this._programDataHash[e._key]||this._createProgramData(e)}_createProgramData(e){const t=e._key;return this._programDataHash[t]=function(e,t){const r=fe(e,e.VERTEX_SHADER,t.vertex),n=fe(e,e.FRAGMENT_SHADER,t.fragment),s=e.createProgram();e.attachShader(s,r),e.attachShader(s,n);const i=t.transformFeedbackVaryings;i&&("function"!=typeof e.transformFeedbackVaryings?(0,m.R)("TransformFeedback is not supported but TransformFeedbackVaryings are given."):e.transformFeedbackVaryings(s,i.names,"separate"===i.bufferMode?e.SEPARATE_ATTRIBS:e.INTERLEAVED_ATTRIBS)),e.linkProgram(s),e.getProgramParameter(s,e.LINK_STATUS)||function(e,t,r,n){e.getProgramParameter(t,e.LINK_STATUS)||(e.getShaderParameter(r,e.COMPILE_STATUS)||Se(e,r),e.getShaderParameter(n,e.COMPILE_STATUS)||Se(e,n),console.error("PixiJS Error: Could not initialize shader."),""!==e.getProgramInfoLog(t)&&console.warn("PixiJS Warning: gl.getProgramInfoLog()",e.getProgramInfoLog(t)))}(e,s,r,n),t._attributeData=function(e,t,r=!1){const n={},s=t.getProgramParameter(e,t.ACTIVE_ATTRIBUTES);for(let r=0;r<s;r++){const s=t.getActiveAttrib(e,r);if(s.name.startsWith("gl_"))continue;const i=xe(t,s.type);n[s.name]={location:0,format:i,stride:(0,I.m)(i).stride,offset:0,instance:!1,start:0}}const i=Object.keys(n);if(r){i.sort((e,t)=>e>t?1:-1);for(let r=0;r<i.length;r++)n[i[r]].location=r,t.bindAttribLocation(e,r,i[r]);t.linkProgram(e)}else for(let r=0;r<i.length;r++)n[i[r]].location=t.getAttribLocation(e,i[r]);return n}(s,e,!/^[ \t]*#[ \t]*version[ \t]+300[ \t]+es[ \t]*$/m.test(t.vertex)),t._uniformData=function(e,t){const r={},n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let s=0;s<n;s++){const n=t.getActiveUniform(e,s),i=n.name.replace(/\[.*?\]$/,""),a=!!n.name.match(/\[.*?\]$/),o=pe(t,n.type);r[i]={name:i,index:s,type:o,size:n.size,isArray:a,value:Ee(o,n.size)}}return r}(s,e),t._uniformBlockData=function(e,t){if(!t.ACTIVE_UNIFORM_BLOCKS)return{};const r={},n=t.getProgramParameter(e,t.ACTIVE_UNIFORM_BLOCKS);for(let s=0;s<n;s++){const n=t.getActiveUniformBlockName(e,s),i=t.getUniformBlockIndex(e,n),a=t.getActiveUniformBlockParameter(e,s,t.UNIFORM_BLOCK_DATA_SIZE);r[n]={name:n,index:i,size:a}}return r}(s,e),e.deleteShader(r),e.deleteShader(n);const a={};for(const r in t._uniformData){const n=t._uniformData[r];a[r]={location:e.getUniformLocation(s,r),value:Ee(n.type,n.size)}}return new ge(s,a)}(this._gl,e),this._programDataHash[t]}destroy(){for(const e of Object.keys(this._programDataHash))this._programDataHash[e].destroy(),this._programDataHash[e]=null;this._programDataHash=null}_generateShaderSync(e,t){return function(e,t){const r=[],n=["\n        var g = s.groups;\n        var sS = r.shader;\n        var p = s.glProgram;\n        var ugS = r.uniformGroup;\n        var resources;\n    "];let s=!1,i=0;const a=t._getProgramData(e.glProgram);for(const o in e.groups){const c=e.groups[o];r.push(`\n            resources = g[${o}].resources;\n        `);for(const u in c.resources){const l=c.resources[u];if(l instanceof h.k)if(l.ubo){const t=e._uniformBindMap[o][Number(u)];r.push(`\n                        sS.bindUniformBlock(\n                            resources[${u}],\n                            '${t}',\n                            ${e.glProgram._uniformBlockData[t].index}\n                        );\n                    `)}else r.push(`\n                        ugS.updateUniformGroup(resources[${u}], p, sD);\n                    `);else if(l instanceof de.d){const t=e._uniformBindMap[o][Number(u)];r.push(`\n                    sS.bindUniformBlock(\n                        resources[${u}],\n                        '${t}',\n                        ${e.glProgram._uniformBlockData[t].index}\n                    );\n                `)}else if(l instanceof w.v){const c=e._uniformBindMap[o][u],l=a.uniformData[c];l&&(s||(s=!0,n.push("\n                        var tS = r.texture;\n                        ")),t._gl.uniform1i(l.location,i),r.push(`\n                        tS.bind(resources[${u}], ${i});\n                    `),i++)}}}const o=[...n,...r].join("\n");return new Function("r","s","sD",o)}(e,t)}resetState(){this._activeProgram=null}}Ae.extension={type:[n.Ag.WebGLSystem],name:"shader"};var Be=r(8166);const Ne={f32:"if (cv !== v) {\n            cu.value = v;\n            gl.uniform1f(location, v);\n        }","vec2<f32>":"if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2f(location, v[0], v[1]);\n        }","vec3<f32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3f(location, v[0], v[1], v[2]);\n        }","vec4<f32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4f(location, v[0], v[1], v[2], v[3]);\n        }",i32:"if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }","vec2<i32>":"if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }","vec3<i32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }","vec4<i32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }",u32:"if (cv !== v) {\n            cu.value = v;\n            gl.uniform1ui(location, v);\n        }","vec2<u32>":"if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2ui(location, v[0], v[1]);\n        }","vec3<u32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3ui(location, v[0], v[1], v[2]);\n        }","vec4<u32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4ui(location, v[0], v[1], v[2], v[3]);\n        }",bool:"if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }","vec2<bool>":"if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }","vec3<bool>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }","vec4<bool>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }","mat2x2<f32>":"gl.uniformMatrix2fv(location, false, v);","mat3x3<f32>":"gl.uniformMatrix3fv(location, false, v);","mat4x4<f32>":"gl.uniformMatrix4fv(location, false, v);"},Ce={f32:"gl.uniform1fv(location, v);","vec2<f32>":"gl.uniform2fv(location, v);","vec3<f32>":"gl.uniform3fv(location, v);","vec4<f32>":"gl.uniform4fv(location, v);","mat2x2<f32>":"gl.uniformMatrix2fv(location, false, v);","mat3x3<f32>":"gl.uniformMatrix3fv(location, false, v);","mat4x4<f32>":"gl.uniformMatrix4fv(location, false, v);",i32:"gl.uniform1iv(location, v);","vec2<i32>":"gl.uniform2iv(location, v);","vec3<i32>":"gl.uniform3iv(location, v);","vec4<i32>":"gl.uniform4iv(location, v);",u32:"gl.uniform1iv(location, v);","vec2<u32>":"gl.uniform2iv(location, v);","vec3<u32>":"gl.uniform3iv(location, v);","vec4<u32>":"gl.uniform4iv(location, v);",bool:"gl.uniform1iv(location, v);","vec2<bool>":"gl.uniform2iv(location, v);","vec3<bool>":"gl.uniform3iv(location, v);","vec4<bool>":"gl.uniform4iv(location, v);"};class Ge{constructor(e){this._cache={},this._uniformGroupSyncHash={},this._renderer=e,this.gl=null,this._cache={}}contextChange(e){this.gl=e}updateUniformGroup(e,t,r){const n=this._renderer.shader._getProgramData(t);e.isStatic&&e._dirtyId===n.uniformDirtyGroups[e.uid]||(n.uniformDirtyGroups[e.uid]=e._dirtyId,this._getUniformSyncFunction(e,t)(n.uniformData,e.uniforms,this._renderer,r))}_getUniformSyncFunction(e,t){return this._uniformGroupSyncHash[e._signature]?.[t._key]||this._createUniformSyncFunction(e,t)}_createUniformSyncFunction(e,t){const r=this._uniformGroupSyncHash[e._signature]||(this._uniformGroupSyncHash[e._signature]={}),n=this._getSignature(e,t._uniformData,"u");return this._cache[n]||(this._cache[n]=this._generateUniformsSync(e,t._uniformData)),r[t._key]=this._cache[n],r[t._key]}_generateUniformsSync(e,t){return function(e,t){const r=["\n        var v = null;\n        var cv = null;\n        var cu = null;\n        var t = 0;\n        var gl = renderer.gl;\n        var name = null;\n    "];for(const n in e.uniforms){if(!t[n]){e.uniforms[n]instanceof h.k?e.uniforms[n].ubo?r.push(`\n                        renderer.shader.bindUniformBlock(uv.${n}, "${n}");\n                    `):r.push(`\n                        renderer.shader.updateUniformGroup(uv.${n});\n                    `):e.uniforms[n]instanceof de.d&&r.push(`\n                        renderer.shader.bindBufferResource(uv.${n}, "${n}");\n                    `);continue}const s=e.uniformStructures[n];let i=!1;for(let e=0;e<Be.$.length;e++){const t=Be.$[e];if(s.type===t.type&&t.test(s)){r.push(`name = "${n}";`,Be.$[e].uniform),i=!0;break}}if(!i){const e=(1===s.size?Ne:Ce)[s.type].replace("location",`ud["${n}"].location`);r.push(`\n            cu = ud["${n}"];\n            cv = cu.value;\n            v = uv["${n}"];\n            ${e};`)}}return new Function("ud","uv","renderer","syncData",r.join("\n"))}(e,t)}_getSignature(e,t,r){const n=e.uniforms,s=[`${r}-`];for(const e in n)s.push(e),t[e]&&s.push(t[e].type);return s.join("-")}destroy(){this._renderer=null,this._cache=null}}Ge.extension={type:[n.Ag.WebGLSystem],name:"uniformGroup"};const Ie=class e{constructor(e){this._invertFrontFace=!1,this.gl=null,this.stateId=0,this.polygonOffset=0,this.blendMode="none",this._blendEq=!1,this.map=[],this.map[0]=this.setBlend,this.map[1]=this.setOffset,this.map[2]=this.setCullFace,this.map[3]=this.setDepthTest,this.map[4]=this.setFrontFace,this.map[5]=this.setDepthMask,this.checks=[],this.defaultState=b.U.for2d(),e.renderTarget.onRenderTargetChange.add(this)}onRenderTargetChange(e){this._invertFrontFace=!e.isRoot,this._cullFace?this.setFrontFace(this._frontFace):this._frontFaceDirty=!0}contextChange(e){this.gl=e,this.blendModesMap=function(e){const t={};if(t.normal=[e.ONE,e.ONE_MINUS_SRC_ALPHA],t.add=[e.ONE,e.ONE],t.multiply=[e.DST_COLOR,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA],t.screen=[e.ONE,e.ONE_MINUS_SRC_COLOR,e.ONE,e.ONE_MINUS_SRC_ALPHA],t.none=[0,0],t["normal-npm"]=[e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA],t["add-npm"]=[e.SRC_ALPHA,e.ONE,e.ONE,e.ONE],t["screen-npm"]=[e.SRC_ALPHA,e.ONE_MINUS_SRC_COLOR,e.ONE,e.ONE_MINUS_SRC_ALPHA],t.erase=[e.ZERO,e.ONE_MINUS_SRC_ALPHA],e instanceof N.e.get().getWebGLRenderingContext()){const r=e.getExtension("EXT_blend_minmax");r&&(t.min=[e.ONE,e.ONE,e.ONE,e.ONE,r.MIN_EXT,r.MIN_EXT],t.max=[e.ONE,e.ONE,e.ONE,e.ONE,r.MAX_EXT,r.MAX_EXT])}else t.min=[e.ONE,e.ONE,e.ONE,e.ONE,e.MIN,e.MIN],t.max=[e.ONE,e.ONE,e.ONE,e.ONE,e.MAX,e.MAX];return t}(e),this.resetState()}set(e){if(e||(e=this.defaultState),this.stateId!==e.data){let t=this.stateId^e.data,r=0;for(;t;)1&t&&this.map[r].call(this,!!(e.data&1<<r)),t>>=1,r++;this.stateId=e.data}for(let t=0;t<this.checks.length;t++)this.checks[t](this,e)}forceState(e){e||(e=this.defaultState);for(let t=0;t<this.map.length;t++)this.map[t].call(this,!!(e.data&1<<t));for(let t=0;t<this.checks.length;t++)this.checks[t](this,e);this.stateId=e.data}setBlend(t){this._updateCheck(e._checkBlendMode,t),this.gl[t?"enable":"disable"](this.gl.BLEND)}setOffset(t){this._updateCheck(e._checkPolygonOffset,t),this.gl[t?"enable":"disable"](this.gl.POLYGON_OFFSET_FILL)}setDepthTest(e){this.gl[e?"enable":"disable"](this.gl.DEPTH_TEST)}setDepthMask(e){this.gl.depthMask(e)}setCullFace(e){this._cullFace=e,this.gl[e?"enable":"disable"](this.gl.CULL_FACE),this._cullFace&&this._frontFaceDirty&&this.setFrontFace(this._frontFace)}setFrontFace(e){this._frontFace=e,this._frontFaceDirty=!1;const t=this._invertFrontFace?!e:e;this._glFrontFace!==t&&(this._glFrontFace=t,this.gl.frontFace(this.gl[t?"CW":"CCW"]))}setBlendMode(e){if(this.blendModesMap[e]||(e="normal"),e===this.blendMode)return;this.blendMode=e;const t=this.blendModesMap[e],r=this.gl;2===t.length?r.blendFunc(t[0],t[1]):r.blendFuncSeparate(t[0],t[1],t[2],t[3]),6===t.length?(this._blendEq=!0,r.blendEquationSeparate(t[4],t[5])):this._blendEq&&(this._blendEq=!1,r.blendEquationSeparate(r.FUNC_ADD,r.FUNC_ADD))}setPolygonOffset(e,t){this.gl.polygonOffset(e,t)}resetState(){this._glFrontFace=!1,this._frontFace=!1,this._cullFace=!1,this._frontFaceDirty=!1,this._invertFrontFace=!1,this.gl.frontFace(this.gl.CCW),this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,!1),this.forceState(this.defaultState),this._blendEq=!0,this.blendMode="",this.setBlendMode("normal")}_updateCheck(e,t){const r=this.checks.indexOf(e);t&&-1===r?this.checks.push(e):t||-1===r||this.checks.splice(r,1)}static _checkBlendMode(e,t){e.setBlendMode(t.blendMode)}static _checkPolygonOffset(e,t){e.setPolygonOffset(1,t.polygonOffset)}destroy(){this.gl=null,this.checks.length=0}};Ie.extension={type:[n.Ag.WebGLSystem],name:"state"};let De=Ie;class ye{constructor(e){this.target=O.TEXTURE_2D,this.texture=e,this.width=-1,this.height=-1,this.type=F.UNSIGNED_BYTE,this.internalFormat=y.RGBA,this.format=y.RGBA,this.samplerType=0}}const Oe={id:"buffer",upload(e,t,r){t.width===e.width||t.height===e.height?r.texSubImage2D(r.TEXTURE_2D,0,0,0,e.width,e.height,t.format,t.type,e.resource):r.texImage2D(t.target,0,t.internalFormat,e.width,e.height,0,t.format,t.type,e.resource),t.width=e.width,t.height=e.height}},Fe={"bc1-rgba-unorm":!0,"bc1-rgba-unorm-srgb":!0,"bc2-rgba-unorm":!0,"bc2-rgba-unorm-srgb":!0,"bc3-rgba-unorm":!0,"bc3-rgba-unorm-srgb":!0,"bc4-r-unorm":!0,"bc4-r-snorm":!0,"bc5-rg-unorm":!0,"bc5-rg-snorm":!0,"bc6h-rgb-ufloat":!0,"bc6h-rgb-float":!0,"bc7-rgba-unorm":!0,"bc7-rgba-unorm-srgb":!0,"etc2-rgb8unorm":!0,"etc2-rgb8unorm-srgb":!0,"etc2-rgb8a1unorm":!0,"etc2-rgb8a1unorm-srgb":!0,"etc2-rgba8unorm":!0,"etc2-rgba8unorm-srgb":!0,"eac-r11unorm":!0,"eac-r11snorm":!0,"eac-rg11unorm":!0,"eac-rg11snorm":!0,"astc-4x4-unorm":!0,"astc-4x4-unorm-srgb":!0,"astc-5x4-unorm":!0,"astc-5x4-unorm-srgb":!0,"astc-5x5-unorm":!0,"astc-5x5-unorm-srgb":!0,"astc-6x5-unorm":!0,"astc-6x5-unorm-srgb":!0,"astc-6x6-unorm":!0,"astc-6x6-unorm-srgb":!0,"astc-8x5-unorm":!0,"astc-8x5-unorm-srgb":!0,"astc-8x6-unorm":!0,"astc-8x6-unorm-srgb":!0,"astc-8x8-unorm":!0,"astc-8x8-unorm-srgb":!0,"astc-10x5-unorm":!0,"astc-10x5-unorm-srgb":!0,"astc-10x6-unorm":!0,"astc-10x6-unorm-srgb":!0,"astc-10x8-unorm":!0,"astc-10x8-unorm-srgb":!0,"astc-10x10-unorm":!0,"astc-10x10-unorm-srgb":!0,"astc-12x10-unorm":!0,"astc-12x10-unorm-srgb":!0,"astc-12x12-unorm":!0,"astc-12x12-unorm-srgb":!0},Pe={id:"compressed",upload(e,t,r){r.pixelStorei(r.UNPACK_ALIGNMENT,4);let n=e.pixelWidth,s=e.pixelHeight;const i=!!Fe[e.format];for(let a=0;a<e.resource.length;a++){const o=e.resource[a];i?r.compressedTexImage2D(r.TEXTURE_2D,a,t.internalFormat,n,s,0,o):r.texImage2D(r.TEXTURE_2D,a,t.internalFormat,n,s,0,t.format,t.type,o),n=Math.max(n>>1,1),s=Math.max(s>>1,1)}}},Ue={id:"image",upload(e,t,r,n){const s=t.width,i=t.height,a=e.pixelWidth,o=e.pixelHeight,c=e.resourceWidth,u=e.resourceHeight;c<a||u<o?(s===a&&i===o||r.texImage2D(t.target,0,t.internalFormat,a,o,0,t.format,t.type,null),2===n?r.texSubImage2D(r.TEXTURE_2D,0,0,0,c,u,t.format,t.type,e.resource):r.texSubImage2D(r.TEXTURE_2D,0,0,0,t.format,t.type,e.resource)):s===a&&i===o?r.texSubImage2D(r.TEXTURE_2D,0,0,0,t.format,t.type,e.resource):2===n?r.texImage2D(t.target,0,t.internalFormat,a,o,0,t.format,t.type,e.resource):r.texImage2D(t.target,0,t.internalFormat,t.format,t.type,e.resource),t.width=a,t.height=o}},Le={id:"video",upload(e,t,r,n){e.isValid?Ue.upload(e,t,r,n):r.texImage2D(t.target,0,t.internalFormat,1,1,0,t.format,t.type,null)}},Me={linear:9729,nearest:9728},He={linear:{linear:9987,nearest:9985},nearest:{linear:9986,nearest:9984}},we={"clamp-to-edge":33071,repeat:10497,"mirror-repeat":33648},Ve={never:512,less:513,equal:514,"less-equal":515,greater:516,"not-equal":517,"greater-equal":518,always:519};function ke(e,t,r,n,s,i,a,o){const c=i;if(!o||"repeat"!==e.addressModeU||"repeat"!==e.addressModeV||"repeat"!==e.addressModeW){const r=we[a?"clamp-to-edge":e.addressModeU],n=we[a?"clamp-to-edge":e.addressModeV],i=we[a?"clamp-to-edge":e.addressModeW];t[s](c,t.TEXTURE_WRAP_S,r),t[s](c,t.TEXTURE_WRAP_T,n),t.TEXTURE_WRAP_R&&t[s](c,t.TEXTURE_WRAP_R,i)}if(o&&"linear"===e.magFilter||t[s](c,t.TEXTURE_MAG_FILTER,Me[e.magFilter]),r){if(!o||"linear"!==e.mipmapFilter){const r=He[e.minFilter][e.mipmapFilter];t[s](c,t.TEXTURE_MIN_FILTER,r)}}else t[s](c,t.TEXTURE_MIN_FILTER,Me[e.minFilter]);if(n&&e.maxAnisotropy>1){const r=Math.min(e.maxAnisotropy,t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT));t[s](c,n.TEXTURE_MAX_ANISOTROPY_EXT,r)}e.compare&&t[s](c,t.TEXTURE_COMPARE_FUNC,Ve[e.compare])}class Xe{constructor(e){this.managedTextures=[],this._glTextures=Object.create(null),this._glSamplers=Object.create(null),this._boundTextures=[],this._activeTextureLocation=-1,this._boundSamplers=Object.create(null),this._uploads={image:Ue,buffer:Oe,video:Le,compressed:Pe},this._premultiplyAlpha=!1,this._useSeparateSamplers=!1,this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_glTextures"),this._renderer.renderableGC.addManagedHash(this,"_glSamplers")}contextChange(e){this._gl=e,this._mapFormatToInternalFormat||(this._mapFormatToInternalFormat=function(e,t){let r={},n=e.RGBA;return e instanceof N.e.get().getWebGLRenderingContext()?t.srgb&&(r={"rgba8unorm-srgb":t.srgb.SRGB8_ALPHA8_EXT,"bgra8unorm-srgb":t.srgb.SRGB8_ALPHA8_EXT}):(r={"rgba8unorm-srgb":e.SRGB8_ALPHA8,"bgra8unorm-srgb":e.SRGB8_ALPHA8},n=e.RGBA8),{r8unorm:e.R8,r8snorm:e.R8_SNORM,r8uint:e.R8UI,r8sint:e.R8I,r16uint:e.R16UI,r16sint:e.R16I,r16float:e.R16F,rg8unorm:e.RG8,rg8snorm:e.RG8_SNORM,rg8uint:e.RG8UI,rg8sint:e.RG8I,r32uint:e.R32UI,r32sint:e.R32I,r32float:e.R32F,rg16uint:e.RG16UI,rg16sint:e.RG16I,rg16float:e.RG16F,rgba8unorm:e.RGBA,...r,rgba8snorm:e.RGBA8_SNORM,rgba8uint:e.RGBA8UI,rgba8sint:e.RGBA8I,bgra8unorm:n,rgb9e5ufloat:e.RGB9_E5,rgb10a2unorm:e.RGB10_A2,rg11b10ufloat:e.R11F_G11F_B10F,rg32uint:e.RG32UI,rg32sint:e.RG32I,rg32float:e.RG32F,rgba16uint:e.RGBA16UI,rgba16sint:e.RGBA16I,rgba16float:e.RGBA16F,rgba32uint:e.RGBA32UI,rgba32sint:e.RGBA32I,rgba32float:e.RGBA32F,stencil8:e.STENCIL_INDEX8,depth16unorm:e.DEPTH_COMPONENT16,depth24plus:e.DEPTH_COMPONENT24,"depth24plus-stencil8":e.DEPTH24_STENCIL8,depth32float:e.DEPTH_COMPONENT32F,"depth32float-stencil8":e.DEPTH32F_STENCIL8,...t.s3tc?{"bc1-rgba-unorm":t.s3tc.COMPRESSED_RGBA_S3TC_DXT1_EXT,"bc2-rgba-unorm":t.s3tc.COMPRESSED_RGBA_S3TC_DXT3_EXT,"bc3-rgba-unorm":t.s3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT}:{},...t.s3tc_sRGB?{"bc1-rgba-unorm-srgb":t.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,"bc2-rgba-unorm-srgb":t.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,"bc3-rgba-unorm-srgb":t.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}:{},...t.rgtc?{"bc4-r-unorm":t.rgtc.COMPRESSED_RED_RGTC1_EXT,"bc4-r-snorm":t.rgtc.COMPRESSED_SIGNED_RED_RGTC1_EXT,"bc5-rg-unorm":t.rgtc.COMPRESSED_RED_GREEN_RGTC2_EXT,"bc5-rg-snorm":t.rgtc.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}:{},...t.bptc?{"bc6h-rgb-float":t.bptc.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,"bc6h-rgb-ufloat":t.bptc.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,"bc7-rgba-unorm":t.bptc.COMPRESSED_RGBA_BPTC_UNORM_EXT,"bc7-rgba-unorm-srgb":t.bptc.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT}:{},...t.etc?{"etc2-rgb8unorm":t.etc.COMPRESSED_RGB8_ETC2,"etc2-rgb8unorm-srgb":t.etc.COMPRESSED_SRGB8_ETC2,"etc2-rgb8a1unorm":t.etc.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,"etc2-rgb8a1unorm-srgb":t.etc.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,"etc2-rgba8unorm":t.etc.COMPRESSED_RGBA8_ETC2_EAC,"etc2-rgba8unorm-srgb":t.etc.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,"eac-r11unorm":t.etc.COMPRESSED_R11_EAC,"eac-rg11unorm":t.etc.COMPRESSED_SIGNED_RG11_EAC}:{},...t.astc?{"astc-4x4-unorm":t.astc.COMPRESSED_RGBA_ASTC_4x4_KHR,"astc-4x4-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR,"astc-5x4-unorm":t.astc.COMPRESSED_RGBA_ASTC_5x4_KHR,"astc-5x4-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR,"astc-5x5-unorm":t.astc.COMPRESSED_RGBA_ASTC_5x5_KHR,"astc-5x5-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,"astc-6x5-unorm":t.astc.COMPRESSED_RGBA_ASTC_6x5_KHR,"astc-6x5-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR,"astc-6x6-unorm":t.astc.COMPRESSED_RGBA_ASTC_6x6_KHR,"astc-6x6-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR,"astc-8x5-unorm":t.astc.COMPRESSED_RGBA_ASTC_8x5_KHR,"astc-8x5-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,"astc-8x6-unorm":t.astc.COMPRESSED_RGBA_ASTC_8x6_KHR,"astc-8x6-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR,"astc-8x8-unorm":t.astc.COMPRESSED_RGBA_ASTC_8x8_KHR,"astc-8x8-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR,"astc-10x5-unorm":t.astc.COMPRESSED_RGBA_ASTC_10x5_KHR,"astc-10x5-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,"astc-10x6-unorm":t.astc.COMPRESSED_RGBA_ASTC_10x6_KHR,"astc-10x6-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,"astc-10x8-unorm":t.astc.COMPRESSED_RGBA_ASTC_10x8_KHR,"astc-10x8-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR,"astc-10x10-unorm":t.astc.COMPRESSED_RGBA_ASTC_10x10_KHR,"astc-10x10-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,"astc-12x10-unorm":t.astc.COMPRESSED_RGBA_ASTC_12x10_KHR,"astc-12x10-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,"astc-12x12-unorm":t.astc.COMPRESSED_RGBA_ASTC_12x12_KHR,"astc-12x12-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR}:{}}}(e,this._renderer.context.extensions),this._mapFormatToType=function(e){return{r8unorm:e.UNSIGNED_BYTE,r8snorm:e.BYTE,r8uint:e.UNSIGNED_BYTE,r8sint:e.BYTE,r16uint:e.UNSIGNED_SHORT,r16sint:e.SHORT,r16float:e.HALF_FLOAT,rg8unorm:e.UNSIGNED_BYTE,rg8snorm:e.BYTE,rg8uint:e.UNSIGNED_BYTE,rg8sint:e.BYTE,r32uint:e.UNSIGNED_INT,r32sint:e.INT,r32float:e.FLOAT,rg16uint:e.UNSIGNED_SHORT,rg16sint:e.SHORT,rg16float:e.HALF_FLOAT,rgba8unorm:e.UNSIGNED_BYTE,"rgba8unorm-srgb":e.UNSIGNED_BYTE,rgba8snorm:e.BYTE,rgba8uint:e.UNSIGNED_BYTE,rgba8sint:e.BYTE,bgra8unorm:e.UNSIGNED_BYTE,"bgra8unorm-srgb":e.UNSIGNED_BYTE,rgb9e5ufloat:e.UNSIGNED_INT_5_9_9_9_REV,rgb10a2unorm:e.UNSIGNED_INT_2_10_10_10_REV,rg11b10ufloat:e.UNSIGNED_INT_10F_11F_11F_REV,rg32uint:e.UNSIGNED_INT,rg32sint:e.INT,rg32float:e.FLOAT,rgba16uint:e.UNSIGNED_SHORT,rgba16sint:e.SHORT,rgba16float:e.HALF_FLOAT,rgba32uint:e.UNSIGNED_INT,rgba32sint:e.INT,rgba32float:e.FLOAT,stencil8:e.UNSIGNED_BYTE,depth16unorm:e.UNSIGNED_SHORT,depth24plus:e.UNSIGNED_INT,"depth24plus-stencil8":e.UNSIGNED_INT_24_8,depth32float:e.FLOAT,"depth32float-stencil8":e.FLOAT_32_UNSIGNED_INT_24_8_REV}}(e),this._mapFormatToFormat=function(e){return{r8unorm:e.RED,r8snorm:e.RED,r8uint:e.RED,r8sint:e.RED,r16uint:e.RED,r16sint:e.RED,r16float:e.RED,rg8unorm:e.RG,rg8snorm:e.RG,rg8uint:e.RG,rg8sint:e.RG,r32uint:e.RED,r32sint:e.RED,r32float:e.RED,rg16uint:e.RG,rg16sint:e.RG,rg16float:e.RG,rgba8unorm:e.RGBA,"rgba8unorm-srgb":e.RGBA,rgba8snorm:e.RGBA,rgba8uint:e.RGBA,rgba8sint:e.RGBA,bgra8unorm:e.RGBA,"bgra8unorm-srgb":e.RGBA,rgb9e5ufloat:e.RGB,rgb10a2unorm:e.RGBA,rg11b10ufloat:e.RGB,rg32uint:e.RG,rg32sint:e.RG,rg32float:e.RG,rgba16uint:e.RGBA,rgba16sint:e.RGBA,rgba16float:e.RGBA,rgba32uint:e.RGBA,rgba32sint:e.RGBA,rgba32float:e.RGBA,stencil8:e.STENCIL_INDEX8,depth16unorm:e.DEPTH_COMPONENT,depth24plus:e.DEPTH_COMPONENT,"depth24plus-stencil8":e.DEPTH_STENCIL,depth32float:e.DEPTH_COMPONENT,"depth32float-stencil8":e.DEPTH_STENCIL}}(e)),this._glTextures=Object.create(null),this._glSamplers=Object.create(null),this._boundSamplers=Object.create(null),this._premultiplyAlpha=!1;for(let e=0;e<16;e++)this.bind(f.g.EMPTY,e)}initSource(e){this.bind(e)}bind(e,t=0){const r=e.source;e?(this.bindSource(r,t),this._useSeparateSamplers&&this._bindSampler(r.style,t)):(this.bindSource(null,t),this._useSeparateSamplers&&this._bindSampler(null,t))}bindSource(e,t=0){const r=this._gl;if(e._touched=this._renderer.textureGC.count,this._boundTextures[t]!==e){this._boundTextures[t]=e,this._activateLocation(t),e||(e=f.g.EMPTY.source);const n=this.getGlSource(e);r.bindTexture(n.target,n.texture)}}_bindSampler(e,t=0){const r=this._gl;if(!e)return this._boundSamplers[t]=null,void r.bindSampler(t,null);const n=this._getGlSampler(e);this._boundSamplers[t]!==n&&(this._boundSamplers[t]=n,r.bindSampler(t,n))}unbind(e){const t=e.source,r=this._boundTextures,n=this._gl;for(let e=0;e<r.length;e++)if(r[e]===t){this._activateLocation(e);const s=this.getGlSource(t);n.bindTexture(s.target,null),r[e]=null}}_activateLocation(e){this._activeTextureLocation!==e&&(this._activeTextureLocation=e,this._gl.activeTexture(this._gl.TEXTURE0+e))}_initSource(e){const t=this._gl,r=new ye(t.createTexture());if(r.type=this._mapFormatToType[e.format],r.internalFormat=this._mapFormatToInternalFormat[e.format],r.format=this._mapFormatToFormat[e.format],e.autoGenerateMipmaps&&(this._renderer.context.supports.nonPowOf2mipmaps||e.isPowerOfTwo)){const t=Math.max(e.width,e.height);e.mipLevelCount=Math.floor(Math.log2(t))+1}return this._glTextures[e.uid]=r,this.managedTextures.includes(e)||(e.on("update",this.onSourceUpdate,this),e.on("resize",this.onSourceUpdate,this),e.on("styleChange",this.onStyleChange,this),e.on("destroy",this.onSourceDestroy,this),e.on("unload",this.onSourceUnload,this),e.on("updateMipmaps",this.onUpdateMipmaps,this),this.managedTextures.push(e)),this.onSourceUpdate(e),this.updateStyle(e,!1),r}onStyleChange(e){this.updateStyle(e,!1)}updateStyle(e,t){const r=this._gl,n=this.getGlSource(e);r.bindTexture(r.TEXTURE_2D,n.texture),this._boundTextures[this._activeTextureLocation]=e,ke(e.style,r,e.mipLevelCount>1,this._renderer.context.extensions.anisotropicFiltering,"texParameteri",r.TEXTURE_2D,!this._renderer.context.supports.nonPowOf2wrapping&&!e.isPowerOfTwo,t)}onSourceUnload(e){const t=this._glTextures[e.uid];t&&(this.unbind(e),this._glTextures[e.uid]=null,this._gl.deleteTexture(t.texture))}onSourceUpdate(e){const t=this._gl,r=this.getGlSource(e);t.bindTexture(t.TEXTURE_2D,r.texture),this._boundTextures[this._activeTextureLocation]=e;const n="premultiply-alpha-on-upload"===e.alphaMode;this._premultiplyAlpha!==n&&(this._premultiplyAlpha=n,t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,n)),this._uploads[e.uploadMethodId]?this._uploads[e.uploadMethodId].upload(e,r,t,this._renderer.context.webGLVersion):t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e.pixelWidth,e.pixelHeight,0,t.RGBA,t.UNSIGNED_BYTE,null),e.autoGenerateMipmaps&&e.mipLevelCount>1&&this.onUpdateMipmaps(e,!1)}onUpdateMipmaps(e,t=!0){t&&this.bindSource(e,0);const r=this.getGlSource(e);this._gl.generateMipmap(r.target)}onSourceDestroy(e){e.off("destroy",this.onSourceDestroy,this),e.off("update",this.onSourceUpdate,this),e.off("resize",this.onSourceUpdate,this),e.off("unload",this.onSourceUnload,this),e.off("styleChange",this.onStyleChange,this),e.off("updateMipmaps",this.onUpdateMipmaps,this),this.managedTextures.splice(this.managedTextures.indexOf(e),1),this.onSourceUnload(e)}_initSampler(e){const t=this._gl,r=this._gl.createSampler();return this._glSamplers[e._resourceId]=r,ke(e,t,this._boundTextures[this._activeTextureLocation].mipLevelCount>1,this._renderer.context.extensions.anisotropicFiltering,"samplerParameteri",r,!1,!0),this._glSamplers[e._resourceId]}_getGlSampler(e){return this._glSamplers[e._resourceId]||this._initSampler(e)}getGlSource(e){return this._glTextures[e.uid]||this._initSource(e)}generateCanvas(e){const{pixels:t,width:r,height:n}=this.getPixels(e),s=N.e.get().createCanvas();s.width=r,s.height=n;const i=s.getContext("2d");if(i){const e=i.createImageData(r,n);e.data.set(t),i.putImageData(e,0,0)}return s}getPixels(e){const t=e.source.resolution,r=e.frame,n=Math.max(Math.round(r.width*t),1),s=Math.max(Math.round(r.height*t),1),i=new Uint8Array(4*n*s),a=this._renderer,o=a.renderTarget.getRenderTarget(e),c=a.renderTarget.getGpuRenderTarget(o),u=a.gl;return u.bindFramebuffer(u.FRAMEBUFFER,c.resolveTargetFramebuffer),u.readPixels(Math.round(r.x*t),Math.round(r.y*t),n,s,u.RGBA,u.UNSIGNED_BYTE,i),{pixels:new Uint8ClampedArray(i.buffer),width:n,height:s}}destroy(){this.managedTextures.slice().forEach(e=>this.onSourceDestroy(e)),this.managedTextures=null,this._renderer=null}resetState(){this._activeTextureLocation=-1,this._boundTextures.fill(f.g.EMPTY.source),this._boundSamplers=Object.create(null);const e=this._gl;this._premultiplyAlpha=!1,e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this._premultiplyAlpha)}}Xe.extension={type:[n.Ag.WebGLSystem],name:"texture"};const We=[...p.i,ie,W,G,z,B,Xe,he,M,Ge,Ae,K,De,Z,Y],Ye=[...p.f],Ke=[T,E,d],je=[],ze=[],$e=[];n.XO.handleByNamedList(n.Ag.WebGLSystem,je),n.XO.handleByNamedList(n.Ag.WebGLPipes,ze),n.XO.handleByNamedList(n.Ag.WebGLPipesAdaptor,$e),n.XO.add(...We,...Ye,...Ke);class qe extends R.k{constructor(){super({name:"webgl",type:x.W.WEBGL,systems:je,renderPipes:ze,renderPipeAdaptors:$e})}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Y3lKLGFBRWhCakosS0FBTSxXSS9QUixNQUFNMmpDLEdBQXNCLElBQ3ZCQyxFQUFBLEVBQ0h0bUIsR0FDQXRGLEVBQ0F6SixFQUNBcUssRUFDQXBULEVBQ0FveEIsR0FDQTVULEdBQ0F4UixFQUNBcWMsR0FDQW5GLEdBQ0FyUSxFQUNBMmEsR0FDQS9aLEVBQ0FoQixHQUVJNHJCLEdBQW9CLElBQUksS0FDeEJDLEdBQXVCLENBQUM3L0IsRUFBZ0JwQixFQUFlN0QsR0FDdkQra0MsR0FBVSxHQUNWQyxHQUFjLEdBQ2RDLEdBQXFCLEdBQzNCLEtBQVdDLGtCQUFrQixLQUFjajdCLFlBQWE4NkIsSUFDeEQsS0FBV0csa0JBQWtCLEtBQWNDLFdBQVlILElBQ3ZELEtBQVdFLGtCQUFrQixLQUFjdGhDLGtCQUFtQnFoQyxJQUM5RCxLQUFXeC9CLE9BQU9rL0IsTUFBd0JFLE1BQXNCQyxJQUNoRSxNQUFNTSxXQUFzQkMsRUFBQSxFQUMxQixXQUFBbmdDLEdBUUVzWixNQVBxQixDQUNuQnhkLEtBQU0sUUFDTlIsS0FBTSxJQUFhOGtDLE1BQ25CUCxXQUNBQyxlQUNBQyx1QkFHSixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL2dyYXBoaWNzL2dsL0dsR3JhcGhpY3NBZGFwdG9yLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvbWVzaC9nbC9HbE1lc2hBZGFwdG9yLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL2JhdGNoZXIvZ2wvR2xCYXRjaEFkYXB0b3IubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL2J1ZmZlci9jb25zdC5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvYnVmZmVyL0dsQnVmZmVyLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9idWZmZXIvR2xCdWZmZXJTeXN0ZW0ubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL2NvbnRleHQvR2xDb250ZXh0U3lzdGVtLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC90ZXh0dXJlL2NvbnN0Lm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9nZW9tZXRyeS91dGlscy9nZXRHbFR5cGVGcm9tRm9ybWF0Lm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9nZW9tZXRyeS9HbEdlb21ldHJ5U3lzdGVtLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9HbEJhY2tCdWZmZXJTeXN0ZW0ubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL0dsQ29sb3JNYXNrU3lzdGVtLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9HbEVuY29kZXJTeXN0ZW0ubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL0dsTGltaXRzU3lzdGVtLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9HbFN0ZW5jaWxTeXN0ZW0ubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci91dGlscy9jcmVhdGVVYm9FbGVtZW50c1NURDQwLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvdXRpbHMvZ2VuZXJhdGVBcnJheVN5bmNTVEQ0MC5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc2hhZGVyL3V0aWxzL2NyZWF0ZVVib1N5bmNTVEQ0MC5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvR2xVYm9TeXN0ZW0ubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL0dsUmVuZGVyVGFyZ2V0Lm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9yZW5kZXJUYXJnZXQvR2xSZW5kZXJUYXJnZXRBZGFwdG9yLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9yZW5kZXJUYXJnZXQvR2xSZW5kZXJUYXJnZXRTeXN0ZW0ubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9HbFByb2dyYW1EYXRhLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvcHJvZ3JhbS9jb21waWxlU2hhZGVyLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvcHJvZ3JhbS9kZWZhdWx0VmFsdWUubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9wcm9ncmFtL21hcFR5cGUubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9wcm9ncmFtL2xvZ1Byb2dyYW1FcnJvci5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc2hhZGVyL0dsU2hhZGVyU3lzdGVtLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvcHJvZ3JhbS9nZW5lcmF0ZVByb2dyYW0ubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9wcm9ncmFtL2V4dHJhY3RBdHRyaWJ1dGVzRnJvbUdsUHJvZ3JhbS5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc2hhZGVyL3Byb2dyYW0vZ2V0VW5pZm9ybURhdGEubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9wcm9ncmFtL2dldFVib0RhdGEubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9HZW5lcmF0ZVNoYWRlclN5bmNDb2RlLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvdXRpbHMvZ2VuZXJhdGVVbmlmb3Jtc1N5bmNUeXBlcy5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc2hhZGVyL0dsVW5pZm9ybUdyb3VwU3lzdGVtLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvdXRpbHMvZ2VuZXJhdGVVbmlmb3Jtc1N5bmMubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3N0YXRlL0dsU3RhdGVTeXN0ZW0ubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3N0YXRlL21hcFdlYkdMQmxlbmRNb2Rlc1RvUGl4aS5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvdGV4dHVyZS9HbFRleHR1cmUubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3RleHR1cmUvdXBsb2FkZXJzL2dsVXBsb2FkQnVmZmVySW1hZ2VSZXNvdXJjZS5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvdGV4dHVyZS91cGxvYWRlcnMvZ2xVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC90ZXh0dXJlL3VwbG9hZGVycy9nbFVwbG9hZEltYWdlUmVzb3VyY2UubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3RleHR1cmUvdXBsb2FkZXJzL2dsVXBsb2FkVmlkZW9SZXNvdXJjZS5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvdGV4dHVyZS91dGlscy9waXhpVG9HbE1hcHMubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3RleHR1cmUvdXRpbHMvYXBwbHlTdHlsZVBhcmFtcy5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvdGV4dHVyZS9HbFRleHR1cmVTeXN0ZW0ubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3RleHR1cmUvdXRpbHMvbWFwRm9ybWF0VG9HbEludGVybmFsRm9ybWF0Lm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC90ZXh0dXJlL3V0aWxzL21hcEZvcm1hdFRvR2xUeXBlLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC90ZXh0dXJlL3V0aWxzL21hcEZvcm1hdFRvR2xGb3JtYXQubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL1dlYkdMUmVuZGVyZXIubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IE1hdHJpeCB9IGZyb20gJy4uLy4uLy4uL21hdGhzL21hdHJpeC9NYXRyaXgubWpzJztcbmltcG9ydCB7IGNvbXBpbGVIaWdoU2hhZGVyR2xQcm9ncmFtIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL2NvbXBpbGVIaWdoU2hhZGVyVG9Qcm9ncmFtLm1qcyc7XG5pbXBvcnQgeyBjb2xvckJpdEdsIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL2NvbG9yQml0Lm1qcyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVRleHR1cmVCYXRjaEJpdEdsIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL2dlbmVyYXRlVGV4dHVyZUJhdGNoQml0Lm1qcyc7XG5pbXBvcnQgeyBsb2NhbFVuaWZvcm1CaXRHbCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9sb2NhbFVuaWZvcm1CaXQubWpzJztcbmltcG9ydCB7IHJvdW5kUGl4ZWxzQml0R2wgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvcm91bmRQaXhlbHNCaXQubWpzJztcbmltcG9ydCB7IGdldEJhdGNoU2FtcGxlcnNVbmlmb3JtR3JvdXAgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9nZXRCYXRjaFNhbXBsZXJzVW5pZm9ybUdyb3VwLm1qcyc7XG5pbXBvcnQgeyBTaGFkZXIgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zaGFkZXIvU2hhZGVyLm1qcyc7XG5pbXBvcnQgeyBVbmlmb3JtR3JvdXAgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zaGFkZXIvVW5pZm9ybUdyb3VwLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR2xHcmFwaGljc0FkYXB0b3Ige1xuICBjb250ZXh0Q2hhbmdlKHJlbmRlcmVyKSB7XG4gICAgY29uc3QgdW5pZm9ybXMgPSBuZXcgVW5pZm9ybUdyb3VwKHtcbiAgICAgIHVDb2xvcjogeyB2YWx1ZTogbmV3IEZsb2F0MzJBcnJheShbMSwgMSwgMSwgMV0pLCB0eXBlOiBcInZlYzQ8ZjMyPlwiIH0sXG4gICAgICB1VHJhbnNmb3JtTWF0cml4OiB7IHZhbHVlOiBuZXcgTWF0cml4KCksIHR5cGU6IFwibWF0M3gzPGYzMj5cIiB9LFxuICAgICAgdVJvdW5kOiB7IHZhbHVlOiAwLCB0eXBlOiBcImYzMlwiIH1cbiAgICB9KTtcbiAgICBjb25zdCBtYXhUZXh0dXJlcyA9IHJlbmRlcmVyLmxpbWl0cy5tYXhCYXRjaGFibGVUZXh0dXJlcztcbiAgICBjb25zdCBnbFByb2dyYW0gPSBjb21waWxlSGlnaFNoYWRlckdsUHJvZ3JhbSh7XG4gICAgICBuYW1lOiBcImdyYXBoaWNzXCIsXG4gICAgICBiaXRzOiBbXG4gICAgICAgIGNvbG9yQml0R2wsXG4gICAgICAgIGdlbmVyYXRlVGV4dHVyZUJhdGNoQml0R2wobWF4VGV4dHVyZXMpLFxuICAgICAgICBsb2NhbFVuaWZvcm1CaXRHbCxcbiAgICAgICAgcm91bmRQaXhlbHNCaXRHbFxuICAgICAgXVxuICAgIH0pO1xuICAgIHRoaXMuc2hhZGVyID0gbmV3IFNoYWRlcih7XG4gICAgICBnbFByb2dyYW0sXG4gICAgICByZXNvdXJjZXM6IHtcbiAgICAgICAgbG9jYWxVbmlmb3JtczogdW5pZm9ybXMsXG4gICAgICAgIGJhdGNoU2FtcGxlcnM6IGdldEJhdGNoU2FtcGxlcnNVbmlmb3JtR3JvdXAobWF4VGV4dHVyZXMpXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZXhlY3V0ZShncmFwaGljc1BpcGUsIHJlbmRlcmFibGUpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gcmVuZGVyYWJsZS5jb250ZXh0O1xuICAgIGNvbnN0IHNoYWRlciA9IGNvbnRleHQuY3VzdG9tU2hhZGVyIHx8IHRoaXMuc2hhZGVyO1xuICAgIGNvbnN0IHJlbmRlcmVyID0gZ3JhcGhpY3NQaXBlLnJlbmRlcmVyO1xuICAgIGNvbnN0IGNvbnRleHRTeXN0ZW0gPSByZW5kZXJlci5ncmFwaGljc0NvbnRleHQ7XG4gICAgY29uc3Qge1xuICAgICAgYmF0Y2hlcixcbiAgICAgIGluc3RydWN0aW9uc1xuICAgIH0gPSBjb250ZXh0U3lzdGVtLmdldENvbnRleHRSZW5kZXJEYXRhKGNvbnRleHQpO1xuICAgIHNoYWRlci5ncm91cHNbMF0gPSByZW5kZXJlci5nbG9iYWxVbmlmb3Jtcy5iaW5kR3JvdXA7XG4gICAgcmVuZGVyZXIuc3RhdGUuc2V0KGdyYXBoaWNzUGlwZS5zdGF0ZSk7XG4gICAgcmVuZGVyZXIuc2hhZGVyLmJpbmQoc2hhZGVyKTtcbiAgICByZW5kZXJlci5nZW9tZXRyeS5iaW5kKGJhdGNoZXIuZ2VvbWV0cnksIHNoYWRlci5nbFByb2dyYW0pO1xuICAgIGNvbnN0IGJhdGNoZXMgPSBpbnN0cnVjdGlvbnMuaW5zdHJ1Y3Rpb25zO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5zdHJ1Y3Rpb25zLmluc3RydWN0aW9uU2l6ZTsgaSsrKSB7XG4gICAgICBjb25zdCBiYXRjaCA9IGJhdGNoZXNbaV07XG4gICAgICBpZiAoYmF0Y2guc2l6ZSkge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJhdGNoLnRleHR1cmVzLmNvdW50OyBqKyspIHtcbiAgICAgICAgICByZW5kZXJlci50ZXh0dXJlLmJpbmQoYmF0Y2gudGV4dHVyZXMudGV4dHVyZXNbal0sIGopO1xuICAgICAgICB9XG4gICAgICAgIHJlbmRlcmVyLmdlb21ldHJ5LmRyYXcoYmF0Y2gudG9wb2xvZ3ksIGJhdGNoLnNpemUsIGJhdGNoLnN0YXJ0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnNoYWRlci5kZXN0cm95KHRydWUpO1xuICAgIHRoaXMuc2hhZGVyID0gbnVsbDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdsR3JhcGhpY3NBZGFwdG9yLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xQaXBlc0FkYXB0b3JcbiAgXSxcbiAgbmFtZTogXCJncmFwaGljc1wiXG59O1xuXG5leHBvcnQgeyBHbEdyYXBoaWNzQWRhcHRvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xHcmFwaGljc0FkYXB0b3IubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgTWF0cml4IH0gZnJvbSAnLi4vLi4vLi4vbWF0aHMvbWF0cml4L01hdHJpeC5tanMnO1xuaW1wb3J0IHsgY29tcGlsZUhpZ2hTaGFkZXJHbFByb2dyYW0gfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvY29tcGlsZUhpZ2hTaGFkZXJUb1Byb2dyYW0ubWpzJztcbmltcG9ydCB7IGxvY2FsVW5pZm9ybUJpdEdsIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL2xvY2FsVW5pZm9ybUJpdC5tanMnO1xuaW1wb3J0IHsgcm91bmRQaXhlbHNCaXRHbCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9yb3VuZFBpeGVsc0JpdC5tanMnO1xuaW1wb3J0IHsgdGV4dHVyZUJpdEdsIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL3RleHR1cmVCaXQubWpzJztcbmltcG9ydCB7IFNoYWRlciB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci9TaGFkZXIubWpzJztcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC90ZXh0dXJlL1RleHR1cmUubWpzJztcbmltcG9ydCB7IHdhcm4gfSBmcm9tICcuLi8uLi8uLi91dGlscy9sb2dnaW5nL3dhcm4ubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHbE1lc2hBZGFwdG9yIHtcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBnbFByb2dyYW0gPSBjb21waWxlSGlnaFNoYWRlckdsUHJvZ3JhbSh7XG4gICAgICBuYW1lOiBcIm1lc2hcIixcbiAgICAgIGJpdHM6IFtcbiAgICAgICAgbG9jYWxVbmlmb3JtQml0R2wsXG4gICAgICAgIHRleHR1cmVCaXRHbCxcbiAgICAgICAgcm91bmRQaXhlbHNCaXRHbFxuICAgICAgXVxuICAgIH0pO1xuICAgIHRoaXMuX3NoYWRlciA9IG5ldyBTaGFkZXIoe1xuICAgICAgZ2xQcm9ncmFtLFxuICAgICAgcmVzb3VyY2VzOiB7XG4gICAgICAgIHVUZXh0dXJlOiBUZXh0dXJlLkVNUFRZLnNvdXJjZSxcbiAgICAgICAgdGV4dHVyZVVuaWZvcm1zOiB7XG4gICAgICAgICAgdVRleHR1cmVNYXRyaXg6IHsgdHlwZTogXCJtYXQzeDM8ZjMyPlwiLCB2YWx1ZTogbmV3IE1hdHJpeCgpIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGV4ZWN1dGUobWVzaFBpcGUsIG1lc2gpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IG1lc2hQaXBlLnJlbmRlcmVyO1xuICAgIGxldCBzaGFkZXIgPSBtZXNoLl9zaGFkZXI7XG4gICAgaWYgKCFzaGFkZXIpIHtcbiAgICAgIHNoYWRlciA9IHRoaXMuX3NoYWRlcjtcbiAgICAgIGNvbnN0IHRleHR1cmUgPSBtZXNoLnRleHR1cmU7XG4gICAgICBjb25zdCBzb3VyY2UgPSB0ZXh0dXJlLnNvdXJjZTtcbiAgICAgIHNoYWRlci5yZXNvdXJjZXMudVRleHR1cmUgPSBzb3VyY2U7XG4gICAgICBzaGFkZXIucmVzb3VyY2VzLnVTYW1wbGVyID0gc291cmNlLnN0eWxlO1xuICAgICAgc2hhZGVyLnJlc291cmNlcy50ZXh0dXJlVW5pZm9ybXMudW5pZm9ybXMudVRleHR1cmVNYXRyaXggPSB0ZXh0dXJlLnRleHR1cmVNYXRyaXgubWFwQ29vcmQ7XG4gICAgfSBlbHNlIGlmICghc2hhZGVyLmdsUHJvZ3JhbSkge1xuICAgICAgd2FybihcIk1lc2ggc2hhZGVyIGhhcyBubyBnbFByb2dyYW1cIiwgbWVzaC5zaGFkZXIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzaGFkZXIuZ3JvdXBzWzEwMF0gPSByZW5kZXJlci5nbG9iYWxVbmlmb3Jtcy5iaW5kR3JvdXA7XG4gICAgc2hhZGVyLmdyb3Vwc1sxMDFdID0gbWVzaFBpcGUubG9jYWxVbmlmb3Jtc0JpbmRHcm91cDtcbiAgICByZW5kZXJlci5lbmNvZGVyLmRyYXcoe1xuICAgICAgZ2VvbWV0cnk6IG1lc2guX2dlb21ldHJ5LFxuICAgICAgc2hhZGVyLFxuICAgICAgc3RhdGU6IG1lc2guc3RhdGVcbiAgICB9KTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX3NoYWRlci5kZXN0cm95KHRydWUpO1xuICAgIHRoaXMuX3NoYWRlciA9IG51bGw7XG4gIH1cbn1cbkdsTWVzaEFkYXB0b3IuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFBpcGVzQWRhcHRvclxuICBdLFxuICBuYW1lOiBcIm1lc2hcIlxufTtcblxuZXhwb3J0IHsgR2xNZXNoQWRhcHRvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xNZXNoQWRhcHRvci5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4uLy4uL3JlbmRlcmVycy9zaGFyZWQvc3RhdGUvU3RhdGUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHbEJhdGNoQWRhcHRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3RlbXBTdGF0ZSA9IFN0YXRlLmZvcjJkKCk7XG4gICAgLyoqXG4gICAgICogV2Ugb25seSB3YW50IHRvIHN5bmMgdGhlIGEgYmF0Y2hlZCBzaGFkZXJzIHVuaWZvcm1zIG9uY2Ugb24gZmlyc3QgdXNlXG4gICAgICogdGhpcyBpcyBhIGhhc2ggb2Ygc2hhZGVyIHVpZHMgdG8gYSBib29sZWFuIHZhbHVlLiAgV2hlbiB0aGUgc2hhZGVyIGlzIGZpcnN0IGJvdW5kXG4gICAgICogd2Ugc2V0IHRoZSB2YWx1ZSB0byB0cnVlLiAgV2hlbiB0aGUgc2hhZGVyIGlzIGJvdW5kIGFnYWluIHdlIGNoZWNrIHRoZSB2YWx1ZSBhbmRcbiAgICAgKiBpZiBpdCBpcyB0cnVlIHdlIGtub3cgdGhhdCB0aGUgdW5pZm9ybXMgaGF2ZSBhbHJlYWR5IGJlZW4gc3luY2VkIGFuZCB3ZSBza2lwIGl0LlxuICAgICAqL1xuICAgIHRoaXMuX2RpZFVwbG9hZEhhc2ggPSB7fTtcbiAgfVxuICBpbml0KGJhdGNoZXJQaXBlKSB7XG4gICAgYmF0Y2hlclBpcGUucmVuZGVyZXIucnVubmVycy5jb250ZXh0Q2hhbmdlLmFkZCh0aGlzKTtcbiAgfVxuICBjb250ZXh0Q2hhbmdlKCkge1xuICAgIHRoaXMuX2RpZFVwbG9hZEhhc2ggPSB7fTtcbiAgfVxuICBzdGFydChiYXRjaFBpcGUsIGdlb21ldHJ5LCBzaGFkZXIpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IGJhdGNoUGlwZS5yZW5kZXJlcjtcbiAgICBjb25zdCBkaWRVcGxvYWQgPSB0aGlzLl9kaWRVcGxvYWRIYXNoW3NoYWRlci51aWRdO1xuICAgIHJlbmRlcmVyLnNoYWRlci5iaW5kKHNoYWRlciwgZGlkVXBsb2FkKTtcbiAgICBpZiAoIWRpZFVwbG9hZCkge1xuICAgICAgdGhpcy5fZGlkVXBsb2FkSGFzaFtzaGFkZXIudWlkXSA9IHRydWU7XG4gICAgfVxuICAgIHJlbmRlcmVyLnNoYWRlci51cGRhdGVVbmlmb3JtR3JvdXAocmVuZGVyZXIuZ2xvYmFsVW5pZm9ybXMudW5pZm9ybUdyb3VwKTtcbiAgICByZW5kZXJlci5nZW9tZXRyeS5iaW5kKGdlb21ldHJ5LCBzaGFkZXIuZ2xQcm9ncmFtKTtcbiAgfVxuICBleGVjdXRlKGJhdGNoUGlwZSwgYmF0Y2gpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IGJhdGNoUGlwZS5yZW5kZXJlcjtcbiAgICB0aGlzLl90ZW1wU3RhdGUuYmxlbmRNb2RlID0gYmF0Y2guYmxlbmRNb2RlO1xuICAgIHJlbmRlcmVyLnN0YXRlLnNldCh0aGlzLl90ZW1wU3RhdGUpO1xuICAgIGNvbnN0IHRleHR1cmVzID0gYmF0Y2gudGV4dHVyZXMudGV4dHVyZXM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYXRjaC50ZXh0dXJlcy5jb3VudDsgaSsrKSB7XG4gICAgICByZW5kZXJlci50ZXh0dXJlLmJpbmQodGV4dHVyZXNbaV0sIGkpO1xuICAgIH1cbiAgICByZW5kZXJlci5nZW9tZXRyeS5kcmF3KGJhdGNoLnRvcG9sb2d5LCBiYXRjaC5zaXplLCBiYXRjaC5zdGFydCk7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HbEJhdGNoQWRhcHRvci5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMUGlwZXNBZGFwdG9yXG4gIF0sXG4gIG5hbWU6IFwiYmF0Y2hcIlxufTtcblxuZXhwb3J0IHsgR2xCYXRjaEFkYXB0b3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsQmF0Y2hBZGFwdG9yLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIEJVRkZFUl9UWVBFID0gLyogQF9fUFVSRV9fICovICgoQlVGRkVSX1RZUEUyKSA9PiB7XG4gIEJVRkZFUl9UWVBFMltCVUZGRVJfVFlQRTJbXCJFTEVNRU5UX0FSUkFZX0JVRkZFUlwiXSA9IDM0OTYzXSA9IFwiRUxFTUVOVF9BUlJBWV9CVUZGRVJcIjtcbiAgQlVGRkVSX1RZUEUyW0JVRkZFUl9UWVBFMltcIkFSUkFZX0JVRkZFUlwiXSA9IDM0OTYyXSA9IFwiQVJSQVlfQlVGRkVSXCI7XG4gIEJVRkZFUl9UWVBFMltCVUZGRVJfVFlQRTJbXCJVTklGT1JNX0JVRkZFUlwiXSA9IDM1MzQ1XSA9IFwiVU5JRk9STV9CVUZGRVJcIjtcbiAgcmV0dXJuIEJVRkZFUl9UWVBFMjtcbn0pKEJVRkZFUl9UWVBFIHx8IHt9KTtcblxuZXhwb3J0IHsgQlVGRkVSX1RZUEUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0Lm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY2xhc3MgR2xCdWZmZXIge1xuICBjb25zdHJ1Y3RvcihidWZmZXIsIHR5cGUpIHtcbiAgICB0aGlzLl9sYXN0QmluZEJhc2VMb2NhdGlvbiA9IC0xO1xuICAgIHRoaXMuX2xhc3RCaW5kQ2FsbElkID0gLTE7XG4gICAgdGhpcy5idWZmZXIgPSBidWZmZXIgfHwgbnVsbDtcbiAgICB0aGlzLnVwZGF0ZUlEID0gLTE7XG4gICAgdGhpcy5ieXRlTGVuZ3RoID0gLTE7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgfVxufVxuXG5leHBvcnQgeyBHbEJ1ZmZlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xCdWZmZXIubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgQnVmZmVyVXNhZ2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvYnVmZmVyL2NvbnN0Lm1qcyc7XG5pbXBvcnQgeyBCVUZGRVJfVFlQRSB9IGZyb20gJy4vY29uc3QubWpzJztcbmltcG9ydCB7IEdsQnVmZmVyIH0gZnJvbSAnLi9HbEJ1ZmZlci5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsQnVmZmVyU3lzdGVtIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyIHRoaXMgU3lzdGVtIHdvcmtzIGZvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fZ3B1QnVmZmVycyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIC8qKiBDYWNoZSBrZWVwaW5nIHRyYWNrIG9mIHRoZSBiYXNlIGJvdW5kIGJ1ZmZlciBiYXNlcyAqL1xuICAgIHRoaXMuX2JvdW5kQnVmZmVyQmFzZXMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9taW5CYXNlTG9jYXRpb24gPSAwO1xuICAgIHRoaXMuX25leHRCaW5kQmFzZUluZGV4ID0gdGhpcy5fbWluQmFzZUxvY2F0aW9uO1xuICAgIHRoaXMuX2JpbmRDYWxsSWQgPSAwO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5fcmVuZGVyZXIucmVuZGVyYWJsZUdDLmFkZE1hbmFnZWRIYXNoKHRoaXMsIFwiX2dwdUJ1ZmZlcnNcIik7XG4gIH1cbiAgLyoqIEBpZ25vcmUgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gICAgdGhpcy5fZ2wgPSBudWxsO1xuICAgIHRoaXMuX2dwdUJ1ZmZlcnMgPSBudWxsO1xuICAgIHRoaXMuX2JvdW5kQnVmZmVyQmFzZXMgPSBudWxsO1xuICB9XG4gIC8qKiBTZXRzIHVwIHRoZSByZW5kZXJlciBjb250ZXh0IGFuZCBuZWNlc3NhcnkgYnVmZmVycy4gKi9cbiAgY29udGV4dENoYW5nZSgpIHtcbiAgICB0aGlzLl9nbCA9IHRoaXMuX3JlbmRlcmVyLmdsO1xuICAgIHRoaXMuX2dwdUJ1ZmZlcnMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9tYXhCaW5kaW5ncyA9IHRoaXMuX3JlbmRlcmVyLmxpbWl0cy5tYXhVbmlmb3JtQmluZGluZ3M7XG4gIH1cbiAgZ2V0R2xCdWZmZXIoYnVmZmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dwdUJ1ZmZlcnNbYnVmZmVyLnVpZF0gfHwgdGhpcy5jcmVhdGVHTEJ1ZmZlcihidWZmZXIpO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGJpbmRzIHNwZWNpZmllZCBidWZmZXIuIE9uIGZpcnN0IHJ1biwgaXQgd2lsbCBjcmVhdGUgdGhlIHdlYkdMIGJ1ZmZlcnMgZm9yIHRoZSBjb250ZXh0IHRvb1xuICAgKiBAcGFyYW0gYnVmZmVyIC0gdGhlIGJ1ZmZlciB0byBiaW5kIHRvIHRoZSByZW5kZXJlclxuICAgKi9cbiAgYmluZChidWZmZXIpIHtcbiAgICBjb25zdCB7IF9nbDogZ2wgfSA9IHRoaXM7XG4gICAgY29uc3QgZ2xCdWZmZXIgPSB0aGlzLmdldEdsQnVmZmVyKGJ1ZmZlcik7XG4gICAgZ2wuYmluZEJ1ZmZlcihnbEJ1ZmZlci50eXBlLCBnbEJ1ZmZlci5idWZmZXIpO1xuICB9XG4gIC8qKlxuICAgKiBCaW5kcyBhbiB1bmlmb3JtIGJ1ZmZlciB0byBhdCB0aGUgZ2l2ZW4gaW5kZXguXG4gICAqXG4gICAqIEEgY2FjaGUgaXMgdXNlZCBzbyBhIGJ1ZmZlciB3aWxsIG5vdCBiZSBib3VuZCBhZ2FpbiBpZiBhbHJlYWR5IGJvdW5kLlxuICAgKiBAcGFyYW0gZ2xCdWZmZXIgLSB0aGUgYnVmZmVyIHRvIGJpbmRcbiAgICogQHBhcmFtIGluZGV4IC0gdGhlIGJhc2UgaW5kZXggdG8gYmluZCBpdCB0by5cbiAgICovXG4gIGJpbmRCdWZmZXJCYXNlKGdsQnVmZmVyLCBpbmRleCkge1xuICAgIGNvbnN0IHsgX2dsOiBnbCB9ID0gdGhpcztcbiAgICBpZiAodGhpcy5fYm91bmRCdWZmZXJCYXNlc1tpbmRleF0gIT09IGdsQnVmZmVyKSB7XG4gICAgICB0aGlzLl9ib3VuZEJ1ZmZlckJhc2VzW2luZGV4XSA9IGdsQnVmZmVyO1xuICAgICAgZ2xCdWZmZXIuX2xhc3RCaW5kQmFzZUxvY2F0aW9uID0gaW5kZXg7XG4gICAgICBnbC5iaW5kQnVmZmVyQmFzZShnbC5VTklGT1JNX0JVRkZFUiwgaW5kZXgsIGdsQnVmZmVyLmJ1ZmZlcik7XG4gICAgfVxuICB9XG4gIG5leHRCaW5kQmFzZShoYXNUcmFuc2Zvcm1GZWVkYmFjaykge1xuICAgIHRoaXMuX2JpbmRDYWxsSWQrKztcbiAgICB0aGlzLl9taW5CYXNlTG9jYXRpb24gPSAwO1xuICAgIGlmIChoYXNUcmFuc2Zvcm1GZWVkYmFjaykge1xuICAgICAgdGhpcy5fYm91bmRCdWZmZXJCYXNlc1swXSA9IG51bGw7XG4gICAgICB0aGlzLl9taW5CYXNlTG9jYXRpb24gPSAxO1xuICAgICAgaWYgKHRoaXMuX25leHRCaW5kQmFzZUluZGV4IDwgMSkge1xuICAgICAgICB0aGlzLl9uZXh0QmluZEJhc2VJbmRleCA9IDE7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZyZWVMb2NhdGlvbkZvckJ1ZmZlckJhc2UoZ2xCdWZmZXIpIHtcbiAgICBsZXQgZnJlZUluZGV4ID0gdGhpcy5nZXRMYXN0QmluZEJhc2VMb2NhdGlvbihnbEJ1ZmZlcik7XG4gICAgaWYgKGZyZWVJbmRleCA+PSB0aGlzLl9taW5CYXNlTG9jYXRpb24pIHtcbiAgICAgIGdsQnVmZmVyLl9sYXN0QmluZENhbGxJZCA9IHRoaXMuX2JpbmRDYWxsSWQ7XG4gICAgICByZXR1cm4gZnJlZUluZGV4O1xuICAgIH1cbiAgICBsZXQgbG9vcCA9IDA7XG4gICAgbGV0IG5leHRJbmRleCA9IHRoaXMuX25leHRCaW5kQmFzZUluZGV4O1xuICAgIHdoaWxlIChsb29wIDwgMikge1xuICAgICAgaWYgKG5leHRJbmRleCA+PSB0aGlzLl9tYXhCaW5kaW5ncykge1xuICAgICAgICBuZXh0SW5kZXggPSB0aGlzLl9taW5CYXNlTG9jYXRpb247XG4gICAgICAgIGxvb3ArKztcbiAgICAgIH1cbiAgICAgIGNvbnN0IGN1ckJ1ZiA9IHRoaXMuX2JvdW5kQnVmZmVyQmFzZXNbbmV4dEluZGV4XTtcbiAgICAgIGlmIChjdXJCdWYgJiYgY3VyQnVmLl9sYXN0QmluZENhbGxJZCA9PT0gdGhpcy5fYmluZENhbGxJZCkge1xuICAgICAgICBuZXh0SW5kZXgrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZnJlZUluZGV4ID0gbmV4dEluZGV4O1xuICAgIHRoaXMuX25leHRCaW5kQmFzZUluZGV4ID0gbmV4dEluZGV4ICsgMTtcbiAgICBpZiAobG9vcCA+PSAyKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGdsQnVmZmVyLl9sYXN0QmluZENhbGxJZCA9IHRoaXMuX2JpbmRDYWxsSWQ7XG4gICAgdGhpcy5fYm91bmRCdWZmZXJCYXNlc1tmcmVlSW5kZXhdID0gbnVsbDtcbiAgICByZXR1cm4gZnJlZUluZGV4O1xuICB9XG4gIGdldExhc3RCaW5kQmFzZUxvY2F0aW9uKGdsQnVmZmVyKSB7XG4gICAgY29uc3QgaW5kZXggPSBnbEJ1ZmZlci5fbGFzdEJpbmRCYXNlTG9jYXRpb247XG4gICAgaWYgKHRoaXMuX2JvdW5kQnVmZmVyQmFzZXNbaW5kZXhdID09PSBnbEJ1ZmZlcikge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgLyoqXG4gICAqIEJpbmRzIGEgYnVmZmVyIHdoaWxzdCBhbHNvIGJpbmRpbmcgaXRzIHJhbmdlLlxuICAgKiBUaGlzIHdpbGwgbWFrZSB0aGUgYnVmZmVyIHN0YXJ0IGZyb20gdGhlIG9mZnNldCBzdXBwbGllZCByYXRoZXIgdGhhbiAwIHdoZW4gaXQgaXMgcmVhZC5cbiAgICogQHBhcmFtIGdsQnVmZmVyIC0gdGhlIGJ1ZmZlciB0byBiaW5kXG4gICAqIEBwYXJhbSBpbmRleCAtIHRoZSBiYXNlIGluZGV4IHRvIGJpbmQgYXQsIGRlZmF1bHRzIHRvIDBcbiAgICogQHBhcmFtIG9mZnNldCAtIHRoZSBvZmZzZXQgdG8gYmluZCBhdCAodGhpcyBpcyBibG9ja3Mgb2YgMjU2KS4gMCA9IDAsIDEgPSAyNTYsIDIgPSA1MTIgZXRjXG4gICAqIEBwYXJhbSBzaXplIC0gdGhlIHNpemUgdG8gYmluZCBhdCAodGhpcyBpcyBibG9ja3Mgb2YgMjU2KS5cbiAgICovXG4gIGJpbmRCdWZmZXJSYW5nZShnbEJ1ZmZlciwgaW5kZXgsIG9mZnNldCwgc2l6ZSkge1xuICAgIGNvbnN0IHsgX2dsOiBnbCB9ID0gdGhpcztcbiAgICBvZmZzZXQgfHwgKG9mZnNldCA9IDApO1xuICAgIGluZGV4IHx8IChpbmRleCA9IDApO1xuICAgIHRoaXMuX2JvdW5kQnVmZmVyQmFzZXNbaW5kZXhdID0gbnVsbDtcbiAgICBnbC5iaW5kQnVmZmVyUmFuZ2UoZ2wuVU5JRk9STV9CVUZGRVIsIGluZGV4IHx8IDAsIGdsQnVmZmVyLmJ1ZmZlciwgb2Zmc2V0ICogMjU2LCBzaXplIHx8IDI1Nik7XG4gIH1cbiAgLyoqXG4gICAqIFdpbGwgZW5zdXJlIHRoZSBkYXRhIGluIHRoZSBidWZmZXIgaXMgdXBsb2FkZWQgdG8gdGhlIEdQVS5cbiAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciAtIHRoZSBidWZmZXIgdG8gdXBkYXRlXG4gICAqL1xuICB1cGRhdGVCdWZmZXIoYnVmZmVyKSB7XG4gICAgY29uc3QgeyBfZ2w6IGdsIH0gPSB0aGlzO1xuICAgIGNvbnN0IGdsQnVmZmVyID0gdGhpcy5nZXRHbEJ1ZmZlcihidWZmZXIpO1xuICAgIGlmIChidWZmZXIuX3VwZGF0ZUlEID09PSBnbEJ1ZmZlci51cGRhdGVJRCkge1xuICAgICAgcmV0dXJuIGdsQnVmZmVyO1xuICAgIH1cbiAgICBnbEJ1ZmZlci51cGRhdGVJRCA9IGJ1ZmZlci5fdXBkYXRlSUQ7XG4gICAgZ2wuYmluZEJ1ZmZlcihnbEJ1ZmZlci50eXBlLCBnbEJ1ZmZlci5idWZmZXIpO1xuICAgIGNvbnN0IGRhdGEgPSBidWZmZXIuZGF0YTtcbiAgICBjb25zdCBkcmF3VHlwZSA9IGJ1ZmZlci5kZXNjcmlwdG9yLnVzYWdlICYgQnVmZmVyVXNhZ2UuU1RBVElDID8gZ2wuU1RBVElDX0RSQVcgOiBnbC5EWU5BTUlDX0RSQVc7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIGlmIChnbEJ1ZmZlci5ieXRlTGVuZ3RoID49IGRhdGEuYnl0ZUxlbmd0aCkge1xuICAgICAgICBnbC5idWZmZXJTdWJEYXRhKGdsQnVmZmVyLnR5cGUsIDAsIGRhdGEsIDAsIGJ1ZmZlci5fdXBkYXRlU2l6ZSAvIGRhdGEuQllURVNfUEVSX0VMRU1FTlQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2xCdWZmZXIuYnl0ZUxlbmd0aCA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgZ2wuYnVmZmVyRGF0YShnbEJ1ZmZlci50eXBlLCBkYXRhLCBkcmF3VHlwZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsQnVmZmVyLmJ5dGVMZW5ndGggPSBidWZmZXIuZGVzY3JpcHRvci5zaXplO1xuICAgICAgZ2wuYnVmZmVyRGF0YShnbEJ1ZmZlci50eXBlLCBnbEJ1ZmZlci5ieXRlTGVuZ3RoLCBkcmF3VHlwZSk7XG4gICAgfVxuICAgIHJldHVybiBnbEJ1ZmZlcjtcbiAgfVxuICAvKiogZGlzcG9zZSBhbGwgV2ViR0wgcmVzb3VyY2VzIG9mIGFsbCBtYW5hZ2VkIGJ1ZmZlcnMgKi9cbiAgZGVzdHJveUFsbCgpIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5fZ3B1QnVmZmVycykge1xuICAgICAgZ2wuZGVsZXRlQnVmZmVyKHRoaXMuX2dwdUJ1ZmZlcnNbaWRdLmJ1ZmZlcik7XG4gICAgfVxuICAgIHRoaXMuX2dwdUJ1ZmZlcnMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuICAvKipcbiAgICogRGlzcG9zZXMgYnVmZmVyXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgLSBidWZmZXIgd2l0aCBkYXRhXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NvbnRleHRMb3N0PWZhbHNlXSAtIElmIGNvbnRleHQgd2FzIGxvc3QsIHdlIHN1cHByZXNzIGRlbGV0ZVZlcnRleEFycmF5XG4gICAqL1xuICBvbkJ1ZmZlckRlc3Ryb3koYnVmZmVyLCBjb250ZXh0TG9zdCkge1xuICAgIGNvbnN0IGdsQnVmZmVyID0gdGhpcy5fZ3B1QnVmZmVyc1tidWZmZXIudWlkXTtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGlmICghY29udGV4dExvc3QpIHtcbiAgICAgIGdsLmRlbGV0ZUJ1ZmZlcihnbEJ1ZmZlci5idWZmZXIpO1xuICAgIH1cbiAgICB0aGlzLl9ncHVCdWZmZXJzW2J1ZmZlci51aWRdID0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogY3JlYXRlcyBhbmQgYXR0YWNoZXMgYSBHTEJ1ZmZlciBvYmplY3QgdGllZCB0byB0aGUgY3VycmVudCBjb250ZXh0LlxuICAgKiBAcGFyYW0gYnVmZmVyXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGNyZWF0ZUdMQnVmZmVyKGJ1ZmZlcikge1xuICAgIGNvbnN0IHsgX2dsOiBnbCB9ID0gdGhpcztcbiAgICBsZXQgdHlwZSA9IEJVRkZFUl9UWVBFLkFSUkFZX0JVRkZFUjtcbiAgICBpZiAoYnVmZmVyLmRlc2NyaXB0b3IudXNhZ2UgJiBCdWZmZXJVc2FnZS5JTkRFWCkge1xuICAgICAgdHlwZSA9IEJVRkZFUl9UWVBFLkVMRU1FTlRfQVJSQVlfQlVGRkVSO1xuICAgIH0gZWxzZSBpZiAoYnVmZmVyLmRlc2NyaXB0b3IudXNhZ2UgJiBCdWZmZXJVc2FnZS5VTklGT1JNKSB7XG4gICAgICB0eXBlID0gQlVGRkVSX1RZUEUuVU5JRk9STV9CVUZGRVI7XG4gICAgfVxuICAgIGNvbnN0IGdsQnVmZmVyID0gbmV3IEdsQnVmZmVyKGdsLmNyZWF0ZUJ1ZmZlcigpLCB0eXBlKTtcbiAgICB0aGlzLl9ncHVCdWZmZXJzW2J1ZmZlci51aWRdID0gZ2xCdWZmZXI7XG4gICAgYnVmZmVyLm9uKFwiZGVzdHJveVwiLCB0aGlzLm9uQnVmZmVyRGVzdHJveSwgdGhpcyk7XG4gICAgcmV0dXJuIGdsQnVmZmVyO1xuICB9XG4gIHJlc2V0U3RhdGUoKSB7XG4gICAgdGhpcy5fYm91bmRCdWZmZXJCYXNlcyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR2xCdWZmZXJTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbVxuICBdLFxuICBuYW1lOiBcImJ1ZmZlclwiXG59O1xuXG5leHBvcnQgeyBHbEJ1ZmZlclN5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xCdWZmZXJTeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgRE9NQWRhcHRlciB9IGZyb20gJy4uLy4uLy4uLy4uL2Vudmlyb25tZW50L2FkYXB0ZXIubWpzJztcbmltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IHdhcm4gfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9sb2dnaW5nL3dhcm4ubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBfR2xDb250ZXh0U3lzdGVtID0gY2xhc3MgX0dsQ29udGV4dFN5c3RlbSB7XG4gIC8qKiBAcGFyYW0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIgdGhpcyBTeXN0ZW0gd29ya3MgZm9yLiAqL1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIC8qKlxuICAgICAqIEZlYXR1cmVzIHN1cHBvcnRlZCBieSBjdXJyZW50IHJlbmRlcmVyLlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgdGhpcy5zdXBwb3J0cyA9IHtcbiAgICAgIC8qKiBTdXBwb3J0IGZvciAzMi1iaXQgaW5kaWNlcyBidWZmZXIuICovXG4gICAgICB1aW50MzJJbmRpY2VzOiB0cnVlLFxuICAgICAgLyoqIFN1cHBvcnQgZm9yIFVuaWZvcm1CdWZmZXJPYmplY3RzICovXG4gICAgICB1bmlmb3JtQnVmZmVyT2JqZWN0OiB0cnVlLFxuICAgICAgLyoqIFN1cHBvcnQgZm9yIFZlcnRleEFycmF5T2JqZWN0cyAqL1xuICAgICAgdmVydGV4QXJyYXlPYmplY3Q6IHRydWUsXG4gICAgICAvKiogU3VwcG9ydCBmb3IgU1JHQiB0ZXh0dXJlIGZvcm1hdCAqL1xuICAgICAgc3JnYlRleHR1cmVzOiB0cnVlLFxuICAgICAgLyoqIFN1cHBvcnQgZm9yIHdyYXBwaW5nIG1vZGVzIGlmIGEgdGV4dHVyZSBpcyBub24tcG93ZXIgb2YgdHdvICovXG4gICAgICBub25Qb3dPZjJ3cmFwcGluZzogdHJ1ZSxcbiAgICAgIC8qKiBTdXBwb3J0IGZvciBNU0FBIChhbnRpYWxpYXNpbmcgb2YgZHluYW1pYyB0ZXh0dXJlcykgKi9cbiAgICAgIG1zYWE6IHRydWUsXG4gICAgICAvKiogU3VwcG9ydCBmb3IgbWlwbWFwcyBpZiBhIHRleHR1cmUgaXMgbm9uLXBvd2VyIG9mIHR3byAqL1xuICAgICAgbm9uUG93T2YybWlwbWFwczogdHJ1ZVxuICAgIH07XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmhhbmRsZUNvbnRleHRMb3N0ID0gdGhpcy5oYW5kbGVDb250ZXh0TG9zdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlQ29udGV4dFJlc3RvcmVkID0gdGhpcy5oYW5kbGVDb250ZXh0UmVzdG9yZWQuYmluZCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogYHRydWVgIGlmIHRoZSBjb250ZXh0IGlzIGxvc3RcbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgaXNMb3N0KCkge1xuICAgIHJldHVybiAhdGhpcy5nbCB8fCB0aGlzLmdsLmlzQ29udGV4dExvc3QoKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlcyB0aGUgY29udGV4dCBjaGFuZ2UgZXZlbnQuXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCAtIE5ldyBXZWJHTCBjb250ZXh0LlxuICAgKi9cbiAgY29udGV4dENoYW5nZShnbCkge1xuICAgIHRoaXMuZ2wgPSBnbDtcbiAgICB0aGlzLl9yZW5kZXJlci5nbCA9IGdsO1xuICB9XG4gIGluaXQob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7IC4uLl9HbENvbnRleHRTeXN0ZW0uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcbiAgICBsZXQgbXVsdGlWaWV3ID0gdGhpcy5tdWx0aVZpZXcgPSBvcHRpb25zLm11bHRpVmlldztcbiAgICBpZiAob3B0aW9ucy5jb250ZXh0ICYmIG11bHRpVmlldykge1xuICAgICAgd2FybihcIlJlbmRlcmVyIGNyZWF0ZWQgd2l0aCBib3RoIGEgY29udGV4dCBhbmQgbXVsdGl2aWV3IGVuYWJsZWQuIERpc2FibGluZyBtdWx0aVZpZXcgYXMgYm90aCBjYW5ub3Qgd29yayB0b2dldGhlci5cIik7XG4gICAgICBtdWx0aVZpZXcgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG11bHRpVmlldykge1xuICAgICAgdGhpcy5jYW52YXMgPSBET01BZGFwdGVyLmdldCgpLmNyZWF0ZUNhbnZhcyh0aGlzLl9yZW5kZXJlci5jYW52YXMud2lkdGgsIHRoaXMuX3JlbmRlcmVyLmNhbnZhcy5oZWlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNhbnZhcyA9IHRoaXMuX3JlbmRlcmVyLnZpZXcuY2FudmFzO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5jb250ZXh0KSB7XG4gICAgICB0aGlzLmluaXRGcm9tQ29udGV4dChvcHRpb25zLmNvbnRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBhbHBoYSA9IHRoaXMuX3JlbmRlcmVyLmJhY2tncm91bmQuYWxwaGEgPCAxO1xuICAgICAgY29uc3QgcHJlbXVsdGlwbGllZEFscGhhID0gb3B0aW9ucy5wcmVtdWx0aXBsaWVkQWxwaGEgPz8gdHJ1ZTtcbiAgICAgIGNvbnN0IGFudGlhbGlhcyA9IG9wdGlvbnMuYW50aWFsaWFzICYmICF0aGlzLl9yZW5kZXJlci5iYWNrQnVmZmVyLnVzZUJhY2tCdWZmZXI7XG4gICAgICB0aGlzLmNyZWF0ZUNvbnRleHQob3B0aW9ucy5wcmVmZXJXZWJHTFZlcnNpb24sIHtcbiAgICAgICAgYWxwaGEsXG4gICAgICAgIHByZW11bHRpcGxpZWRBbHBoYSxcbiAgICAgICAgYW50aWFsaWFzLFxuICAgICAgICBzdGVuY2lsOiB0cnVlLFxuICAgICAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IG9wdGlvbnMucHJlc2VydmVEcmF3aW5nQnVmZmVyLFxuICAgICAgICBwb3dlclByZWZlcmVuY2U6IG9wdGlvbnMucG93ZXJQcmVmZXJlbmNlID8/IFwiZGVmYXVsdFwiXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZW5zdXJlQ2FudmFzU2l6ZSh0YXJnZXRDYW52YXMpIHtcbiAgICBpZiAoIXRoaXMubXVsdGlWaWV3KSB7XG4gICAgICBpZiAodGFyZ2V0Q2FudmFzICE9PSB0aGlzLmNhbnZhcykge1xuICAgICAgICB3YXJuKFwibXVsdGlWaWV3IGlzIGRpc2FibGVkLCBidXQgdGFyZ2V0Q2FudmFzIGlzIG5vdCB0aGUgbWFpbiBjYW52YXNcIik7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHsgY2FudmFzIH0gPSB0aGlzO1xuICAgIGlmIChjYW52YXMud2lkdGggPCB0YXJnZXRDYW52YXMud2lkdGggfHwgY2FudmFzLmhlaWdodCA8IHRhcmdldENhbnZhcy5oZWlnaHQpIHtcbiAgICAgIGNhbnZhcy53aWR0aCA9IE1hdGgubWF4KHRhcmdldENhbnZhcy53aWR0aCwgdGFyZ2V0Q2FudmFzLndpZHRoKTtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBNYXRoLm1heCh0YXJnZXRDYW52YXMuaGVpZ2h0LCB0YXJnZXRDYW52YXMuaGVpZ2h0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBjb250ZXh0LlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCAtIFdlYkdMIGNvbnRleHRcbiAgICovXG4gIGluaXRGcm9tQ29udGV4dChnbCkge1xuICAgIHRoaXMuZ2wgPSBnbDtcbiAgICB0aGlzLndlYkdMVmVyc2lvbiA9IGdsIGluc3RhbmNlb2YgRE9NQWRhcHRlci5nZXQoKS5nZXRXZWJHTFJlbmRlcmluZ0NvbnRleHQoKSA/IDEgOiAyO1xuICAgIHRoaXMuZ2V0RXh0ZW5zaW9ucygpO1xuICAgIHRoaXMudmFsaWRhdGVDb250ZXh0KGdsKTtcbiAgICB0aGlzLl9yZW5kZXJlci5ydW5uZXJzLmNvbnRleHRDaGFuZ2UuZW1pdChnbCk7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX3JlbmRlcmVyLnZpZXcuY2FudmFzO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmdsY29udGV4dGxvc3RcIiwgdGhpcy5oYW5kbGVDb250ZXh0TG9zdCwgZmFsc2UpO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmdsY29udGV4dHJlc3RvcmVkXCIsIHRoaXMuaGFuZGxlQ29udGV4dFJlc3RvcmVkLCBmYWxzZSk7XG4gIH1cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgZnJvbSBjb250ZXh0IG9wdGlvbnNcbiAgICogQHByb3RlY3RlZFxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MQ2FudmFzRWxlbWVudC9nZXRDb250ZXh0XG4gICAqIEBwYXJhbSBwcmVmZXJXZWJHTFZlcnNpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBjb250ZXh0IGF0dHJpYnV0ZXNcbiAgICovXG4gIGNyZWF0ZUNvbnRleHQocHJlZmVyV2ViR0xWZXJzaW9uLCBvcHRpb25zKSB7XG4gICAgbGV0IGdsO1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgIGlmIChwcmVmZXJXZWJHTFZlcnNpb24gPT09IDIpIHtcbiAgICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbDJcIiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGlmICghZ2wpIHtcbiAgICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbFwiLCBvcHRpb25zKTtcbiAgICAgIGlmICghZ2wpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgV2ViR0wuIFRyeSB1c2luZyB0aGUgY2FudmFzIHJlbmRlcmVyXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmdsID0gZ2w7XG4gICAgdGhpcy5pbml0RnJvbUNvbnRleHQodGhpcy5nbCk7XG4gIH1cbiAgLyoqIEF1dG8tcG9wdWxhdGUgdGhlIHtAbGluayBHbENvbnRleHRTeXN0ZW0uZXh0ZW5zaW9ucyBleHRlbnNpb25zfS4gKi9cbiAgZ2V0RXh0ZW5zaW9ucygpIHtcbiAgICBjb25zdCB7IGdsIH0gPSB0aGlzO1xuICAgIGNvbnN0IGNvbW1vbiA9IHtcbiAgICAgIGFuaXNvdHJvcGljRmlsdGVyaW5nOiBnbC5nZXRFeHRlbnNpb24oXCJFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIiksXG4gICAgICBmbG9hdFRleHR1cmVMaW5lYXI6IGdsLmdldEV4dGVuc2lvbihcIk9FU190ZXh0dXJlX2Zsb2F0X2xpbmVhclwiKSxcbiAgICAgIHMzdGM6IGdsLmdldEV4dGVuc2lvbihcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCIpLFxuICAgICAgczN0Y19zUkdCOiBnbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y19zcmdiXCIpLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICAgIGV0YzogZ2wuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0Y1wiKSxcbiAgICAgIGV0YzE6IGdsLmdldEV4dGVuc2lvbihcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxXCIpLFxuICAgICAgcHZydGM6IGdsLmdldEV4dGVuc2lvbihcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0Y1wiKSB8fCBnbC5nZXRFeHRlbnNpb24oXCJXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpLFxuICAgICAgYXRjOiBnbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXRjXCIpLFxuICAgICAgYXN0YzogZ2wuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2FzdGNcIiksXG4gICAgICBicHRjOiBnbC5nZXRFeHRlbnNpb24oXCJFWFRfdGV4dHVyZV9jb21wcmVzc2lvbl9icHRjXCIpLFxuICAgICAgcmd0YzogZ2wuZ2V0RXh0ZW5zaW9uKFwiRVhUX3RleHR1cmVfY29tcHJlc3Npb25fcmd0Y1wiKSxcbiAgICAgIGxvc2VDb250ZXh0OiBnbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9sb3NlX2NvbnRleHRcIilcbiAgICB9O1xuICAgIGlmICh0aGlzLndlYkdMVmVyc2lvbiA9PT0gMSkge1xuICAgICAgdGhpcy5leHRlbnNpb25zID0ge1xuICAgICAgICAuLi5jb21tb24sXG4gICAgICAgIGRyYXdCdWZmZXJzOiBnbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9kcmF3X2J1ZmZlcnNcIiksXG4gICAgICAgIGRlcHRoVGV4dHVyZTogZ2wuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfZGVwdGhfdGV4dHVyZVwiKSxcbiAgICAgICAgdmVydGV4QXJyYXlPYmplY3Q6IGdsLmdldEV4dGVuc2lvbihcIk9FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0XCIpIHx8IGdsLmdldEV4dGVuc2lvbihcIk1PWl9PRVNfdmVydGV4X2FycmF5X29iamVjdFwiKSB8fCBnbC5nZXRFeHRlbnNpb24oXCJXRUJLSVRfT0VTX3ZlcnRleF9hcnJheV9vYmplY3RcIiksXG4gICAgICAgIHVpbnQzMkVsZW1lbnRJbmRleDogZ2wuZ2V0RXh0ZW5zaW9uKFwiT0VTX2VsZW1lbnRfaW5kZXhfdWludFwiKSxcbiAgICAgICAgLy8gRmxvYXRzIGFuZCBoYWxmLWZsb2F0c1xuICAgICAgICBmbG9hdFRleHR1cmU6IGdsLmdldEV4dGVuc2lvbihcIk9FU190ZXh0dXJlX2Zsb2F0XCIpLFxuICAgICAgICBmbG9hdFRleHR1cmVMaW5lYXI6IGdsLmdldEV4dGVuc2lvbihcIk9FU190ZXh0dXJlX2Zsb2F0X2xpbmVhclwiKSxcbiAgICAgICAgdGV4dHVyZUhhbGZGbG9hdDogZ2wuZ2V0RXh0ZW5zaW9uKFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdFwiKSxcbiAgICAgICAgdGV4dHVyZUhhbGZGbG9hdExpbmVhcjogZ2wuZ2V0RXh0ZW5zaW9uKFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXJcIiksXG4gICAgICAgIHZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRTogZ2wuZ2V0RXh0ZW5zaW9uKFwiQU5HTEVfaW5zdGFuY2VkX2FycmF5c1wiKSxcbiAgICAgICAgc3JnYjogZ2wuZ2V0RXh0ZW5zaW9uKFwiRVhUX3NSR0JcIilcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXh0ZW5zaW9ucyA9IHtcbiAgICAgICAgLi4uY29tbW9uLFxuICAgICAgICBjb2xvckJ1ZmZlckZsb2F0OiBnbC5nZXRFeHRlbnNpb24oXCJFWFRfY29sb3JfYnVmZmVyX2Zsb2F0XCIpXG4gICAgICB9O1xuICAgICAgY29uc3QgcHJvdm9rZUV4dCA9IGdsLmdldEV4dGVuc2lvbihcIldFQkdMX3Byb3Zva2luZ192ZXJ0ZXhcIik7XG4gICAgICBpZiAocHJvdm9rZUV4dCkge1xuICAgICAgICBwcm92b2tlRXh0LnByb3Zva2luZ1ZlcnRleFdFQkdMKHByb3Zva2VFeHQuRklSU1RfVkVSVEVYX0NPTlZFTlRJT05fV0VCR0wpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogSGFuZGxlcyBhIGxvc3Qgd2ViZ2wgY29udGV4dFxuICAgKiBAcGFyYW0ge1dlYkdMQ29udGV4dEV2ZW50fSBldmVudCAtIFRoZSBjb250ZXh0IGxvc3QgZXZlbnQuXG4gICAqL1xuICBoYW5kbGVDb250ZXh0TG9zdChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHRoaXMuX2NvbnRleHRMb3NzRm9yY2VkKSB7XG4gICAgICB0aGlzLl9jb250ZXh0TG9zc0ZvcmNlZCA9IGZhbHNlO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmdsLmlzQ29udGV4dExvc3QoKSkge1xuICAgICAgICAgIHRoaXMuZXh0ZW5zaW9ucy5sb3NlQ29udGV4dD8ucmVzdG9yZUNvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG4gIC8qKiBIYW5kbGVzIGEgcmVzdG9yZWQgd2ViZ2wgY29udGV4dC4gKi9cbiAgaGFuZGxlQ29udGV4dFJlc3RvcmVkKCkge1xuICAgIHRoaXMuZ2V0RXh0ZW5zaW9ucygpO1xuICAgIHRoaXMuX3JlbmRlcmVyLnJ1bm5lcnMuY29udGV4dENoYW5nZS5lbWl0KHRoaXMuZ2wpO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX3JlbmRlcmVyLnZpZXcuY2FudmFzO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3ZWJnbGNvbnRleHRsb3N0XCIsIHRoaXMuaGFuZGxlQ29udGV4dExvc3QpO1xuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndlYmdsY29udGV4dHJlc3RvcmVkXCIsIHRoaXMuaGFuZGxlQ29udGV4dFJlc3RvcmVkKTtcbiAgICB0aGlzLmdsLnVzZVByb2dyYW0obnVsbCk7XG4gICAgdGhpcy5leHRlbnNpb25zLmxvc2VDb250ZXh0Py5sb3NlQ29udGV4dCgpO1xuICB9XG4gIC8qKlxuICAgKiB0aGlzIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgdG8gZm9yY2UgYSB3ZWJHTCBjb250ZXh0IGxvc3NcbiAgICogdGhpcyB3aWxsIHJlbGVhc2UgYWxsIHJlc291cmNlcyBvbiB0aGUgR1BVLlxuICAgKiBVc2VmdWwgaWYgeW91IG5lZWQgdG8gcHV0IFBpeGkgdG8gc2xlZXAsIGFuZCBzYXZlIHNvbWUgR1BVIG1lbW9yeVxuICAgKlxuICAgKiBBcyBzb29uIGFzIHJlbmRlciBpcyBjYWxsZWQgLSBhbGwgcmVzb3VyY2VzIHdpbGwgYmUgY3JlYXRlZCBhZ2Fpbi5cbiAgICovXG4gIGZvcmNlQ29udGV4dExvc3MoKSB7XG4gICAgdGhpcy5leHRlbnNpb25zLmxvc2VDb250ZXh0Py5sb3NlQ29udGV4dCgpO1xuICAgIHRoaXMuX2NvbnRleHRMb3NzRm9yY2VkID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogVmFsaWRhdGUgY29udGV4dC5cbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIC0gUmVuZGVyIGNvbnRleHQuXG4gICAqL1xuICB2YWxpZGF0ZUNvbnRleHQoZ2wpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2wuZ2V0Q29udGV4dEF0dHJpYnV0ZXMoKTtcbiAgICBpZiAoYXR0cmlidXRlcyAmJiAhYXR0cmlidXRlcy5zdGVuY2lsKSB7XG4gICAgICB3YXJuKFwiUHJvdmlkZWQgV2ViR0wgY29udGV4dCBkb2VzIG5vdCBoYXZlIGEgc3RlbmNpbCBidWZmZXIsIG1hc2tzIG1heSBub3QgcmVuZGVyIGNvcnJlY3RseVwiKTtcbiAgICB9XG4gICAgY29uc3Qgc3VwcG9ydHMgPSB0aGlzLnN1cHBvcnRzO1xuICAgIGNvbnN0IGlzV2ViR2wyID0gdGhpcy53ZWJHTFZlcnNpb24gPT09IDI7XG4gICAgY29uc3QgZXh0ZW5zaW9ucyA9IHRoaXMuZXh0ZW5zaW9ucztcbiAgICBzdXBwb3J0cy51aW50MzJJbmRpY2VzID0gaXNXZWJHbDIgfHwgISFleHRlbnNpb25zLnVpbnQzMkVsZW1lbnRJbmRleDtcbiAgICBzdXBwb3J0cy51bmlmb3JtQnVmZmVyT2JqZWN0ID0gaXNXZWJHbDI7XG4gICAgc3VwcG9ydHMudmVydGV4QXJyYXlPYmplY3QgPSBpc1dlYkdsMiB8fCAhIWV4dGVuc2lvbnMudmVydGV4QXJyYXlPYmplY3Q7XG4gICAgc3VwcG9ydHMuc3JnYlRleHR1cmVzID0gaXNXZWJHbDIgfHwgISFleHRlbnNpb25zLnNyZ2I7XG4gICAgc3VwcG9ydHMubm9uUG93T2Yyd3JhcHBpbmcgPSBpc1dlYkdsMjtcbiAgICBzdXBwb3J0cy5ub25Qb3dPZjJtaXBtYXBzID0gaXNXZWJHbDI7XG4gICAgc3VwcG9ydHMubXNhYSA9IGlzV2ViR2wyO1xuICAgIGlmICghc3VwcG9ydHMudWludDMySW5kaWNlcykge1xuICAgICAgd2FybihcIlByb3ZpZGVkIFdlYkdMIGNvbnRleHQgZG9lcyBub3Qgc3VwcG9ydCAzMiBpbmRleCBidWZmZXIsIGxhcmdlIHNjZW5lcyBtYXkgbm90IHJlbmRlciBjb3JyZWN0bHlcIik7XG4gICAgfVxuICB9XG59O1xuLyoqIEBpZ25vcmUgKi9cbl9HbENvbnRleHRTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbVxuICBdLFxuICBuYW1lOiBcImNvbnRleHRcIlxufTtcbi8qKiBUaGUgZGVmYXVsdCBvcHRpb25zIGZvciB0aGUgc3lzdGVtLiAqL1xuX0dsQ29udGV4dFN5c3RlbS5kZWZhdWx0T3B0aW9ucyA9IHtcbiAgLyoqXG4gICAqIHtAbGluayBXZWJHTE9wdGlvbnMuY29udGV4dH1cbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKi9cbiAgY29udGV4dDogbnVsbCxcbiAgLyoqXG4gICAqIHtAbGluayBXZWJHTE9wdGlvbnMucHJlbXVsdGlwbGllZEFscGhhfVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBwcmVtdWx0aXBsaWVkQWxwaGE6IHRydWUsXG4gIC8qKlxuICAgKiB7QGxpbmsgV2ViR0xPcHRpb25zLnByZXNlcnZlRHJhd2luZ0J1ZmZlcn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHByZXNlcnZlRHJhd2luZ0J1ZmZlcjogZmFsc2UsXG4gIC8qKlxuICAgKiB7QGxpbmsgV2ViR0xPcHRpb25zLnBvd2VyUHJlZmVyZW5jZX1cbiAgICogQGRlZmF1bHQgZGVmYXVsdFxuICAgKi9cbiAgcG93ZXJQcmVmZXJlbmNlOiB2b2lkIDAsXG4gIC8qKlxuICAgKiB7QGxpbmsgV2ViR0xPcHRpb25zLndlYkdMVmVyc2lvbn1cbiAgICogQGRlZmF1bHQgMlxuICAgKi9cbiAgcHJlZmVyV2ViR0xWZXJzaW9uOiAyLFxuICAvKipcbiAgICoge0BsaW5rIFdlYkdMT3B0aW9ucy5tdWx0aVZpZXd9XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aVZpZXc6IGZhbHNlXG59O1xubGV0IEdsQ29udGV4dFN5c3RlbSA9IF9HbENvbnRleHRTeXN0ZW07XG5cbmV4cG9ydCB7IEdsQ29udGV4dFN5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xDb250ZXh0U3lzdGVtLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIEdMX0ZPUk1BVFMgPSAvKiBAX19QVVJFX18gKi8gKChHTF9GT1JNQVRTMikgPT4ge1xuICBHTF9GT1JNQVRTMltHTF9GT1JNQVRTMltcIlJHQkFcIl0gPSA2NDA4XSA9IFwiUkdCQVwiO1xuICBHTF9GT1JNQVRTMltHTF9GT1JNQVRTMltcIlJHQlwiXSA9IDY0MDddID0gXCJSR0JcIjtcbiAgR0xfRk9STUFUUzJbR0xfRk9STUFUUzJbXCJSR1wiXSA9IDMzMzE5XSA9IFwiUkdcIjtcbiAgR0xfRk9STUFUUzJbR0xfRk9STUFUUzJbXCJSRURcIl0gPSA2NDAzXSA9IFwiUkVEXCI7XG4gIEdMX0ZPUk1BVFMyW0dMX0ZPUk1BVFMyW1wiUkdCQV9JTlRFR0VSXCJdID0gMzYyNDldID0gXCJSR0JBX0lOVEVHRVJcIjtcbiAgR0xfRk9STUFUUzJbR0xfRk9STUFUUzJbXCJSR0JfSU5URUdFUlwiXSA9IDM2MjQ4XSA9IFwiUkdCX0lOVEVHRVJcIjtcbiAgR0xfRk9STUFUUzJbR0xfRk9STUFUUzJbXCJSR19JTlRFR0VSXCJdID0gMzMzMjBdID0gXCJSR19JTlRFR0VSXCI7XG4gIEdMX0ZPUk1BVFMyW0dMX0ZPUk1BVFMyW1wiUkVEX0lOVEVHRVJcIl0gPSAzNjI0NF0gPSBcIlJFRF9JTlRFR0VSXCI7XG4gIEdMX0ZPUk1BVFMyW0dMX0ZPUk1BVFMyW1wiQUxQSEFcIl0gPSA2NDA2XSA9IFwiQUxQSEFcIjtcbiAgR0xfRk9STUFUUzJbR0xfRk9STUFUUzJbXCJMVU1JTkFOQ0VcIl0gPSA2NDA5XSA9IFwiTFVNSU5BTkNFXCI7XG4gIEdMX0ZPUk1BVFMyW0dMX0ZPUk1BVFMyW1wiTFVNSU5BTkNFX0FMUEhBXCJdID0gNjQxMF0gPSBcIkxVTUlOQU5DRV9BTFBIQVwiO1xuICBHTF9GT1JNQVRTMltHTF9GT1JNQVRTMltcIkRFUFRIX0NPTVBPTkVOVFwiXSA9IDY0MDJdID0gXCJERVBUSF9DT01QT05FTlRcIjtcbiAgR0xfRk9STUFUUzJbR0xfRk9STUFUUzJbXCJERVBUSF9TVEVOQ0lMXCJdID0gMzQwNDFdID0gXCJERVBUSF9TVEVOQ0lMXCI7XG4gIHJldHVybiBHTF9GT1JNQVRTMjtcbn0pKEdMX0ZPUk1BVFMgfHwge30pO1xudmFyIEdMX1RBUkdFVFMgPSAvKiBAX19QVVJFX18gKi8gKChHTF9UQVJHRVRTMikgPT4ge1xuICBHTF9UQVJHRVRTMltHTF9UQVJHRVRTMltcIlRFWFRVUkVfMkRcIl0gPSAzNTUzXSA9IFwiVEVYVFVSRV8yRFwiO1xuICBHTF9UQVJHRVRTMltHTF9UQVJHRVRTMltcIlRFWFRVUkVfQ1VCRV9NQVBcIl0gPSAzNDA2N10gPSBcIlRFWFRVUkVfQ1VCRV9NQVBcIjtcbiAgR0xfVEFSR0VUUzJbR0xfVEFSR0VUUzJbXCJURVhUVVJFXzJEX0FSUkFZXCJdID0gMzU4NjZdID0gXCJURVhUVVJFXzJEX0FSUkFZXCI7XG4gIEdMX1RBUkdFVFMyW0dMX1RBUkdFVFMyW1wiVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YXCJdID0gMzQwNjldID0gXCJURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1hcIjtcbiAgR0xfVEFSR0VUUzJbR0xfVEFSR0VUUzJbXCJURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1hcIl0gPSAzNDA3MF0gPSBcIlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWFwiO1xuICBHTF9UQVJHRVRTMltHTF9UQVJHRVRTMltcIlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWVwiXSA9IDM0MDcxXSA9IFwiVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9ZXCI7XG4gIEdMX1RBUkdFVFMyW0dMX1RBUkdFVFMyW1wiVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9ZXCJdID0gMzQwNzJdID0gXCJURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1lcIjtcbiAgR0xfVEFSR0VUUzJbR0xfVEFSR0VUUzJbXCJURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1pcIl0gPSAzNDA3M10gPSBcIlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWlwiO1xuICBHTF9UQVJHRVRTMltHTF9UQVJHRVRTMltcIlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWlwiXSA9IDM0MDc0XSA9IFwiVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9aXCI7XG4gIHJldHVybiBHTF9UQVJHRVRTMjtcbn0pKEdMX1RBUkdFVFMgfHwge30pO1xudmFyIEdMX1dSQVBfTU9ERVMgPSAvKiBAX19QVVJFX18gKi8gKChHTF9XUkFQX01PREVTMikgPT4ge1xuICBHTF9XUkFQX01PREVTMltHTF9XUkFQX01PREVTMltcIkNMQU1QXCJdID0gMzMwNzFdID0gXCJDTEFNUFwiO1xuICBHTF9XUkFQX01PREVTMltHTF9XUkFQX01PREVTMltcIlJFUEVBVFwiXSA9IDEwNDk3XSA9IFwiUkVQRUFUXCI7XG4gIEdMX1dSQVBfTU9ERVMyW0dMX1dSQVBfTU9ERVMyW1wiTUlSUk9SRURfUkVQRUFUXCJdID0gMzM2NDhdID0gXCJNSVJST1JFRF9SRVBFQVRcIjtcbiAgcmV0dXJuIEdMX1dSQVBfTU9ERVMyO1xufSkoR0xfV1JBUF9NT0RFUyB8fCB7fSk7XG52YXIgR0xfVFlQRVMgPSAvKiBAX19QVVJFX18gKi8gKChHTF9UWVBFUzIpID0+IHtcbiAgR0xfVFlQRVMyW0dMX1RZUEVTMltcIlVOU0lHTkVEX0JZVEVcIl0gPSA1MTIxXSA9IFwiVU5TSUdORURfQllURVwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfU0hPUlRcIl0gPSA1MTIzXSA9IFwiVU5TSUdORURfU0hPUlRcIjtcbiAgR0xfVFlQRVMyW0dMX1RZUEVTMltcIlVOU0lHTkVEX1NIT1JUXzVfNl81XCJdID0gMzM2MzVdID0gXCJVTlNJR05FRF9TSE9SVF81XzZfNVwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfU0hPUlRfNF80XzRfNFwiXSA9IDMyODE5XSA9IFwiVU5TSUdORURfU0hPUlRfNF80XzRfNFwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfU0hPUlRfNV81XzVfMVwiXSA9IDMyODIwXSA9IFwiVU5TSUdORURfU0hPUlRfNV81XzVfMVwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfSU5UXCJdID0gNTEyNV0gPSBcIlVOU0lHTkVEX0lOVFwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfSU5UXzEwRl8xMUZfMTFGX1JFVlwiXSA9IDM1ODk5XSA9IFwiVU5TSUdORURfSU5UXzEwRl8xMUZfMTFGX1JFVlwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfSU5UXzJfMTBfMTBfMTBfUkVWXCJdID0gMzM2NDBdID0gXCJVTlNJR05FRF9JTlRfMl8xMF8xMF8xMF9SRVZcIjtcbiAgR0xfVFlQRVMyW0dMX1RZUEVTMltcIlVOU0lHTkVEX0lOVF8yNF84XCJdID0gMzQwNDJdID0gXCJVTlNJR05FRF9JTlRfMjRfOFwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfSU5UXzVfOV85XzlfUkVWXCJdID0gMzU5MDJdID0gXCJVTlNJR05FRF9JTlRfNV85XzlfOV9SRVZcIjtcbiAgR0xfVFlQRVMyW0dMX1RZUEVTMltcIkJZVEVcIl0gPSA1MTIwXSA9IFwiQllURVwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiU0hPUlRcIl0gPSA1MTIyXSA9IFwiU0hPUlRcIjtcbiAgR0xfVFlQRVMyW0dMX1RZUEVTMltcIklOVFwiXSA9IDUxMjRdID0gXCJJTlRcIjtcbiAgR0xfVFlQRVMyW0dMX1RZUEVTMltcIkZMT0FUXCJdID0gNTEyNl0gPSBcIkZMT0FUXCI7XG4gIEdMX1RZUEVTMltHTF9UWVBFUzJbXCJGTE9BVF8zMl9VTlNJR05FRF9JTlRfMjRfOF9SRVZcIl0gPSAzNjI2OV0gPSBcIkZMT0FUXzMyX1VOU0lHTkVEX0lOVF8yNF84X1JFVlwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiSEFMRl9GTE9BVFwiXSA9IDM2MTkzXSA9IFwiSEFMRl9GTE9BVFwiO1xuICByZXR1cm4gR0xfVFlQRVMyO1xufSkoR0xfVFlQRVMgfHwge30pO1xuXG5leHBvcnQgeyBHTF9GT1JNQVRTLCBHTF9UQVJHRVRTLCBHTF9UWVBFUywgR0xfV1JBUF9NT0RFUyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3QubWpzLm1hcFxuIiwiaW1wb3J0IHsgR0xfVFlQRVMgfSBmcm9tICcuLi8uLi90ZXh0dXJlL2NvbnN0Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY29uc3QgaW5mb01hcCA9IHtcbiAgdWludDh4MjogR0xfVFlQRVMuVU5TSUdORURfQllURSxcbiAgdWludDh4NDogR0xfVFlQRVMuVU5TSUdORURfQllURSxcbiAgc2ludDh4MjogR0xfVFlQRVMuQllURSxcbiAgc2ludDh4NDogR0xfVFlQRVMuQllURSxcbiAgdW5vcm04eDI6IEdMX1RZUEVTLlVOU0lHTkVEX0JZVEUsXG4gIHVub3JtOHg0OiBHTF9UWVBFUy5VTlNJR05FRF9CWVRFLFxuICBzbm9ybTh4MjogR0xfVFlQRVMuQllURSxcbiAgc25vcm04eDQ6IEdMX1RZUEVTLkJZVEUsXG4gIHVpbnQxNngyOiBHTF9UWVBFUy5VTlNJR05FRF9TSE9SVCxcbiAgdWludDE2eDQ6IEdMX1RZUEVTLlVOU0lHTkVEX1NIT1JULFxuICBzaW50MTZ4MjogR0xfVFlQRVMuU0hPUlQsXG4gIHNpbnQxNng0OiBHTF9UWVBFUy5TSE9SVCxcbiAgdW5vcm0xNngyOiBHTF9UWVBFUy5VTlNJR05FRF9TSE9SVCxcbiAgdW5vcm0xNng0OiBHTF9UWVBFUy5VTlNJR05FRF9TSE9SVCxcbiAgc25vcm0xNngyOiBHTF9UWVBFUy5TSE9SVCxcbiAgc25vcm0xNng0OiBHTF9UWVBFUy5TSE9SVCxcbiAgZmxvYXQxNngyOiBHTF9UWVBFUy5IQUxGX0ZMT0FULFxuICBmbG9hdDE2eDQ6IEdMX1RZUEVTLkhBTEZfRkxPQVQsXG4gIGZsb2F0MzI6IEdMX1RZUEVTLkZMT0FULFxuICBmbG9hdDMyeDI6IEdMX1RZUEVTLkZMT0FULFxuICBmbG9hdDMyeDM6IEdMX1RZUEVTLkZMT0FULFxuICBmbG9hdDMyeDQ6IEdMX1RZUEVTLkZMT0FULFxuICB1aW50MzI6IEdMX1RZUEVTLlVOU0lHTkVEX0lOVCxcbiAgdWludDMyeDI6IEdMX1RZUEVTLlVOU0lHTkVEX0lOVCxcbiAgdWludDMyeDM6IEdMX1RZUEVTLlVOU0lHTkVEX0lOVCxcbiAgdWludDMyeDQ6IEdMX1RZUEVTLlVOU0lHTkVEX0lOVCxcbiAgc2ludDMyOiBHTF9UWVBFUy5JTlQsXG4gIHNpbnQzMngyOiBHTF9UWVBFUy5JTlQsXG4gIHNpbnQzMngzOiBHTF9UWVBFUy5JTlQsXG4gIHNpbnQzMng0OiBHTF9UWVBFUy5JTlRcbn07XG5mdW5jdGlvbiBnZXRHbFR5cGVGcm9tRm9ybWF0KGZvcm1hdCkge1xuICByZXR1cm4gaW5mb01hcFtmb3JtYXRdID8/IGluZm9NYXAuZmxvYXQzMjtcbn1cblxuZXhwb3J0IHsgZ2V0R2xUeXBlRnJvbUZvcm1hdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0R2xUeXBlRnJvbUZvcm1hdC5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBnZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdCB9IGZyb20gJy4uLy4uL3NoYXJlZC9nZW9tZXRyeS91dGlscy9nZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdC5tanMnO1xuaW1wb3J0IHsgZW5zdXJlQXR0cmlidXRlcyB9IGZyb20gJy4uL3NoYWRlci9wcm9ncmFtL2Vuc3VyZUF0dHJpYnV0ZXMubWpzJztcbmltcG9ydCB7IGdldEdsVHlwZUZyb21Gb3JtYXQgfSBmcm9tICcuL3V0aWxzL2dldEdsVHlwZUZyb21Gb3JtYXQubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB0b3BvbG9neVRvR2xNYXAgPSB7XG4gIFwicG9pbnQtbGlzdFwiOiAwLFxuICBcImxpbmUtbGlzdFwiOiAxLFxuICBcImxpbmUtc3RyaXBcIjogMyxcbiAgXCJ0cmlhbmdsZS1saXN0XCI6IDQsXG4gIFwidHJpYW5nbGUtc3RyaXBcIjogNVxufTtcbmNsYXNzIEdsR2VvbWV0cnlTeXN0ZW0ge1xuICAvKiogQHBhcmFtIHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyIHRoaXMgU3lzdGVtIHdvcmtzIGZvci4gKi9cbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9nZW9tZXRyeVZhb0hhc2ggPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuX2FjdGl2ZUdlb21ldHJ5ID0gbnVsbDtcbiAgICB0aGlzLl9hY3RpdmVWYW8gPSBudWxsO1xuICAgIHRoaXMuaGFzVmFvID0gdHJ1ZTtcbiAgICB0aGlzLmhhc0luc3RhbmNlID0gdHJ1ZTtcbiAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXJhYmxlR0MuYWRkTWFuYWdlZEhhc2godGhpcywgXCJfZ2VvbWV0cnlWYW9IYXNoXCIpO1xuICB9XG4gIC8qKiBTZXRzIHVwIHRoZSByZW5kZXJlciBjb250ZXh0IGFuZCBuZWNlc3NhcnkgYnVmZmVycy4gKi9cbiAgY29udGV4dENoYW5nZSgpIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuZ2wgPSB0aGlzLl9yZW5kZXJlci5nbDtcbiAgICBpZiAoIXRoaXMuX3JlbmRlcmVyLmNvbnRleHQuc3VwcG9ydHMudmVydGV4QXJyYXlPYmplY3QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIltQaXhpSlNdIFZlcnRleCBBcnJheSBPYmplY3RzIGFyZSBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgZGV2aWNlXCIpO1xuICAgIH1cbiAgICBjb25zdCBuYXRpdmVWYW9FeHRlbnNpb24gPSB0aGlzLl9yZW5kZXJlci5jb250ZXh0LmV4dGVuc2lvbnMudmVydGV4QXJyYXlPYmplY3Q7XG4gICAgaWYgKG5hdGl2ZVZhb0V4dGVuc2lvbikge1xuICAgICAgZ2wuY3JlYXRlVmVydGV4QXJyYXkgPSAoKSA9PiBuYXRpdmVWYW9FeHRlbnNpb24uY3JlYXRlVmVydGV4QXJyYXlPRVMoKTtcbiAgICAgIGdsLmJpbmRWZXJ0ZXhBcnJheSA9ICh2YW8pID0+IG5hdGl2ZVZhb0V4dGVuc2lvbi5iaW5kVmVydGV4QXJyYXlPRVModmFvKTtcbiAgICAgIGdsLmRlbGV0ZVZlcnRleEFycmF5ID0gKHZhbykgPT4gbmF0aXZlVmFvRXh0ZW5zaW9uLmRlbGV0ZVZlcnRleEFycmF5T0VTKHZhbyk7XG4gICAgfVxuICAgIGNvbnN0IG5hdGl2ZUluc3RhbmNlZEV4dGVuc2lvbiA9IHRoaXMuX3JlbmRlcmVyLmNvbnRleHQuZXh0ZW5zaW9ucy52ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEU7XG4gICAgaWYgKG5hdGl2ZUluc3RhbmNlZEV4dGVuc2lvbikge1xuICAgICAgZ2wuZHJhd0FycmF5c0luc3RhbmNlZCA9IChhLCBiLCBjLCBkKSA9PiB7XG4gICAgICAgIG5hdGl2ZUluc3RhbmNlZEV4dGVuc2lvbi5kcmF3QXJyYXlzSW5zdGFuY2VkQU5HTEUoYSwgYiwgYywgZCk7XG4gICAgICB9O1xuICAgICAgZ2wuZHJhd0VsZW1lbnRzSW5zdGFuY2VkID0gKGEsIGIsIGMsIGQsIGUpID0+IHtcbiAgICAgICAgbmF0aXZlSW5zdGFuY2VkRXh0ZW5zaW9uLmRyYXdFbGVtZW50c0luc3RhbmNlZEFOR0xFKGEsIGIsIGMsIGQsIGUpO1xuICAgICAgfTtcbiAgICAgIGdsLnZlcnRleEF0dHJpYkRpdmlzb3IgPSAoYSwgYikgPT4gbmF0aXZlSW5zdGFuY2VkRXh0ZW5zaW9uLnZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRShhLCBiKTtcbiAgICB9XG4gICAgdGhpcy5fYWN0aXZlR2VvbWV0cnkgPSBudWxsO1xuICAgIHRoaXMuX2FjdGl2ZVZhbyA9IG51bGw7XG4gICAgdGhpcy5fZ2VvbWV0cnlWYW9IYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cbiAgLyoqXG4gICAqIEJpbmRzIGdlb21ldHJ5IHNvIHRoYXQgaXMgY2FuIGJlIGRyYXduLiBDcmVhdGluZyBhIFZhbyBpZiByZXF1aXJlZFxuICAgKiBAcGFyYW0gZ2VvbWV0cnkgLSBJbnN0YW5jZSBvZiBnZW9tZXRyeSB0byBiaW5kLlxuICAgKiBAcGFyYW0gcHJvZ3JhbSAtIEluc3RhbmNlIG9mIHByb2dyYW0gdG8gdXNlIHZhbyBmb3IuXG4gICAqL1xuICBiaW5kKGdlb21ldHJ5LCBwcm9ncmFtKSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgIHRoaXMuX2FjdGl2ZUdlb21ldHJ5ID0gZ2VvbWV0cnk7XG4gICAgY29uc3QgdmFvID0gdGhpcy5nZXRWYW8oZ2VvbWV0cnksIHByb2dyYW0pO1xuICAgIGlmICh0aGlzLl9hY3RpdmVWYW8gIT09IHZhbykge1xuICAgICAgdGhpcy5fYWN0aXZlVmFvID0gdmFvO1xuICAgICAgZ2wuYmluZFZlcnRleEFycmF5KHZhbyk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlQnVmZmVycygpO1xuICB9XG4gIC8qKiBSZXNldCBhbmQgdW5iaW5kIGFueSBhY3RpdmUgVkFPIGFuZCBnZW9tZXRyeS4gKi9cbiAgcmVzZXRTdGF0ZSgpIHtcbiAgICB0aGlzLnVuYmluZCgpO1xuICB9XG4gIC8qKiBVcGRhdGUgYnVmZmVycyBvZiB0aGUgY3VycmVudGx5IGJvdW5kIGdlb21ldHJ5LiAqL1xuICB1cGRhdGVCdWZmZXJzKCkge1xuICAgIGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5fYWN0aXZlR2VvbWV0cnk7XG4gICAgY29uc3QgYnVmZmVyU3lzdGVtID0gdGhpcy5fcmVuZGVyZXIuYnVmZmVyO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ2VvbWV0cnkuYnVmZmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYnVmZmVyID0gZ2VvbWV0cnkuYnVmZmVyc1tpXTtcbiAgICAgIGJ1ZmZlclN5c3RlbS51cGRhdGVCdWZmZXIoYnVmZmVyKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGNvbXBhdGliaWxpdHkgYmV0d2VlbiBhIGdlb21ldHJ5IGFuZCBhIHByb2dyYW1cbiAgICogQHBhcmFtIGdlb21ldHJ5IC0gR2VvbWV0cnkgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSBwcm9ncmFtIC0gUHJvZ3JhbSBpbnN0YW5jZS5cbiAgICovXG4gIGNoZWNrQ29tcGF0aWJpbGl0eShnZW9tZXRyeSwgcHJvZ3JhbSkge1xuICAgIGNvbnN0IGdlb21ldHJ5QXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG4gICAgY29uc3Qgc2hhZGVyQXR0cmlidXRlcyA9IHByb2dyYW0uX2F0dHJpYnV0ZURhdGE7XG4gICAgZm9yIChjb25zdCBqIGluIHNoYWRlckF0dHJpYnV0ZXMpIHtcbiAgICAgIGlmICghZ2VvbWV0cnlBdHRyaWJ1dGVzW2pdKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgc2hhZGVyIGFuZCBnZW9tZXRyeSBpbmNvbXBhdGlibGUsIGdlb21ldHJ5IG1pc3NpbmcgdGhlIFwiJHtqfVwiIGF0dHJpYnV0ZWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogVGFrZXMgYSBnZW9tZXRyeSBhbmQgcHJvZ3JhbSBhbmQgZ2VuZXJhdGVzIGEgdW5pcXVlIHNpZ25hdHVyZSBmb3IgdGhlbS5cbiAgICogQHBhcmFtIGdlb21ldHJ5IC0gVG8gZ2V0IHNpZ25hdHVyZSBmcm9tLlxuICAgKiBAcGFyYW0gcHJvZ3JhbSAtIFRvIHRlc3QgZ2VvbWV0cnkgYWdhaW5zdC5cbiAgICogQHJldHVybnMgLSBVbmlxdWUgc2lnbmF0dXJlIG9mIHRoZSBnZW9tZXRyeSBhbmQgcHJvZ3JhbVxuICAgKi9cbiAgZ2V0U2lnbmF0dXJlKGdlb21ldHJ5LCBwcm9ncmFtKSB7XG4gICAgY29uc3QgYXR0cmlicyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG4gICAgY29uc3Qgc2hhZGVyQXR0cmlidXRlcyA9IHByb2dyYW0uX2F0dHJpYnV0ZURhdGE7XG4gICAgY29uc3Qgc3RyaW5ncyA9IFtcImdcIiwgZ2VvbWV0cnkudWlkXTtcbiAgICBmb3IgKGNvbnN0IGkgaW4gYXR0cmlicykge1xuICAgICAgaWYgKHNoYWRlckF0dHJpYnV0ZXNbaV0pIHtcbiAgICAgICAgc3RyaW5ncy5wdXNoKGksIHNoYWRlckF0dHJpYnV0ZXNbaV0ubG9jYXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyaW5ncy5qb2luKFwiLVwiKTtcbiAgfVxuICBnZXRWYW8oZ2VvbWV0cnksIHByb2dyYW0pIHtcbiAgICByZXR1cm4gdGhpcy5fZ2VvbWV0cnlWYW9IYXNoW2dlb21ldHJ5LnVpZF0/Lltwcm9ncmFtLl9rZXldIHx8IHRoaXMuaW5pdEdlb21ldHJ5VmFvKGdlb21ldHJ5LCBwcm9ncmFtKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBvciBnZXRzIFZhbyB3aXRoIHRoZSBzYW1lIHN0cnVjdHVyZSBhcyB0aGUgZ2VvbWV0cnkgYW5kIHN0b3JlcyBpdCBvbiB0aGUgZ2VvbWV0cnkuXG4gICAqIElmIHZhbyBpcyBjcmVhdGVkLCBpdCBpcyBib3VuZCBhdXRvbWF0aWNhbGx5LiBXZSB1c2UgYSBzaGFkZXIgdG8gaW5mZXIgd2hhdCBhbmQgaG93IHRvIHNldCB1cCB0aGVcbiAgICogYXR0cmlidXRlIGxvY2F0aW9ucy5cbiAgICogQHBhcmFtIGdlb21ldHJ5IC0gSW5zdGFuY2Ugb2YgZ2VvbWV0cnkgdG8gdG8gZ2VuZXJhdGUgVmFvIGZvci5cbiAgICogQHBhcmFtIHByb2dyYW1cbiAgICogQHBhcmFtIF9pbmNSZWZDb3VudCAtIEluY3JlbWVudCByZWZDb3VudCBvZiBhbGwgZ2VvbWV0cnkgYnVmZmVycy5cbiAgICovXG4gIGluaXRHZW9tZXRyeVZhbyhnZW9tZXRyeSwgcHJvZ3JhbSwgX2luY1JlZkNvdW50ID0gdHJ1ZSkge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fcmVuZGVyZXIuZ2w7XG4gICAgY29uc3QgYnVmZmVyU3lzdGVtID0gdGhpcy5fcmVuZGVyZXIuYnVmZmVyO1xuICAgIHRoaXMuX3JlbmRlcmVyLnNoYWRlci5fZ2V0UHJvZ3JhbURhdGEocHJvZ3JhbSk7XG4gICAgdGhpcy5jaGVja0NvbXBhdGliaWxpdHkoZ2VvbWV0cnksIHByb2dyYW0pO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IHRoaXMuZ2V0U2lnbmF0dXJlKGdlb21ldHJ5LCBwcm9ncmFtKTtcbiAgICBpZiAoIXRoaXMuX2dlb21ldHJ5VmFvSGFzaFtnZW9tZXRyeS51aWRdKSB7XG4gICAgICB0aGlzLl9nZW9tZXRyeVZhb0hhc2hbZ2VvbWV0cnkudWlkXSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgZ2VvbWV0cnkub24oXCJkZXN0cm95XCIsIHRoaXMub25HZW9tZXRyeURlc3Ryb3ksIHRoaXMpO1xuICAgIH1cbiAgICBjb25zdCB2YW9PYmplY3RIYXNoID0gdGhpcy5fZ2VvbWV0cnlWYW9IYXNoW2dlb21ldHJ5LnVpZF07XG4gICAgbGV0IHZhbyA9IHZhb09iamVjdEhhc2hbc2lnbmF0dXJlXTtcbiAgICBpZiAodmFvKSB7XG4gICAgICB2YW9PYmplY3RIYXNoW3Byb2dyYW0uX2tleV0gPSB2YW87XG4gICAgICByZXR1cm4gdmFvO1xuICAgIH1cbiAgICBlbnN1cmVBdHRyaWJ1dGVzKGdlb21ldHJ5LCBwcm9ncmFtLl9hdHRyaWJ1dGVEYXRhKTtcbiAgICBjb25zdCBidWZmZXJzID0gZ2VvbWV0cnkuYnVmZmVycztcbiAgICB2YW8gPSBnbC5jcmVhdGVWZXJ0ZXhBcnJheSgpO1xuICAgIGdsLmJpbmRWZXJ0ZXhBcnJheSh2YW8pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYnVmZmVyID0gYnVmZmVyc1tpXTtcbiAgICAgIGJ1ZmZlclN5c3RlbS5iaW5kKGJ1ZmZlcik7XG4gICAgfVxuICAgIHRoaXMuYWN0aXZhdGVWYW8oZ2VvbWV0cnksIHByb2dyYW0pO1xuICAgIHZhb09iamVjdEhhc2hbcHJvZ3JhbS5fa2V5XSA9IHZhbztcbiAgICB2YW9PYmplY3RIYXNoW3NpZ25hdHVyZV0gPSB2YW87XG4gICAgZ2wuYmluZFZlcnRleEFycmF5KG51bGwpO1xuICAgIHJldHVybiB2YW87XG4gIH1cbiAgLyoqXG4gICAqIERpc3Bvc2VzIGdlb21ldHJ5LlxuICAgKiBAcGFyYW0gZ2VvbWV0cnkgLSBHZW9tZXRyeSB3aXRoIGJ1ZmZlcnMuIE9ubHkgVkFPIHdpbGwgYmUgZGlzcG9zZWRcbiAgICogQHBhcmFtIFtjb250ZXh0TG9zdD1mYWxzZV0gLSBJZiBjb250ZXh0IHdhcyBsb3N0LCB3ZSBzdXBwcmVzcyBkZWxldGVWZXJ0ZXhBcnJheVxuICAgKi9cbiAgb25HZW9tZXRyeURlc3Ryb3koZ2VvbWV0cnksIGNvbnRleHRMb3N0KSB7XG4gICAgY29uc3QgdmFvT2JqZWN0SGFzaCA9IHRoaXMuX2dlb21ldHJ5VmFvSGFzaFtnZW9tZXRyeS51aWRdO1xuICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICBpZiAodmFvT2JqZWN0SGFzaCkge1xuICAgICAgaWYgKGNvbnRleHRMb3N0KSB7XG4gICAgICAgIGZvciAoY29uc3QgaSBpbiB2YW9PYmplY3RIYXNoKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVZhbyAhPT0gdmFvT2JqZWN0SGFzaFtpXSkge1xuICAgICAgICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZ2wuZGVsZXRlVmVydGV4QXJyYXkodmFvT2JqZWN0SGFzaFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX2dlb21ldHJ5VmFvSGFzaFtnZW9tZXRyeS51aWRdID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERpc3Bvc2UgYWxsIFdlYkdMIHJlc291cmNlcyBvZiBhbGwgbWFuYWdlZCBnZW9tZXRyaWVzLlxuICAgKiBAcGFyYW0gW2NvbnRleHRMb3N0PWZhbHNlXSAtIElmIGNvbnRleHQgd2FzIGxvc3QsIHdlIHN1cHByZXNzIGBnbC5kZWxldGVgIGNhbGxzXG4gICAqL1xuICBkZXN0cm95QWxsKGNvbnRleHRMb3N0ID0gZmFsc2UpIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgZm9yIChjb25zdCBpIGluIHRoaXMuX2dlb21ldHJ5VmFvSGFzaCkge1xuICAgICAgaWYgKGNvbnRleHRMb3N0KSB7XG4gICAgICAgIGZvciAoY29uc3QgaiBpbiB0aGlzLl9nZW9tZXRyeVZhb0hhc2hbaV0pIHtcbiAgICAgICAgICBjb25zdCB2YW9PYmplY3RIYXNoID0gdGhpcy5fZ2VvbWV0cnlWYW9IYXNoW2ldO1xuICAgICAgICAgIGlmICh0aGlzLl9hY3RpdmVWYW8gIT09IHZhb09iamVjdEhhc2gpIHtcbiAgICAgICAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGdsLmRlbGV0ZVZlcnRleEFycmF5KHZhb09iamVjdEhhc2hbal0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9nZW9tZXRyeVZhb0hhc2hbaV0gPSBudWxsO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQWN0aXZhdGUgdmVydGV4IGFycmF5IG9iamVjdC5cbiAgICogQHBhcmFtIGdlb21ldHJ5IC0gR2VvbWV0cnkgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSBwcm9ncmFtIC0gU2hhZGVyIHByb2dyYW0gaW5zdGFuY2UuXG4gICAqL1xuICBhY3RpdmF0ZVZhbyhnZW9tZXRyeSwgcHJvZ3JhbSkge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fcmVuZGVyZXIuZ2w7XG4gICAgY29uc3QgYnVmZmVyU3lzdGVtID0gdGhpcy5fcmVuZGVyZXIuYnVmZmVyO1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuICAgIGlmIChnZW9tZXRyeS5pbmRleEJ1ZmZlcikge1xuICAgICAgYnVmZmVyU3lzdGVtLmJpbmQoZ2VvbWV0cnkuaW5kZXhCdWZmZXIpO1xuICAgIH1cbiAgICBsZXQgbGFzdEJ1ZmZlciA9IG51bGw7XG4gICAgZm9yIChjb25zdCBqIGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbal07XG4gICAgICBjb25zdCBidWZmZXIgPSBhdHRyaWJ1dGUuYnVmZmVyO1xuICAgICAgY29uc3QgZ2xCdWZmZXIgPSBidWZmZXJTeXN0ZW0uZ2V0R2xCdWZmZXIoYnVmZmVyKTtcbiAgICAgIGNvbnN0IHByb2dyYW1BdHRyaWIgPSBwcm9ncmFtLl9hdHRyaWJ1dGVEYXRhW2pdO1xuICAgICAgaWYgKHByb2dyYW1BdHRyaWIpIHtcbiAgICAgICAgaWYgKGxhc3RCdWZmZXIgIT09IGdsQnVmZmVyKSB7XG4gICAgICAgICAgYnVmZmVyU3lzdGVtLmJpbmQoYnVmZmVyKTtcbiAgICAgICAgICBsYXN0QnVmZmVyID0gZ2xCdWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSBwcm9ncmFtQXR0cmliLmxvY2F0aW9uO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShsb2NhdGlvbik7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZUluZm8gPSBnZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdChhdHRyaWJ1dGUuZm9ybWF0KTtcbiAgICAgICAgY29uc3QgdHlwZSA9IGdldEdsVHlwZUZyb21Gb3JtYXQoYXR0cmlidXRlLmZvcm1hdCk7XG4gICAgICAgIGlmIChwcm9ncmFtQXR0cmliLmZvcm1hdD8uc3Vic3RyaW5nKDEsIDQpID09PSBcImludFwiKSB7XG4gICAgICAgICAgZ2wudmVydGV4QXR0cmliSVBvaW50ZXIoXG4gICAgICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgICAgIGF0dHJpYnV0ZUluZm8uc2l6ZSxcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBhdHRyaWJ1dGUuc3RyaWRlLFxuICAgICAgICAgICAgYXR0cmlidXRlLm9mZnNldFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihcbiAgICAgICAgICAgIGxvY2F0aW9uLFxuICAgICAgICAgICAgYXR0cmlidXRlSW5mby5zaXplLFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGF0dHJpYnV0ZUluZm8ubm9ybWFsaXNlZCxcbiAgICAgICAgICAgIGF0dHJpYnV0ZS5zdHJpZGUsXG4gICAgICAgICAgICBhdHRyaWJ1dGUub2Zmc2V0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXR0cmlidXRlLmluc3RhbmNlKSB7XG4gICAgICAgICAgaWYgKHRoaXMuaGFzSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpdmlzb3IgPSBhdHRyaWJ1dGUuZGl2aXNvciA/PyAxO1xuICAgICAgICAgICAgZ2wudmVydGV4QXR0cmliRGl2aXNvcihsb2NhdGlvbiwgZGl2aXNvcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImdlb21ldHJ5IGVycm9yLCBHUFUgSW5zdGFuY2luZyBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgZGV2aWNlXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogRHJhd3MgdGhlIGN1cnJlbnRseSBib3VuZCBnZW9tZXRyeS5cbiAgICogQHBhcmFtIHRvcG9sb2d5IC0gVGhlIHR5cGUgcHJpbWl0aXZlIHRvIHJlbmRlci5cbiAgICogQHBhcmFtIHNpemUgLSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGJlIHJlbmRlcmVkLiBJZiBub3Qgc3BlY2lmaWVkLCBhbGwgdmVydGljZXMgYWZ0ZXIgdGhlXG4gICAqICBzdGFydGluZyB2ZXJ0ZXggd2lsbCBiZSBkcmF3bi5cbiAgICogQHBhcmFtIHN0YXJ0IC0gVGhlIHN0YXJ0aW5nIHZlcnRleCBpbiB0aGUgZ2VvbWV0cnkgdG8gc3RhcnQgZHJhd2luZyBmcm9tLiBJZiBub3Qgc3BlY2lmaWVkLFxuICAgKiAgZHJhd2luZyB3aWxsIHN0YXJ0IGZyb20gdGhlIGZpcnN0IHZlcnRleC5cbiAgICogQHBhcmFtIGluc3RhbmNlQ291bnQgLSBUaGUgbnVtYmVyIG9mIGluc3RhbmNlcyBvZiB0aGUgc2V0IG9mIGVsZW1lbnRzIHRvIGV4ZWN1dGUuIElmIG5vdCBzcGVjaWZpZWQsXG4gICAqICBhbGwgaW5zdGFuY2VzIHdpbGwgYmUgZHJhd24uXG4gICAqL1xuICBkcmF3KHRvcG9sb2d5LCBzaXplLCBzdGFydCwgaW5zdGFuY2VDb3VudCkge1xuICAgIGNvbnN0IHsgZ2wgfSA9IHRoaXMuX3JlbmRlcmVyO1xuICAgIGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5fYWN0aXZlR2VvbWV0cnk7XG4gICAgY29uc3QgZ2xUb3BvbG9neSA9IHRvcG9sb2d5VG9HbE1hcFt0b3BvbG9neSB8fCBnZW9tZXRyeS50b3BvbG9neV07XG4gICAgaW5zdGFuY2VDb3VudCA/PyAoaW5zdGFuY2VDb3VudCA9IGdlb21ldHJ5Lmluc3RhbmNlQ291bnQpO1xuICAgIGlmIChnZW9tZXRyeS5pbmRleEJ1ZmZlcikge1xuICAgICAgY29uc3QgYnl0ZVNpemUgPSBnZW9tZXRyeS5pbmRleEJ1ZmZlci5kYXRhLkJZVEVTX1BFUl9FTEVNRU5UO1xuICAgICAgY29uc3QgZ2xUeXBlID0gYnl0ZVNpemUgPT09IDIgPyBnbC5VTlNJR05FRF9TSE9SVCA6IGdsLlVOU0lHTkVEX0lOVDtcbiAgICAgIGlmIChpbnN0YW5jZUNvdW50ID4gMSkge1xuICAgICAgICBnbC5kcmF3RWxlbWVudHNJbnN0YW5jZWQoZ2xUb3BvbG9neSwgc2l6ZSB8fCBnZW9tZXRyeS5pbmRleEJ1ZmZlci5kYXRhLmxlbmd0aCwgZ2xUeXBlLCAoc3RhcnQgfHwgMCkgKiBieXRlU2l6ZSwgaW5zdGFuY2VDb3VudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnbC5kcmF3RWxlbWVudHMoZ2xUb3BvbG9neSwgc2l6ZSB8fCBnZW9tZXRyeS5pbmRleEJ1ZmZlci5kYXRhLmxlbmd0aCwgZ2xUeXBlLCAoc3RhcnQgfHwgMCkgKiBieXRlU2l6ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpbnN0YW5jZUNvdW50ID4gMSkge1xuICAgICAgZ2wuZHJhd0FycmF5c0luc3RhbmNlZChnbFRvcG9sb2d5LCBzdGFydCB8fCAwLCBzaXplIHx8IGdlb21ldHJ5LmdldFNpemUoKSwgaW5zdGFuY2VDb3VudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsLmRyYXdBcnJheXMoZ2xUb3BvbG9neSwgc3RhcnQgfHwgMCwgc2l6ZSB8fCBnZW9tZXRyeS5nZXRTaXplKCkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKiogVW5iaW5kL3Jlc2V0IGV2ZXJ5dGhpbmcuICovXG4gIHVuYmluZCgpIHtcbiAgICB0aGlzLmdsLmJpbmRWZXJ0ZXhBcnJheShudWxsKTtcbiAgICB0aGlzLl9hY3RpdmVWYW8gPSBudWxsO1xuICAgIHRoaXMuX2FjdGl2ZUdlb21ldHJ5ID0gbnVsbDtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcbiAgICB0aGlzLmdsID0gbnVsbDtcbiAgICB0aGlzLl9hY3RpdmVWYW8gPSBudWxsO1xuICAgIHRoaXMuX2FjdGl2ZUdlb21ldHJ5ID0gbnVsbDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdsR2VvbWV0cnlTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbVxuICBdLFxuICBuYW1lOiBcImdlb21ldHJ5XCJcbn07XG5cbmV4cG9ydCB7IEdsR2VvbWV0cnlTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsR2VvbWV0cnlTeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2xvZ2dpbmcvd2Fybi5tanMnO1xuaW1wb3J0IHsgR2VvbWV0cnkgfSBmcm9tICcuLi9zaGFyZWQvZ2VvbWV0cnkvR2VvbWV0cnkubWpzJztcbmltcG9ydCB7IFNoYWRlciB9IGZyb20gJy4uL3NoYXJlZC9zaGFkZXIvU2hhZGVyLm1qcyc7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4uL3NoYXJlZC9zdGF0ZS9TdGF0ZS5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZVNvdXJjZSB9IGZyb20gJy4uL3NoYXJlZC90ZXh0dXJlL3NvdXJjZXMvVGV4dHVyZVNvdXJjZS5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uL3NoYXJlZC90ZXh0dXJlL1RleHR1cmUubWpzJztcbmltcG9ydCB7IEdsUHJvZ3JhbSB9IGZyb20gJy4vc2hhZGVyL0dsUHJvZ3JhbS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IGJpZ1RyaWFuZ2xlR2VvbWV0cnkgPSBuZXcgR2VvbWV0cnkoe1xuICBhdHRyaWJ1dGVzOiB7XG4gICAgYVBvc2l0aW9uOiBbXG4gICAgICAtMSxcbiAgICAgIC0xLFxuICAgICAgLy8gQm90dG9tIGxlZnQgY29ybmVyXG4gICAgICAzLFxuICAgICAgLTEsXG4gICAgICAvLyBCb3R0b20gcmlnaHQgY29ybmVyLCBleHRlbmRpbmcgYmV5b25kIHJpZ2h0IGVkZ2VcbiAgICAgIC0xLFxuICAgICAgM1xuICAgICAgLy8gVG9wIGxlZnQgY29ybmVyLCBleHRlbmRpbmcgYmV5b25kIHRvcCBlZGdlXG4gICAgXVxuICB9XG59KTtcbmNvbnN0IF9HbEJhY2tCdWZmZXJTeXN0ZW0gPSBjbGFzcyBfR2xCYWNrQnVmZmVyU3lzdGVtIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICAvKiogaWYgdHJ1ZSwgdGhlIGJhY2sgYnVmZmVyIGlzIHVzZWQgKi9cbiAgICB0aGlzLnVzZUJhY2tCdWZmZXIgPSBmYWxzZTtcbiAgICB0aGlzLl91c2VCYWNrQnVmZmVyVGhpc1JlbmRlciA9IGZhbHNlO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gIH1cbiAgaW5pdChvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IHVzZUJhY2tCdWZmZXIsIGFudGlhbGlhcyB9ID0geyAuLi5fR2xCYWNrQnVmZmVyU3lzdGVtLmRlZmF1bHRPcHRpb25zLCAuLi5vcHRpb25zIH07XG4gICAgdGhpcy51c2VCYWNrQnVmZmVyID0gdXNlQmFja0J1ZmZlcjtcbiAgICB0aGlzLl9hbnRpYWxpYXMgPSBhbnRpYWxpYXM7XG4gICAgaWYgKCF0aGlzLl9yZW5kZXJlci5jb250ZXh0LnN1cHBvcnRzLm1zYWEpIHtcbiAgICAgIHdhcm4oXCJhbnRpYWxpYXNpbmcsIGlzIG5vdCBzdXBwb3J0ZWQgb24gd2hlbiB1c2luZyB0aGUgYmFjayBidWZmZXJcIik7XG4gICAgICB0aGlzLl9hbnRpYWxpYXMgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5fc3RhdGUgPSBTdGF0ZS5mb3IyZCgpO1xuICAgIGNvbnN0IGJpZ1RyaWFuZ2xlUHJvZ3JhbSA9IG5ldyBHbFByb2dyYW0oe1xuICAgICAgdmVydGV4OiBgXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlIHZlYzIgYVBvc2l0aW9uO1xuICAgICAgICAgICAgICAgIG91dCB2ZWMyIHZVdjtcblxuICAgICAgICAgICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2xfUG9zaXRpb24gPSB2ZWM0KGFQb3NpdGlvbiwgMC4wLCAxLjApO1xuXG4gICAgICAgICAgICAgICAgICAgIHZVdiA9IChhUG9zaXRpb24gKyAxLjApIC8gMi4wO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGZsaXAgZGVtIFVWc1xuICAgICAgICAgICAgICAgICAgICB2VXYueSA9IDEuMCAtIHZVdi55O1xuICAgICAgICAgICAgICAgIH1gLFxuICAgICAgZnJhZ21lbnQ6IGBcbiAgICAgICAgICAgICAgICBpbiB2ZWMyIHZVdjtcbiAgICAgICAgICAgICAgICBvdXQgdmVjNCBmaW5hbENvbG9yO1xuXG4gICAgICAgICAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XG5cbiAgICAgICAgICAgICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsQ29sb3IgPSB0ZXh0dXJlKHVUZXh0dXJlLCB2VXYpO1xuICAgICAgICAgICAgICAgIH1gLFxuICAgICAgbmFtZTogXCJiaWctdHJpYW5nbGVcIlxuICAgIH0pO1xuICAgIHRoaXMuX2JpZ1RyaWFuZ2xlU2hhZGVyID0gbmV3IFNoYWRlcih7XG4gICAgICBnbFByb2dyYW06IGJpZ1RyaWFuZ2xlUHJvZ3JhbSxcbiAgICAgIHJlc291cmNlczoge1xuICAgICAgICB1VGV4dHVyZTogVGV4dHVyZS5XSElURS5zb3VyY2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBpcyBjYWxsZWQgYmVmb3JlIHRoZSBSZW5kZXJUYXJnZXRTeXN0ZW0gaXMgc3RhcnRlZC4gVGhpcyBpcyB3aGVyZVxuICAgKiB3ZSByZXBsYWNlIHRoZSB0YXJnZXQgd2l0aCB0aGUgYmFjayBidWZmZXIgaWYgcmVxdWlyZWQuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoaXMgcmVuZGVyLlxuICAgKi9cbiAgcmVuZGVyU3RhcnQob3B0aW9ucykge1xuICAgIGNvbnN0IHJlbmRlclRhcmdldCA9IHRoaXMuX3JlbmRlcmVyLnJlbmRlclRhcmdldC5nZXRSZW5kZXJUYXJnZXQob3B0aW9ucy50YXJnZXQpO1xuICAgIHRoaXMuX3VzZUJhY2tCdWZmZXJUaGlzUmVuZGVyID0gdGhpcy51c2VCYWNrQnVmZmVyICYmICEhcmVuZGVyVGFyZ2V0LmlzUm9vdDtcbiAgICBpZiAodGhpcy5fdXNlQmFja0J1ZmZlclRoaXNSZW5kZXIpIHtcbiAgICAgIGNvbnN0IHJlbmRlclRhcmdldDIgPSB0aGlzLl9yZW5kZXJlci5yZW5kZXJUYXJnZXQuZ2V0UmVuZGVyVGFyZ2V0KG9wdGlvbnMudGFyZ2V0KTtcbiAgICAgIHRoaXMuX3RhcmdldFRleHR1cmUgPSByZW5kZXJUYXJnZXQyLmNvbG9yVGV4dHVyZTtcbiAgICAgIG9wdGlvbnMudGFyZ2V0ID0gdGhpcy5fZ2V0QmFja0J1ZmZlclRleHR1cmUocmVuZGVyVGFyZ2V0Mi5jb2xvclRleHR1cmUpO1xuICAgIH1cbiAgfVxuICByZW5kZXJFbmQoKSB7XG4gICAgdGhpcy5fcHJlc2VudEJhY2tCdWZmZXIoKTtcbiAgfVxuICBfcHJlc2VudEJhY2tCdWZmZXIoKSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICByZW5kZXJlci5yZW5kZXJUYXJnZXQuZmluaXNoUmVuZGVyUGFzcygpO1xuICAgIGlmICghdGhpcy5fdXNlQmFja0J1ZmZlclRoaXNSZW5kZXIpXG4gICAgICByZXR1cm47XG4gICAgcmVuZGVyZXIucmVuZGVyVGFyZ2V0LmJpbmQodGhpcy5fdGFyZ2V0VGV4dHVyZSwgZmFsc2UpO1xuICAgIHRoaXMuX2JpZ1RyaWFuZ2xlU2hhZGVyLnJlc291cmNlcy51VGV4dHVyZSA9IHRoaXMuX2JhY2tCdWZmZXJUZXh0dXJlLnNvdXJjZTtcbiAgICByZW5kZXJlci5lbmNvZGVyLmRyYXcoe1xuICAgICAgZ2VvbWV0cnk6IGJpZ1RyaWFuZ2xlR2VvbWV0cnksXG4gICAgICBzaGFkZXI6IHRoaXMuX2JpZ1RyaWFuZ2xlU2hhZGVyLFxuICAgICAgc3RhdGU6IHRoaXMuX3N0YXRlXG4gICAgfSk7XG4gIH1cbiAgX2dldEJhY2tCdWZmZXJUZXh0dXJlKHRhcmdldFNvdXJjZVRleHR1cmUpIHtcbiAgICB0aGlzLl9iYWNrQnVmZmVyVGV4dHVyZSA9IHRoaXMuX2JhY2tCdWZmZXJUZXh0dXJlIHx8IG5ldyBUZXh0dXJlKHtcbiAgICAgIHNvdXJjZTogbmV3IFRleHR1cmVTb3VyY2Uoe1xuICAgICAgICB3aWR0aDogdGFyZ2V0U291cmNlVGV4dHVyZS53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiB0YXJnZXRTb3VyY2VUZXh0dXJlLmhlaWdodCxcbiAgICAgICAgcmVzb2x1dGlvbjogdGFyZ2V0U291cmNlVGV4dHVyZS5fcmVzb2x1dGlvbixcbiAgICAgICAgYW50aWFsaWFzOiB0aGlzLl9hbnRpYWxpYXNcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgdGhpcy5fYmFja0J1ZmZlclRleHR1cmUuc291cmNlLnJlc2l6ZShcbiAgICAgIHRhcmdldFNvdXJjZVRleHR1cmUud2lkdGgsXG4gICAgICB0YXJnZXRTb3VyY2VUZXh0dXJlLmhlaWdodCxcbiAgICAgIHRhcmdldFNvdXJjZVRleHR1cmUuX3Jlc29sdXRpb25cbiAgICApO1xuICAgIHJldHVybiB0aGlzLl9iYWNrQnVmZmVyVGV4dHVyZTtcbiAgfVxuICAvKiogZGVzdHJveXMgdGhlIGJhY2sgYnVmZmVyICovXG4gIGRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuX2JhY2tCdWZmZXJUZXh0dXJlKSB7XG4gICAgICB0aGlzLl9iYWNrQnVmZmVyVGV4dHVyZS5kZXN0cm95KCk7XG4gICAgICB0aGlzLl9iYWNrQnVmZmVyVGV4dHVyZSA9IG51bGw7XG4gICAgfVxuICB9XG59O1xuLyoqIEBpZ25vcmUgKi9cbl9HbEJhY2tCdWZmZXJTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbVxuICBdLFxuICBuYW1lOiBcImJhY2tCdWZmZXJcIixcbiAgcHJpb3JpdHk6IDFcbn07XG4vKiogZGVmYXVsdCBvcHRpb25zIGZvciB0aGUgYmFjayBidWZmZXIgc3lzdGVtICovXG5fR2xCYWNrQnVmZmVyU3lzdGVtLmRlZmF1bHRPcHRpb25zID0ge1xuICAvKiogaWYgdHJ1ZSB3aWxsIHVzZSB0aGUgYmFjayBidWZmZXIgd2hlcmUgcmVxdWlyZWQgKi9cbiAgdXNlQmFja0J1ZmZlcjogZmFsc2Vcbn07XG5sZXQgR2xCYWNrQnVmZmVyU3lzdGVtID0gX0dsQmFja0J1ZmZlclN5c3RlbTtcblxuZXhwb3J0IHsgR2xCYWNrQnVmZmVyU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbEJhY2tCdWZmZXJTeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsQ29sb3JNYXNrU3lzdGVtIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9jb2xvck1hc2tDYWNoZSA9IDE1O1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gIH1cbiAgc2V0TWFzayhjb2xvck1hc2spIHtcbiAgICBpZiAodGhpcy5fY29sb3JNYXNrQ2FjaGUgPT09IGNvbG9yTWFzaylcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLl9jb2xvck1hc2tDYWNoZSA9IGNvbG9yTWFzaztcbiAgICB0aGlzLl9yZW5kZXJlci5nbC5jb2xvck1hc2soXG4gICAgICAhIShjb2xvck1hc2sgJiA4KSxcbiAgICAgICEhKGNvbG9yTWFzayAmIDQpLFxuICAgICAgISEoY29sb3JNYXNrICYgMiksXG4gICAgICAhIShjb2xvck1hc2sgJiAxKVxuICAgICk7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HbENvbG9yTWFza1N5c3RlbS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMU3lzdGVtXG4gIF0sXG4gIG5hbWU6IFwiY29sb3JNYXNrXCJcbn07XG5cbmV4cG9ydCB7IEdsQ29sb3JNYXNrU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbENvbG9yTWFza1N5c3RlbS5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR2xFbmNvZGVyU3lzdGVtIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLmNvbW1hbmRGaW5pc2hlZCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gIH1cbiAgc2V0R2VvbWV0cnkoZ2VvbWV0cnksIHNoYWRlcikge1xuICAgIHRoaXMuX3JlbmRlcmVyLmdlb21ldHJ5LmJpbmQoZ2VvbWV0cnksIHNoYWRlci5nbFByb2dyYW0pO1xuICB9XG4gIGZpbmlzaFJlbmRlclBhc3MoKSB7XG4gIH1cbiAgZHJhdyhvcHRpb25zKSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICBjb25zdCB7IGdlb21ldHJ5LCBzaGFkZXIsIHN0YXRlLCBza2lwU3luYywgdG9wb2xvZ3k6IHR5cGUsIHNpemUsIHN0YXJ0LCBpbnN0YW5jZUNvdW50IH0gPSBvcHRpb25zO1xuICAgIHJlbmRlcmVyLnNoYWRlci5iaW5kKHNoYWRlciwgc2tpcFN5bmMpO1xuICAgIHJlbmRlcmVyLmdlb21ldHJ5LmJpbmQoZ2VvbWV0cnksIHJlbmRlcmVyLnNoYWRlci5fYWN0aXZlUHJvZ3JhbSk7XG4gICAgaWYgKHN0YXRlKSB7XG4gICAgICByZW5kZXJlci5zdGF0ZS5zZXQoc3RhdGUpO1xuICAgIH1cbiAgICByZW5kZXJlci5nZW9tZXRyeS5kcmF3KHR5cGUsIHNpemUsIHN0YXJ0LCBpbnN0YW5jZUNvdW50ID8/IGdlb21ldHJ5Lmluc3RhbmNlQ291bnQpO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR2xFbmNvZGVyU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJlbmNvZGVyXCJcbn07XG5cbmV4cG9ydCB7IEdsRW5jb2RlclN5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xFbmNvZGVyU3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IGNoZWNrTWF4SWZTdGF0ZW1lbnRzSW5TaGFkZXIgfSBmcm9tICcuLi8uLi9iYXRjaGVyL2dsL3V0aWxzL2NoZWNrTWF4SWZTdGF0ZW1lbnRzSW5TaGFkZXIubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHbExpbWl0c1N5c3RlbSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuICBjb250ZXh0Q2hhbmdlKCkge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fcmVuZGVyZXIuZ2w7XG4gICAgdGhpcy5tYXhUZXh0dXJlcyA9IGdsLmdldFBhcmFtZXRlcihnbC5NQVhfVEVYVFVSRV9JTUFHRV9VTklUUyk7XG4gICAgdGhpcy5tYXhCYXRjaGFibGVUZXh0dXJlcyA9IGNoZWNrTWF4SWZTdGF0ZW1lbnRzSW5TaGFkZXIodGhpcy5tYXhUZXh0dXJlcywgZ2wpO1xuICAgIHRoaXMubWF4VW5pZm9ybUJpbmRpbmdzID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLk1BWF9VTklGT1JNX0JVRkZFUl9CSU5ESU5HUyk7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdsTGltaXRzU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJsaW1pdHNcIlxufTtcblxuZXhwb3J0IHsgR2xMaW1pdHNTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsTGltaXRzU3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IEdwdVN0ZW5jaWxNb2Rlc1RvUGl4aSB9IGZyb20gJy4uL2dwdS9zdGF0ZS9HcHVTdGVuY2lsTW9kZXNUb1BpeGkubWpzJztcbmltcG9ydCB7IFNURU5DSUxfTU9ERVMgfSBmcm9tICcuLi9zaGFyZWQvc3RhdGUvY29uc3QubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHbFN0ZW5jaWxTeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMuX3N0ZW5jaWxDYWNoZSA9IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgc3RlbmNpbFJlZmVyZW5jZTogMCxcbiAgICAgIHN0ZW5jaWxNb2RlOiBTVEVOQ0lMX01PREVTLk5PTkVcbiAgICB9O1xuICAgIHRoaXMuX3JlbmRlclRhcmdldFN0ZW5jaWxTdGF0ZSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHJlbmRlcmVyLnJlbmRlclRhcmdldC5vblJlbmRlclRhcmdldENoYW5nZS5hZGQodGhpcyk7XG4gIH1cbiAgY29udGV4dENoYW5nZShnbCkge1xuICAgIHRoaXMuX2dsID0gZ2w7XG4gICAgdGhpcy5fY29tcGFyaXNvbkZ1bmNNYXBwaW5nID0ge1xuICAgICAgYWx3YXlzOiBnbC5BTFdBWVMsXG4gICAgICBuZXZlcjogZ2wuTkVWRVIsXG4gICAgICBlcXVhbDogZ2wuRVFVQUwsXG4gICAgICBcIm5vdC1lcXVhbFwiOiBnbC5OT1RFUVVBTCxcbiAgICAgIGxlc3M6IGdsLkxFU1MsXG4gICAgICBcImxlc3MtZXF1YWxcIjogZ2wuTEVRVUFMLFxuICAgICAgZ3JlYXRlcjogZ2wuR1JFQVRFUixcbiAgICAgIFwiZ3JlYXRlci1lcXVhbFwiOiBnbC5HRVFVQUxcbiAgICB9O1xuICAgIHRoaXMuX3N0ZW5jaWxPcHNNYXBwaW5nID0ge1xuICAgICAga2VlcDogZ2wuS0VFUCxcbiAgICAgIHplcm86IGdsLlpFUk8sXG4gICAgICByZXBsYWNlOiBnbC5SRVBMQUNFLFxuICAgICAgaW52ZXJ0OiBnbC5JTlZFUlQsXG4gICAgICBcImluY3JlbWVudC1jbGFtcFwiOiBnbC5JTkNSLFxuICAgICAgXCJkZWNyZW1lbnQtY2xhbXBcIjogZ2wuREVDUixcbiAgICAgIFwiaW5jcmVtZW50LXdyYXBcIjogZ2wuSU5DUl9XUkFQLFxuICAgICAgXCJkZWNyZW1lbnQtd3JhcFwiOiBnbC5ERUNSX1dSQVBcbiAgICB9O1xuICAgIHRoaXMucmVzZXRTdGF0ZSgpO1xuICB9XG4gIG9uUmVuZGVyVGFyZ2V0Q2hhbmdlKHJlbmRlclRhcmdldCkge1xuICAgIGlmICh0aGlzLl9hY3RpdmVSZW5kZXJUYXJnZXQgPT09IHJlbmRlclRhcmdldClcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLl9hY3RpdmVSZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7XG4gICAgbGV0IHN0ZW5jaWxTdGF0ZSA9IHRoaXMuX3JlbmRlclRhcmdldFN0ZW5jaWxTdGF0ZVtyZW5kZXJUYXJnZXQudWlkXTtcbiAgICBpZiAoIXN0ZW5jaWxTdGF0ZSkge1xuICAgICAgc3RlbmNpbFN0YXRlID0gdGhpcy5fcmVuZGVyVGFyZ2V0U3RlbmNpbFN0YXRlW3JlbmRlclRhcmdldC51aWRdID0ge1xuICAgICAgICBzdGVuY2lsTW9kZTogU1RFTkNJTF9NT0RFUy5ESVNBQkxFRCxcbiAgICAgICAgc3RlbmNpbFJlZmVyZW5jZTogMFxuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGVuY2lsTW9kZShzdGVuY2lsU3RhdGUuc3RlbmNpbE1vZGUsIHN0ZW5jaWxTdGF0ZS5zdGVuY2lsUmVmZXJlbmNlKTtcbiAgfVxuICByZXNldFN0YXRlKCkge1xuICAgIHRoaXMuX3N0ZW5jaWxDYWNoZS5lbmFibGVkID0gZmFsc2U7XG4gICAgdGhpcy5fc3RlbmNpbENhY2hlLnN0ZW5jaWxNb2RlID0gU1RFTkNJTF9NT0RFUy5OT05FO1xuICAgIHRoaXMuX3N0ZW5jaWxDYWNoZS5zdGVuY2lsUmVmZXJlbmNlID0gMDtcbiAgfVxuICBzZXRTdGVuY2lsTW9kZShzdGVuY2lsTW9kZSwgc3RlbmNpbFJlZmVyZW5jZSkge1xuICAgIGNvbnN0IHN0ZW5jaWxTdGF0ZSA9IHRoaXMuX3JlbmRlclRhcmdldFN0ZW5jaWxTdGF0ZVt0aGlzLl9hY3RpdmVSZW5kZXJUYXJnZXQudWlkXTtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGNvbnN0IG1vZGUgPSBHcHVTdGVuY2lsTW9kZXNUb1BpeGlbc3RlbmNpbE1vZGVdO1xuICAgIGNvbnN0IF9zdGVuY2lsQ2FjaGUgPSB0aGlzLl9zdGVuY2lsQ2FjaGU7XG4gICAgc3RlbmNpbFN0YXRlLnN0ZW5jaWxNb2RlID0gc3RlbmNpbE1vZGU7XG4gICAgc3RlbmNpbFN0YXRlLnN0ZW5jaWxSZWZlcmVuY2UgPSBzdGVuY2lsUmVmZXJlbmNlO1xuICAgIGlmIChzdGVuY2lsTW9kZSA9PT0gU1RFTkNJTF9NT0RFUy5ESVNBQkxFRCkge1xuICAgICAgaWYgKHRoaXMuX3N0ZW5jaWxDYWNoZS5lbmFibGVkKSB7XG4gICAgICAgIHRoaXMuX3N0ZW5jaWxDYWNoZS5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIGdsLmRpc2FibGUoZ2wuU1RFTkNJTF9URVNUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9zdGVuY2lsQ2FjaGUuZW5hYmxlZCkge1xuICAgICAgdGhpcy5fc3RlbmNpbENhY2hlLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgZ2wuZW5hYmxlKGdsLlNURU5DSUxfVEVTVCk7XG4gICAgfVxuICAgIGlmIChzdGVuY2lsTW9kZSAhPT0gX3N0ZW5jaWxDYWNoZS5zdGVuY2lsTW9kZSB8fCBfc3RlbmNpbENhY2hlLnN0ZW5jaWxSZWZlcmVuY2UgIT09IHN0ZW5jaWxSZWZlcmVuY2UpIHtcbiAgICAgIF9zdGVuY2lsQ2FjaGUuc3RlbmNpbE1vZGUgPSBzdGVuY2lsTW9kZTtcbiAgICAgIF9zdGVuY2lsQ2FjaGUuc3RlbmNpbFJlZmVyZW5jZSA9IHN0ZW5jaWxSZWZlcmVuY2U7XG4gICAgICBnbC5zdGVuY2lsRnVuYyh0aGlzLl9jb21wYXJpc29uRnVuY01hcHBpbmdbbW9kZS5zdGVuY2lsQmFjay5jb21wYXJlXSwgc3RlbmNpbFJlZmVyZW5jZSwgMjU1KTtcbiAgICAgIGdsLnN0ZW5jaWxPcChnbC5LRUVQLCBnbC5LRUVQLCB0aGlzLl9zdGVuY2lsT3BzTWFwcGluZ1ttb2RlLnN0ZW5jaWxCYWNrLnBhc3NPcF0pO1xuICAgIH1cbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdsU3RlbmNpbFN5c3RlbS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMU3lzdGVtXG4gIF0sXG4gIG5hbWU6IFwic3RlbmNpbFwiXG59O1xuXG5leHBvcnQgeyBHbFN0ZW5jaWxTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsU3RlbmNpbFN5c3RlbS5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFdHU0xfVE9fU1RENDBfU0laRSA9IHtcbiAgZjMyOiA0LFxuICBpMzI6IDQsXG4gIFwidmVjMjxmMzI+XCI6IDgsXG4gIFwidmVjMzxmMzI+XCI6IDEyLFxuICBcInZlYzQ8ZjMyPlwiOiAxNixcbiAgXCJ2ZWMyPGkzMj5cIjogOCxcbiAgXCJ2ZWMzPGkzMj5cIjogMTIsXG4gIFwidmVjNDxpMzI+XCI6IDE2LFxuICBcIm1hdDJ4MjxmMzI+XCI6IDE2ICogMixcbiAgXCJtYXQzeDM8ZjMyPlwiOiAxNiAqIDMsXG4gIFwibWF0NHg0PGYzMj5cIjogMTYgKiA0XG4gIC8vIFRPRE8gLSBub3QgZXNzZW50aWFsIGZvciBub3cgYnV0IHN1cHBvcnQgdGhlc2UgaW4gdGhlIGZ1dHVyZVxuICAvLyBpbnQ6ICAgICAgNCxcbiAgLy8gaXZlYzI6ICAgIDgsXG4gIC8vIGl2ZWMzOiAgICAxMixcbiAgLy8gaXZlYzQ6ICAgIDE2LFxuICAvLyB1aW50OiAgICAgNCxcbiAgLy8gdXZlYzI6ICAgIDgsXG4gIC8vIHV2ZWMzOiAgICAxMixcbiAgLy8gdXZlYzQ6ICAgIDE2LFxuICAvLyBib29sOiAgICAgNCxcbiAgLy8gYnZlYzI6ICAgIDgsXG4gIC8vIGJ2ZWMzOiAgICAxMixcbiAgLy8gYnZlYzQ6ICAgIDE2LFxuICAvLyBtYXQyOiAgICAgMTYgKiAyLFxuICAvLyBtYXQzOiAgICAgMTYgKiAzLFxuICAvLyBtYXQ0OiAgICAgMTYgKiA0LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZVVib0VsZW1lbnRzU1RENDAodW5pZm9ybURhdGEpIHtcbiAgY29uc3QgdWJvRWxlbWVudHMgPSB1bmlmb3JtRGF0YS5tYXAoKGRhdGEpID0+ICh7XG4gICAgZGF0YSxcbiAgICBvZmZzZXQ6IDAsXG4gICAgc2l6ZTogMFxuICB9KSk7XG4gIGNvbnN0IGNodW5rU2l6ZSA9IDE2O1xuICBsZXQgc2l6ZSA9IDA7XG4gIGxldCBvZmZzZXQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHVib0VsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdWJvRWxlbWVudCA9IHVib0VsZW1lbnRzW2ldO1xuICAgIHNpemUgPSBXR1NMX1RPX1NURDQwX1NJWkVbdWJvRWxlbWVudC5kYXRhLnR5cGVdO1xuICAgIGlmICghc2l6ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHR5cGUgJHt1Ym9FbGVtZW50LmRhdGEudHlwZX1gKTtcbiAgICB9XG4gICAgaWYgKHVib0VsZW1lbnQuZGF0YS5zaXplID4gMSkge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KHNpemUsIGNodW5rU2l6ZSkgKiB1Ym9FbGVtZW50LmRhdGEuc2l6ZTtcbiAgICB9XG4gICAgY29uc3QgYm91bmRhcnkgPSBzaXplID09PSAxMiA/IDE2IDogc2l6ZTtcbiAgICB1Ym9FbGVtZW50LnNpemUgPSBzaXplO1xuICAgIGNvbnN0IGN1ck9mZnNldCA9IG9mZnNldCAlIGNodW5rU2l6ZTtcbiAgICBpZiAoY3VyT2Zmc2V0ID4gMCAmJiBjaHVua1NpemUgLSBjdXJPZmZzZXQgPCBib3VuZGFyeSkge1xuICAgICAgb2Zmc2V0ICs9IChjaHVua1NpemUgLSBjdXJPZmZzZXQpICUgMTY7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZnNldCArPSAoc2l6ZSAtIGN1ck9mZnNldCAlIHNpemUpICUgc2l6ZTtcbiAgICB9XG4gICAgdWJvRWxlbWVudC5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgb2Zmc2V0ICs9IHNpemU7XG4gIH1cbiAgb2Zmc2V0ID0gTWF0aC5jZWlsKG9mZnNldCAvIDE2KSAqIDE2O1xuICByZXR1cm4geyB1Ym9FbGVtZW50cywgc2l6ZTogb2Zmc2V0IH07XG59XG5cbmV4cG9ydCB7IFdHU0xfVE9fU1RENDBfU0laRSwgY3JlYXRlVWJvRWxlbWVudHNTVEQ0MCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlVWJvRWxlbWVudHNTVEQ0MC5tanMubWFwXG4iLCJpbXBvcnQgeyBXR1NMX1RPX1NURDQwX1NJWkUgfSBmcm9tICcuL2NyZWF0ZVVib0VsZW1lbnRzU1RENDAubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBnZW5lcmF0ZUFycmF5U3luY1NURDQwKHVib0VsZW1lbnQsIG9mZnNldFRvQWRkKSB7XG4gIGNvbnN0IHJvd1NpemUgPSBNYXRoLm1heChXR1NMX1RPX1NURDQwX1NJWkVbdWJvRWxlbWVudC5kYXRhLnR5cGVdIC8gMTYsIDEpO1xuICBjb25zdCBlbGVtZW50U2l6ZSA9IHVib0VsZW1lbnQuZGF0YS52YWx1ZS5sZW5ndGggLyB1Ym9FbGVtZW50LmRhdGEuc2l6ZTtcbiAgY29uc3QgcmVtYWluZGVyID0gKDQgLSBlbGVtZW50U2l6ZSAlIDQpICUgNDtcbiAgY29uc3QgZGF0YSA9IHVib0VsZW1lbnQuZGF0YS50eXBlLmluZGV4T2YoXCJpMzJcIikgPj0gMCA/IFwiZGF0YUludDMyXCIgOiBcImRhdGFcIjtcbiAgcmV0dXJuIGBcbiAgICAgICAgdiA9IHV2LiR7dWJvRWxlbWVudC5kYXRhLm5hbWV9O1xuICAgICAgICBvZmZzZXQgKz0gJHtvZmZzZXRUb0FkZH07XG5cbiAgICAgICAgYXJyYXlPZmZzZXQgPSBvZmZzZXQ7XG5cbiAgICAgICAgdCA9IDA7XG5cbiAgICAgICAgZm9yKHZhciBpPTA7IGkgPCAke3Vib0VsZW1lbnQuZGF0YS5zaXplICogcm93U2l6ZX07IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgZm9yKHZhciBqID0gMDsgaiA8ICR7ZWxlbWVudFNpemV9OyBqKyspXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJHtkYXRhfVthcnJheU9mZnNldCsrXSA9IHZbdCsrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR7cmVtYWluZGVyICE9PSAwID8gYGFycmF5T2Zmc2V0ICs9ICR7cmVtYWluZGVyfTtgIDogXCJcIn1cbiAgICAgICAgfVxuICAgIGA7XG59XG5cbmV4cG9ydCB7IGdlbmVyYXRlQXJyYXlTeW5jU1RENDAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyYXRlQXJyYXlTeW5jU1RENDAubWpzLm1hcFxuIiwiaW1wb3J0IHsgY3JlYXRlVWJvU3luY0Z1bmN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3NoYWRlci91dGlscy9jcmVhdGVVYm9TeW5jRnVuY3Rpb24ubWpzJztcbmltcG9ydCB7IHVib1N5bmNGdW5jdGlvbnNTVEQ0MCB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9zaGFkZXIvdXRpbHMvdWJvU3luY0Z1bmN0aW9ucy5tanMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVBcnJheVN5bmNTVEQ0MCB9IGZyb20gJy4vZ2VuZXJhdGVBcnJheVN5bmNTVEQ0MC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGNyZWF0ZVVib1N5bmNGdW5jdGlvblNURDQwKHVib0VsZW1lbnRzKSB7XG4gIHJldHVybiBjcmVhdGVVYm9TeW5jRnVuY3Rpb24oXG4gICAgdWJvRWxlbWVudHMsXG4gICAgXCJ1Ym9TdGQ0MFwiLFxuICAgIGdlbmVyYXRlQXJyYXlTeW5jU1RENDAsXG4gICAgdWJvU3luY0Z1bmN0aW9uc1NURDQwXG4gICk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVVib1N5bmNGdW5jdGlvblNURDQwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVVYm9TeW5jU1RENDAubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgVWJvU3lzdGVtIH0gZnJvbSAnLi4vc2hhcmVkL3NoYWRlci9VYm9TeXN0ZW0ubWpzJztcbmltcG9ydCB7IGNyZWF0ZVVib0VsZW1lbnRzU1RENDAgfSBmcm9tICcuL3NoYWRlci91dGlscy9jcmVhdGVVYm9FbGVtZW50c1NURDQwLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVVYm9TeW5jRnVuY3Rpb25TVEQ0MCB9IGZyb20gJy4vc2hhZGVyL3V0aWxzL2NyZWF0ZVVib1N5bmNTVEQ0MC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsVWJvU3lzdGVtIGV4dGVuZHMgVWJvU3lzdGVtIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgY3JlYXRlVWJvRWxlbWVudHM6IGNyZWF0ZVVib0VsZW1lbnRzU1RENDAsXG4gICAgICBnZW5lcmF0ZVVib1N5bmM6IGNyZWF0ZVVib1N5bmNGdW5jdGlvblNURDQwXG4gICAgfSk7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HbFVib1N5c3RlbS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtFeHRlbnNpb25UeXBlLldlYkdMU3lzdGVtXSxcbiAgbmFtZTogXCJ1Ym9cIlxufTtcblxuZXhwb3J0IHsgR2xVYm9TeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsVWJvU3lzdGVtLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY2xhc3MgR2xSZW5kZXJUYXJnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLndpZHRoID0gLTE7XG4gICAgdGhpcy5oZWlnaHQgPSAtMTtcbiAgICB0aGlzLm1zYWEgPSBmYWxzZTtcbiAgICB0aGlzLm1zYWFSZW5kZXJCdWZmZXIgPSBbXTtcbiAgfVxufVxuXG5leHBvcnQgeyBHbFJlbmRlclRhcmdldCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xSZW5kZXJUYXJnZXQubWpzLm1hcFxuIiwiaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vbWF0aHMvc2hhcGVzL1JlY3RhbmdsZS5tanMnO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2xvZ2dpbmcvd2Fybi5tanMnO1xuaW1wb3J0IHsgQ2FudmFzU291cmNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3RleHR1cmUvc291cmNlcy9DYW52YXNTb3VyY2UubWpzJztcbmltcG9ydCB7IENMRUFSIH0gZnJvbSAnLi4vY29uc3QubWpzJztcbmltcG9ydCB7IEdsUmVuZGVyVGFyZ2V0IH0gZnJvbSAnLi4vR2xSZW5kZXJUYXJnZXQubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHbFJlbmRlclRhcmdldEFkYXB0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9jbGVhckNvbG9yQ2FjaGUgPSBbMCwgMCwgMCwgMF07XG4gICAgdGhpcy5fdmlld1BvcnRDYWNoZSA9IG5ldyBSZWN0YW5nbGUoKTtcbiAgfVxuICBpbml0KHJlbmRlcmVyLCByZW5kZXJUYXJnZXRTeXN0ZW0pIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuX3JlbmRlclRhcmdldFN5c3RlbSA9IHJlbmRlclRhcmdldFN5c3RlbTtcbiAgICByZW5kZXJlci5ydW5uZXJzLmNvbnRleHRDaGFuZ2UuYWRkKHRoaXMpO1xuICB9XG4gIGNvbnRleHRDaGFuZ2UoKSB7XG4gICAgdGhpcy5fY2xlYXJDb2xvckNhY2hlID0gWzAsIDAsIDAsIDBdO1xuICAgIHRoaXMuX3ZpZXdQb3J0Q2FjaGUgPSBuZXcgUmVjdGFuZ2xlKCk7XG4gIH1cbiAgY29weVRvVGV4dHVyZShzb3VyY2VSZW5kZXJTdXJmYWNlVGV4dHVyZSwgZGVzdGluYXRpb25UZXh0dXJlLCBvcmlnaW5TcmMsIHNpemUsIG9yaWdpbkRlc3QpIHtcbiAgICBjb25zdCByZW5kZXJUYXJnZXRTeXN0ZW0gPSB0aGlzLl9yZW5kZXJUYXJnZXRTeXN0ZW07XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICBjb25zdCBnbFJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldFN5c3RlbS5nZXRHcHVSZW5kZXJUYXJnZXQoc291cmNlUmVuZGVyU3VyZmFjZVRleHR1cmUpO1xuICAgIGNvbnN0IGdsID0gcmVuZGVyZXIuZ2w7XG4gICAgdGhpcy5maW5pc2hSZW5kZXJQYXNzKHNvdXJjZVJlbmRlclN1cmZhY2VUZXh0dXJlKTtcbiAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGdsUmVuZGVyVGFyZ2V0LnJlc29sdmVUYXJnZXRGcmFtZWJ1ZmZlcik7XG4gICAgcmVuZGVyZXIudGV4dHVyZS5iaW5kKGRlc3RpbmF0aW9uVGV4dHVyZSwgMCk7XG4gICAgZ2wuY29weVRleFN1YkltYWdlMkQoXG4gICAgICBnbC5URVhUVVJFXzJELFxuICAgICAgMCxcbiAgICAgIG9yaWdpbkRlc3QueCxcbiAgICAgIG9yaWdpbkRlc3QueSxcbiAgICAgIG9yaWdpblNyYy54LFxuICAgICAgb3JpZ2luU3JjLnksXG4gICAgICBzaXplLndpZHRoLFxuICAgICAgc2l6ZS5oZWlnaHRcbiAgICApO1xuICAgIHJldHVybiBkZXN0aW5hdGlvblRleHR1cmU7XG4gIH1cbiAgc3RhcnRSZW5kZXJQYXNzKHJlbmRlclRhcmdldCwgY2xlYXIgPSB0cnVlLCBjbGVhckNvbG9yLCB2aWV3cG9ydCkge1xuICAgIGNvbnN0IHJlbmRlclRhcmdldFN5c3RlbSA9IHRoaXMuX3JlbmRlclRhcmdldFN5c3RlbTtcbiAgICBjb25zdCBzb3VyY2UgPSByZW5kZXJUYXJnZXQuY29sb3JUZXh0dXJlO1xuICAgIGNvbnN0IGdwdVJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldFN5c3RlbS5nZXRHcHVSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KTtcbiAgICBsZXQgdmlld1BvcnRZID0gdmlld3BvcnQueTtcbiAgICBpZiAocmVuZGVyVGFyZ2V0LmlzUm9vdCkge1xuICAgICAgdmlld1BvcnRZID0gc291cmNlLnBpeGVsSGVpZ2h0IC0gdmlld3BvcnQuaGVpZ2h0O1xuICAgIH1cbiAgICByZW5kZXJUYXJnZXQuY29sb3JUZXh0dXJlcy5mb3JFYWNoKCh0ZXh0dXJlKSA9PiB7XG4gICAgICB0aGlzLl9yZW5kZXJlci50ZXh0dXJlLnVuYmluZCh0ZXh0dXJlKTtcbiAgICB9KTtcbiAgICBjb25zdCBnbCA9IHRoaXMuX3JlbmRlcmVyLmdsO1xuICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ3B1UmVuZGVyVGFyZ2V0LmZyYW1lYnVmZmVyKTtcbiAgICBjb25zdCB2aWV3UG9ydENhY2hlID0gdGhpcy5fdmlld1BvcnRDYWNoZTtcbiAgICBpZiAodmlld1BvcnRDYWNoZS54ICE9PSB2aWV3cG9ydC54IHx8IHZpZXdQb3J0Q2FjaGUueSAhPT0gdmlld1BvcnRZIHx8IHZpZXdQb3J0Q2FjaGUud2lkdGggIT09IHZpZXdwb3J0LndpZHRoIHx8IHZpZXdQb3J0Q2FjaGUuaGVpZ2h0ICE9PSB2aWV3cG9ydC5oZWlnaHQpIHtcbiAgICAgIHZpZXdQb3J0Q2FjaGUueCA9IHZpZXdwb3J0Lng7XG4gICAgICB2aWV3UG9ydENhY2hlLnkgPSB2aWV3UG9ydFk7XG4gICAgICB2aWV3UG9ydENhY2hlLndpZHRoID0gdmlld3BvcnQud2lkdGg7XG4gICAgICB2aWV3UG9ydENhY2hlLmhlaWdodCA9IHZpZXdwb3J0LmhlaWdodDtcbiAgICAgIGdsLnZpZXdwb3J0KFxuICAgICAgICB2aWV3cG9ydC54LFxuICAgICAgICB2aWV3UG9ydFksXG4gICAgICAgIHZpZXdwb3J0LndpZHRoLFxuICAgICAgICB2aWV3cG9ydC5oZWlnaHRcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghZ3B1UmVuZGVyVGFyZ2V0LmRlcHRoU3RlbmNpbFJlbmRlckJ1ZmZlciAmJiAocmVuZGVyVGFyZ2V0LnN0ZW5jaWwgfHwgcmVuZGVyVGFyZ2V0LmRlcHRoKSkge1xuICAgICAgdGhpcy5faW5pdFN0ZW5jaWwoZ3B1UmVuZGVyVGFyZ2V0KTtcbiAgICB9XG4gICAgdGhpcy5jbGVhcihyZW5kZXJUYXJnZXQsIGNsZWFyLCBjbGVhckNvbG9yKTtcbiAgfVxuICBmaW5pc2hSZW5kZXJQYXNzKHJlbmRlclRhcmdldCkge1xuICAgIGNvbnN0IHJlbmRlclRhcmdldFN5c3RlbSA9IHRoaXMuX3JlbmRlclRhcmdldFN5c3RlbTtcbiAgICBjb25zdCBnbFJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldFN5c3RlbS5nZXRHcHVSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KTtcbiAgICBpZiAoIWdsUmVuZGVyVGFyZ2V0Lm1zYWEpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9yZW5kZXJlci5nbDtcbiAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGdsUmVuZGVyVGFyZ2V0LnJlc29sdmVUYXJnZXRGcmFtZWJ1ZmZlcik7XG4gICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLlJFQURfRlJBTUVCVUZGRVIsIGdsUmVuZGVyVGFyZ2V0LmZyYW1lYnVmZmVyKTtcbiAgICBnbC5ibGl0RnJhbWVidWZmZXIoXG4gICAgICAwLFxuICAgICAgMCxcbiAgICAgIGdsUmVuZGVyVGFyZ2V0LndpZHRoLFxuICAgICAgZ2xSZW5kZXJUYXJnZXQuaGVpZ2h0LFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICBnbFJlbmRlclRhcmdldC53aWR0aCxcbiAgICAgIGdsUmVuZGVyVGFyZ2V0LmhlaWdodCxcbiAgICAgIGdsLkNPTE9SX0JVRkZFUl9CSVQsXG4gICAgICBnbC5ORUFSRVNUXG4gICAgKTtcbiAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGdsUmVuZGVyVGFyZ2V0LmZyYW1lYnVmZmVyKTtcbiAgfVxuICBpbml0R3B1UmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCkge1xuICAgIGNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG4gICAgY29uc3QgZ2wgPSByZW5kZXJlci5nbDtcbiAgICBjb25zdCBnbFJlbmRlclRhcmdldCA9IG5ldyBHbFJlbmRlclRhcmdldCgpO1xuICAgIGNvbnN0IGNvbG9yVGV4dHVyZSA9IHJlbmRlclRhcmdldC5jb2xvclRleHR1cmU7XG4gICAgaWYgKGNvbG9yVGV4dHVyZSBpbnN0YW5jZW9mIENhbnZhc1NvdXJjZSkge1xuICAgICAgdGhpcy5fcmVuZGVyZXIuY29udGV4dC5lbnN1cmVDYW52YXNTaXplKHJlbmRlclRhcmdldC5jb2xvclRleHR1cmUucmVzb3VyY2UpO1xuICAgICAgZ2xSZW5kZXJUYXJnZXQuZnJhbWVidWZmZXIgPSBudWxsO1xuICAgICAgcmV0dXJuIGdsUmVuZGVyVGFyZ2V0O1xuICAgIH1cbiAgICB0aGlzLl9pbml0Q29sb3IocmVuZGVyVGFyZ2V0LCBnbFJlbmRlclRhcmdldCk7XG4gICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcbiAgICByZXR1cm4gZ2xSZW5kZXJUYXJnZXQ7XG4gIH1cbiAgZGVzdHJveUdwdVJlbmRlclRhcmdldChncHVSZW5kZXJUYXJnZXQpIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX3JlbmRlcmVyLmdsO1xuICAgIGlmIChncHVSZW5kZXJUYXJnZXQuZnJhbWVidWZmZXIpIHtcbiAgICAgIGdsLmRlbGV0ZUZyYW1lYnVmZmVyKGdwdVJlbmRlclRhcmdldC5mcmFtZWJ1ZmZlcik7XG4gICAgICBncHVSZW5kZXJUYXJnZXQuZnJhbWVidWZmZXIgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZ3B1UmVuZGVyVGFyZ2V0LnJlc29sdmVUYXJnZXRGcmFtZWJ1ZmZlcikge1xuICAgICAgZ2wuZGVsZXRlRnJhbWVidWZmZXIoZ3B1UmVuZGVyVGFyZ2V0LnJlc29sdmVUYXJnZXRGcmFtZWJ1ZmZlcik7XG4gICAgICBncHVSZW5kZXJUYXJnZXQucmVzb2x2ZVRhcmdldEZyYW1lYnVmZmVyID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGdwdVJlbmRlclRhcmdldC5kZXB0aFN0ZW5jaWxSZW5kZXJCdWZmZXIpIHtcbiAgICAgIGdsLmRlbGV0ZVJlbmRlcmJ1ZmZlcihncHVSZW5kZXJUYXJnZXQuZGVwdGhTdGVuY2lsUmVuZGVyQnVmZmVyKTtcbiAgICAgIGdwdVJlbmRlclRhcmdldC5kZXB0aFN0ZW5jaWxSZW5kZXJCdWZmZXIgPSBudWxsO1xuICAgIH1cbiAgICBncHVSZW5kZXJUYXJnZXQubXNhYVJlbmRlckJ1ZmZlci5mb3JFYWNoKChyZW5kZXJCdWZmZXIpID0+IHtcbiAgICAgIGdsLmRlbGV0ZVJlbmRlcmJ1ZmZlcihyZW5kZXJCdWZmZXIpO1xuICAgIH0pO1xuICAgIGdwdVJlbmRlclRhcmdldC5tc2FhUmVuZGVyQnVmZmVyID0gbnVsbDtcbiAgfVxuICBjbGVhcihfcmVuZGVyVGFyZ2V0LCBjbGVhciwgY2xlYXJDb2xvcikge1xuICAgIGlmICghY2xlYXIpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgcmVuZGVyVGFyZ2V0U3lzdGVtID0gdGhpcy5fcmVuZGVyVGFyZ2V0U3lzdGVtO1xuICAgIGlmICh0eXBlb2YgY2xlYXIgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICBjbGVhciA9IGNsZWFyID8gQ0xFQVIuQUxMIDogQ0xFQVIuTk9ORTtcbiAgICB9XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9yZW5kZXJlci5nbDtcbiAgICBpZiAoY2xlYXIgJiBDTEVBUi5DT0xPUikge1xuICAgICAgY2xlYXJDb2xvciA/PyAoY2xlYXJDb2xvciA9IHJlbmRlclRhcmdldFN5c3RlbS5kZWZhdWx0Q2xlYXJDb2xvcik7XG4gICAgICBjb25zdCBjbGVhckNvbG9yQ2FjaGUgPSB0aGlzLl9jbGVhckNvbG9yQ2FjaGU7XG4gICAgICBjb25zdCBjbGVhckNvbG9yQXJyYXkgPSBjbGVhckNvbG9yO1xuICAgICAgaWYgKGNsZWFyQ29sb3JDYWNoZVswXSAhPT0gY2xlYXJDb2xvckFycmF5WzBdIHx8IGNsZWFyQ29sb3JDYWNoZVsxXSAhPT0gY2xlYXJDb2xvckFycmF5WzFdIHx8IGNsZWFyQ29sb3JDYWNoZVsyXSAhPT0gY2xlYXJDb2xvckFycmF5WzJdIHx8IGNsZWFyQ29sb3JDYWNoZVszXSAhPT0gY2xlYXJDb2xvckFycmF5WzNdKSB7XG4gICAgICAgIGNsZWFyQ29sb3JDYWNoZVswXSA9IGNsZWFyQ29sb3JBcnJheVswXTtcbiAgICAgICAgY2xlYXJDb2xvckNhY2hlWzFdID0gY2xlYXJDb2xvckFycmF5WzFdO1xuICAgICAgICBjbGVhckNvbG9yQ2FjaGVbMl0gPSBjbGVhckNvbG9yQXJyYXlbMl07XG4gICAgICAgIGNsZWFyQ29sb3JDYWNoZVszXSA9IGNsZWFyQ29sb3JBcnJheVszXTtcbiAgICAgICAgZ2wuY2xlYXJDb2xvcihjbGVhckNvbG9yQXJyYXlbMF0sIGNsZWFyQ29sb3JBcnJheVsxXSwgY2xlYXJDb2xvckFycmF5WzJdLCBjbGVhckNvbG9yQXJyYXlbM10pO1xuICAgICAgfVxuICAgIH1cbiAgICBnbC5jbGVhcihjbGVhcik7XG4gIH1cbiAgcmVzaXplR3B1UmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCkge1xuICAgIGlmIChyZW5kZXJUYXJnZXQuaXNSb290KVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHJlbmRlclRhcmdldFN5c3RlbSA9IHRoaXMuX3JlbmRlclRhcmdldFN5c3RlbTtcbiAgICBjb25zdCBnbFJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldFN5c3RlbS5nZXRHcHVSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KTtcbiAgICB0aGlzLl9yZXNpemVDb2xvcihyZW5kZXJUYXJnZXQsIGdsUmVuZGVyVGFyZ2V0KTtcbiAgICBpZiAocmVuZGVyVGFyZ2V0LnN0ZW5jaWwgfHwgcmVuZGVyVGFyZ2V0LmRlcHRoKSB7XG4gICAgICB0aGlzLl9yZXNpemVTdGVuY2lsKGdsUmVuZGVyVGFyZ2V0KTtcbiAgICB9XG4gIH1cbiAgX2luaXRDb2xvcihyZW5kZXJUYXJnZXQsIGdsUmVuZGVyVGFyZ2V0KSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICBjb25zdCBnbCA9IHJlbmRlcmVyLmdsO1xuICAgIGNvbnN0IHJlc29sdmVUYXJnZXRGcmFtZWJ1ZmZlciA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG4gICAgZ2xSZW5kZXJUYXJnZXQucmVzb2x2ZVRhcmdldEZyYW1lYnVmZmVyID0gcmVzb2x2ZVRhcmdldEZyYW1lYnVmZmVyO1xuICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgcmVzb2x2ZVRhcmdldEZyYW1lYnVmZmVyKTtcbiAgICBnbFJlbmRlclRhcmdldC53aWR0aCA9IHJlbmRlclRhcmdldC5jb2xvclRleHR1cmUuc291cmNlLnBpeGVsV2lkdGg7XG4gICAgZ2xSZW5kZXJUYXJnZXQuaGVpZ2h0ID0gcmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZS5zb3VyY2UucGl4ZWxIZWlnaHQ7XG4gICAgcmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZXMuZm9yRWFjaCgoY29sb3JUZXh0dXJlLCBpKSA9PiB7XG4gICAgICBjb25zdCBzb3VyY2UgPSBjb2xvclRleHR1cmUuc291cmNlO1xuICAgICAgaWYgKHNvdXJjZS5hbnRpYWxpYXMpIHtcbiAgICAgICAgaWYgKHJlbmRlcmVyLmNvbnRleHQuc3VwcG9ydHMubXNhYSkge1xuICAgICAgICAgIGdsUmVuZGVyVGFyZ2V0Lm1zYWEgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4oXCJbUmVuZGVyVGV4dHVyZV0gQW50aWFsaWFzaW5nIG9uIHRleHR1cmVzIGlzIG5vdCBzdXBwb3J0ZWQgaW4gV2ViR0wxXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZW5kZXJlci50ZXh0dXJlLmJpbmRTb3VyY2Uoc291cmNlLCAwKTtcbiAgICAgIGNvbnN0IGdsU291cmNlID0gcmVuZGVyZXIudGV4dHVyZS5nZXRHbFNvdXJjZShzb3VyY2UpO1xuICAgICAgY29uc3QgZ2xUZXh0dXJlID0gZ2xTb3VyY2UudGV4dHVyZTtcbiAgICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKFxuICAgICAgICBnbC5GUkFNRUJVRkZFUixcbiAgICAgICAgZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpLFxuICAgICAgICAzNTUzLFxuICAgICAgICAvLyB0ZXh0dXJlLnRhcmdldCxcbiAgICAgICAgZ2xUZXh0dXJlLFxuICAgICAgICAwXG4gICAgICApO1xuICAgIH0pO1xuICAgIGlmIChnbFJlbmRlclRhcmdldC5tc2FhKSB7XG4gICAgICBjb25zdCB2aWV3RnJhbWVidWZmZXIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuICAgICAgZ2xSZW5kZXJUYXJnZXQuZnJhbWVidWZmZXIgPSB2aWV3RnJhbWVidWZmZXI7XG4gICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHZpZXdGcmFtZWJ1ZmZlcik7XG4gICAgICByZW5kZXJUYXJnZXQuY29sb3JUZXh0dXJlcy5mb3JFYWNoKChfLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IG1zYWFSZW5kZXJCdWZmZXIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcbiAgICAgICAgZ2xSZW5kZXJUYXJnZXQubXNhYVJlbmRlckJ1ZmZlcltpXSA9IG1zYWFSZW5kZXJCdWZmZXI7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2xSZW5kZXJUYXJnZXQuZnJhbWVidWZmZXIgPSByZXNvbHZlVGFyZ2V0RnJhbWVidWZmZXI7XG4gICAgfVxuICAgIHRoaXMuX3Jlc2l6ZUNvbG9yKHJlbmRlclRhcmdldCwgZ2xSZW5kZXJUYXJnZXQpO1xuICB9XG4gIF9yZXNpemVDb2xvcihyZW5kZXJUYXJnZXQsIGdsUmVuZGVyVGFyZ2V0KSB7XG4gICAgY29uc3Qgc291cmNlID0gcmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZS5zb3VyY2U7XG4gICAgZ2xSZW5kZXJUYXJnZXQud2lkdGggPSBzb3VyY2UucGl4ZWxXaWR0aDtcbiAgICBnbFJlbmRlclRhcmdldC5oZWlnaHQgPSBzb3VyY2UucGl4ZWxIZWlnaHQ7XG4gICAgcmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZXMuZm9yRWFjaCgoY29sb3JUZXh0dXJlLCBpKSA9PiB7XG4gICAgICBpZiAoaSA9PT0gMClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29sb3JUZXh0dXJlLnNvdXJjZS5yZXNpemUoc291cmNlLndpZHRoLCBzb3VyY2UuaGVpZ2h0LCBzb3VyY2UuX3Jlc29sdXRpb24pO1xuICAgIH0pO1xuICAgIGlmIChnbFJlbmRlclRhcmdldC5tc2FhKSB7XG4gICAgICBjb25zdCByZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuICAgICAgY29uc3QgZ2wgPSByZW5kZXJlci5nbDtcbiAgICAgIGNvbnN0IHZpZXdGcmFtZWJ1ZmZlciA9IGdsUmVuZGVyVGFyZ2V0LmZyYW1lYnVmZmVyO1xuICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB2aWV3RnJhbWVidWZmZXIpO1xuICAgICAgcmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZXMuZm9yRWFjaCgoY29sb3JUZXh0dXJlLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IHNvdXJjZTIgPSBjb2xvclRleHR1cmUuc291cmNlO1xuICAgICAgICByZW5kZXJlci50ZXh0dXJlLmJpbmRTb3VyY2Uoc291cmNlMiwgMCk7XG4gICAgICAgIGNvbnN0IGdsU291cmNlID0gcmVuZGVyZXIudGV4dHVyZS5nZXRHbFNvdXJjZShzb3VyY2UyKTtcbiAgICAgICAgY29uc3QgZ2xJbnRlcm5hbEZvcm1hdCA9IGdsU291cmNlLmludGVybmFsRm9ybWF0O1xuICAgICAgICBjb25zdCBtc2FhUmVuZGVyQnVmZmVyID0gZ2xSZW5kZXJUYXJnZXQubXNhYVJlbmRlckJ1ZmZlcltpXTtcbiAgICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihcbiAgICAgICAgICBnbC5SRU5ERVJCVUZGRVIsXG4gICAgICAgICAgbXNhYVJlbmRlckJ1ZmZlclxuICAgICAgICApO1xuICAgICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoXG4gICAgICAgICAgZ2wuUkVOREVSQlVGRkVSLFxuICAgICAgICAgIDQsXG4gICAgICAgICAgZ2xJbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgICBzb3VyY2UyLnBpeGVsV2lkdGgsXG4gICAgICAgICAgc291cmNlMi5waXhlbEhlaWdodFxuICAgICAgICApO1xuICAgICAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihcbiAgICAgICAgICBnbC5GUkFNRUJVRkZFUixcbiAgICAgICAgICBnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksXG4gICAgICAgICAgZ2wuUkVOREVSQlVGRkVSLFxuICAgICAgICAgIG1zYWFSZW5kZXJCdWZmZXJcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBfaW5pdFN0ZW5jaWwoZ2xSZW5kZXJUYXJnZXQpIHtcbiAgICBpZiAoZ2xSZW5kZXJUYXJnZXQuZnJhbWVidWZmZXIgPT09IG51bGwpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9yZW5kZXJlci5nbDtcbiAgICBjb25zdCBkZXB0aFN0ZW5jaWxSZW5kZXJCdWZmZXIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcbiAgICBnbFJlbmRlclRhcmdldC5kZXB0aFN0ZW5jaWxSZW5kZXJCdWZmZXIgPSBkZXB0aFN0ZW5jaWxSZW5kZXJCdWZmZXI7XG4gICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihcbiAgICAgIGdsLlJFTkRFUkJVRkZFUixcbiAgICAgIGRlcHRoU3RlbmNpbFJlbmRlckJ1ZmZlclxuICAgICk7XG4gICAgZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoXG4gICAgICBnbC5GUkFNRUJVRkZFUixcbiAgICAgIGdsLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCxcbiAgICAgIGdsLlJFTkRFUkJVRkZFUixcbiAgICAgIGRlcHRoU3RlbmNpbFJlbmRlckJ1ZmZlclxuICAgICk7XG4gICAgdGhpcy5fcmVzaXplU3RlbmNpbChnbFJlbmRlclRhcmdldCk7XG4gIH1cbiAgX3Jlc2l6ZVN0ZW5jaWwoZ2xSZW5kZXJUYXJnZXQpIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX3JlbmRlcmVyLmdsO1xuICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoXG4gICAgICBnbC5SRU5ERVJCVUZGRVIsXG4gICAgICBnbFJlbmRlclRhcmdldC5kZXB0aFN0ZW5jaWxSZW5kZXJCdWZmZXJcbiAgICApO1xuICAgIGlmIChnbFJlbmRlclRhcmdldC5tc2FhKSB7XG4gICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoXG4gICAgICAgIGdsLlJFTkRFUkJVRkZFUixcbiAgICAgICAgNCxcbiAgICAgICAgZ2wuREVQVEgyNF9TVEVOQ0lMOCxcbiAgICAgICAgZ2xSZW5kZXJUYXJnZXQud2lkdGgsXG4gICAgICAgIGdsUmVuZGVyVGFyZ2V0LmhlaWdodFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShcbiAgICAgICAgZ2wuUkVOREVSQlVGRkVSLFxuICAgICAgICB0aGlzLl9yZW5kZXJlci5jb250ZXh0LndlYkdMVmVyc2lvbiA9PT0gMiA/IGdsLkRFUFRIMjRfU1RFTkNJTDggOiBnbC5ERVBUSF9TVEVOQ0lMLFxuICAgICAgICBnbFJlbmRlclRhcmdldC53aWR0aCxcbiAgICAgICAgZ2xSZW5kZXJUYXJnZXQuaGVpZ2h0XG4gICAgICApO1xuICAgIH1cbiAgfVxuICBwcmVyZW5kZXIocmVuZGVyVGFyZ2V0KSB7XG4gICAgY29uc3QgcmVzb3VyY2UgPSByZW5kZXJUYXJnZXQuY29sb3JUZXh0dXJlLnJlc291cmNlO1xuICAgIGlmICh0aGlzLl9yZW5kZXJlci5jb250ZXh0Lm11bHRpVmlldyAmJiBDYW52YXNTb3VyY2UudGVzdChyZXNvdXJjZSkpIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLmNvbnRleHQuZW5zdXJlQ2FudmFzU2l6ZShyZXNvdXJjZSk7XG4gICAgfVxuICB9XG4gIHBvc3RyZW5kZXIocmVuZGVyVGFyZ2V0KSB7XG4gICAgaWYgKCF0aGlzLl9yZW5kZXJlci5jb250ZXh0Lm11bHRpVmlldylcbiAgICAgIHJldHVybjtcbiAgICBpZiAoQ2FudmFzU291cmNlLnRlc3QocmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZS5yZXNvdXJjZSkpIHtcbiAgICAgIGNvbnN0IGNvbnRleHRDYW52YXMgPSB0aGlzLl9yZW5kZXJlci5jb250ZXh0LmNhbnZhcztcbiAgICAgIGNvbnN0IGNhbnZhc1NvdXJjZSA9IHJlbmRlclRhcmdldC5jb2xvclRleHR1cmU7XG4gICAgICBjYW52YXNTb3VyY2UuY29udGV4dDJELmRyYXdJbWFnZShcbiAgICAgICAgY29udGV4dENhbnZhcyxcbiAgICAgICAgMCxcbiAgICAgICAgY2FudmFzU291cmNlLnBpeGVsSGVpZ2h0IC0gY29udGV4dENhbnZhcy5oZWlnaHRcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IEdsUmVuZGVyVGFyZ2V0QWRhcHRvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xSZW5kZXJUYXJnZXRBZGFwdG9yLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IFJlbmRlclRhcmdldFN5c3RlbSB9IGZyb20gJy4uLy4uL3NoYXJlZC9yZW5kZXJUYXJnZXQvUmVuZGVyVGFyZ2V0U3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBHbFJlbmRlclRhcmdldEFkYXB0b3IgfSBmcm9tICcuL0dsUmVuZGVyVGFyZ2V0QWRhcHRvci5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsUmVuZGVyVGFyZ2V0U3lzdGVtIGV4dGVuZHMgUmVuZGVyVGFyZ2V0U3lzdGVtIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICBzdXBlcihyZW5kZXJlcik7XG4gICAgdGhpcy5hZGFwdG9yID0gbmV3IEdsUmVuZGVyVGFyZ2V0QWRhcHRvcigpO1xuICAgIHRoaXMuYWRhcHRvci5pbml0KHJlbmRlcmVyLCB0aGlzKTtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdsUmVuZGVyVGFyZ2V0U3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW0V4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW1dLFxuICBuYW1lOiBcInJlbmRlclRhcmdldFwiXG59O1xuXG5leHBvcnQgeyBHbFJlbmRlclRhcmdldFN5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xSZW5kZXJUYXJnZXRTeXN0ZW0ubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBJR0xVbmlmb3JtRGF0YSB7XG59XG5jbGFzcyBHbFByb2dyYW1EYXRhIHtcbiAgLyoqXG4gICAqIE1ha2VzIGEgbmV3IFBpeGkgcHJvZ3JhbS5cbiAgICogQHBhcmFtIHByb2dyYW0gLSB3ZWJnbCBwcm9ncmFtXG4gICAqIEBwYXJhbSB1bmlmb3JtRGF0YSAtIHVuaWZvcm1zXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9ncmFtLCB1bmlmb3JtRGF0YSkge1xuICAgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW07XG4gICAgdGhpcy51bmlmb3JtRGF0YSA9IHVuaWZvcm1EYXRhO1xuICAgIHRoaXMudW5pZm9ybUdyb3VwcyA9IHt9O1xuICAgIHRoaXMudW5pZm9ybURpcnR5R3JvdXBzID0ge307XG4gICAgdGhpcy51bmlmb3JtQmxvY2tCaW5kaW5ncyA9IHt9O1xuICB9XG4gIC8qKiBEZXN0cm95cyB0aGlzIHByb2dyYW0uICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy51bmlmb3JtRGF0YSA9IG51bGw7XG4gICAgdGhpcy51bmlmb3JtR3JvdXBzID0gbnVsbDtcbiAgICB0aGlzLnVuaWZvcm1EaXJ0eUdyb3VwcyA9IG51bGw7XG4gICAgdGhpcy51bmlmb3JtQmxvY2tCaW5kaW5ncyA9IG51bGw7XG4gICAgdGhpcy5wcm9ncmFtID0gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgeyBHbFByb2dyYW1EYXRhLCBJR0xVbmlmb3JtRGF0YSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xQcm9ncmFtRGF0YS5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGNvbXBpbGVTaGFkZXIoZ2wsIHR5cGUsIHNyYykge1xuICBjb25zdCBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIodHlwZSk7XG4gIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNyYyk7XG4gIGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcbiAgcmV0dXJuIHNoYWRlcjtcbn1cblxuZXhwb3J0IHsgY29tcGlsZVNoYWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGlsZVNoYWRlci5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGJvb2xlYW5BcnJheShzaXplKSB7XG4gIGNvbnN0IGFycmF5ID0gbmV3IEFycmF5KHNpemUpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgYXJyYXlbaV0gPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5mdW5jdGlvbiBkZWZhdWx0VmFsdWUodHlwZSwgc2l6ZSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwiZmxvYXRcIjpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgXCJ2ZWMyXCI6XG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSgyICogc2l6ZSk7XG4gICAgY2FzZSBcInZlYzNcIjpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDMgKiBzaXplKTtcbiAgICBjYXNlIFwidmVjNFwiOlxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoNCAqIHNpemUpO1xuICAgIGNhc2UgXCJpbnRcIjpcbiAgICBjYXNlIFwidWludFwiOlxuICAgIGNhc2UgXCJzYW1wbGVyMkRcIjpcbiAgICBjYXNlIFwic2FtcGxlcjJEQXJyYXlcIjpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgXCJpdmVjMlwiOlxuICAgICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KDIgKiBzaXplKTtcbiAgICBjYXNlIFwiaXZlYzNcIjpcbiAgICAgIHJldHVybiBuZXcgSW50MzJBcnJheSgzICogc2l6ZSk7XG4gICAgY2FzZSBcIml2ZWM0XCI6XG4gICAgICByZXR1cm4gbmV3IEludDMyQXJyYXkoNCAqIHNpemUpO1xuICAgIGNhc2UgXCJ1dmVjMlwiOlxuICAgICAgcmV0dXJuIG5ldyBVaW50MzJBcnJheSgyICogc2l6ZSk7XG4gICAgY2FzZSBcInV2ZWMzXCI6XG4gICAgICByZXR1cm4gbmV3IFVpbnQzMkFycmF5KDMgKiBzaXplKTtcbiAgICBjYXNlIFwidXZlYzRcIjpcbiAgICAgIHJldHVybiBuZXcgVWludDMyQXJyYXkoNCAqIHNpemUpO1xuICAgIGNhc2UgXCJib29sXCI6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImJ2ZWMyXCI6XG4gICAgICByZXR1cm4gYm9vbGVhbkFycmF5KDIgKiBzaXplKTtcbiAgICBjYXNlIFwiYnZlYzNcIjpcbiAgICAgIHJldHVybiBib29sZWFuQXJyYXkoMyAqIHNpemUpO1xuICAgIGNhc2UgXCJidmVjNFwiOlxuICAgICAgcmV0dXJuIGJvb2xlYW5BcnJheSg0ICogc2l6ZSk7XG4gICAgY2FzZSBcIm1hdDJcIjpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMVxuICAgICAgXSk7XG4gICAgY2FzZSBcIm1hdDNcIjpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMVxuICAgICAgXSk7XG4gICAgY2FzZSBcIm1hdDRcIjpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMVxuICAgICAgXSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCB7IGRlZmF1bHRWYWx1ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdFZhbHVlLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xubGV0IEdMX1RBQkxFID0gbnVsbDtcbmNvbnN0IEdMX1RPX0dMU0xfVFlQRVMgPSB7XG4gIEZMT0FUOiBcImZsb2F0XCIsXG4gIEZMT0FUX1ZFQzI6IFwidmVjMlwiLFxuICBGTE9BVF9WRUMzOiBcInZlYzNcIixcbiAgRkxPQVRfVkVDNDogXCJ2ZWM0XCIsXG4gIElOVDogXCJpbnRcIixcbiAgSU5UX1ZFQzI6IFwiaXZlYzJcIixcbiAgSU5UX1ZFQzM6IFwiaXZlYzNcIixcbiAgSU5UX1ZFQzQ6IFwiaXZlYzRcIixcbiAgVU5TSUdORURfSU5UOiBcInVpbnRcIixcbiAgVU5TSUdORURfSU5UX1ZFQzI6IFwidXZlYzJcIixcbiAgVU5TSUdORURfSU5UX1ZFQzM6IFwidXZlYzNcIixcbiAgVU5TSUdORURfSU5UX1ZFQzQ6IFwidXZlYzRcIixcbiAgQk9PTDogXCJib29sXCIsXG4gIEJPT0xfVkVDMjogXCJidmVjMlwiLFxuICBCT09MX1ZFQzM6IFwiYnZlYzNcIixcbiAgQk9PTF9WRUM0OiBcImJ2ZWM0XCIsXG4gIEZMT0FUX01BVDI6IFwibWF0MlwiLFxuICBGTE9BVF9NQVQzOiBcIm1hdDNcIixcbiAgRkxPQVRfTUFUNDogXCJtYXQ0XCIsXG4gIFNBTVBMRVJfMkQ6IFwic2FtcGxlcjJEXCIsXG4gIElOVF9TQU1QTEVSXzJEOiBcInNhbXBsZXIyRFwiLFxuICBVTlNJR05FRF9JTlRfU0FNUExFUl8yRDogXCJzYW1wbGVyMkRcIixcbiAgU0FNUExFUl9DVUJFOiBcInNhbXBsZXJDdWJlXCIsXG4gIElOVF9TQU1QTEVSX0NVQkU6IFwic2FtcGxlckN1YmVcIixcbiAgVU5TSUdORURfSU5UX1NBTVBMRVJfQ1VCRTogXCJzYW1wbGVyQ3ViZVwiLFxuICBTQU1QTEVSXzJEX0FSUkFZOiBcInNhbXBsZXIyREFycmF5XCIsXG4gIElOVF9TQU1QTEVSXzJEX0FSUkFZOiBcInNhbXBsZXIyREFycmF5XCIsXG4gIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEX0FSUkFZOiBcInNhbXBsZXIyREFycmF5XCJcbn07XG5jb25zdCBHTFNMX1RPX1ZFUlRFWF9UWVBFUyA9IHtcbiAgZmxvYXQ6IFwiZmxvYXQzMlwiLFxuICB2ZWMyOiBcImZsb2F0MzJ4MlwiLFxuICB2ZWMzOiBcImZsb2F0MzJ4M1wiLFxuICB2ZWM0OiBcImZsb2F0MzJ4NFwiLFxuICBpbnQ6IFwic2ludDMyXCIsXG4gIGl2ZWMyOiBcInNpbnQzMngyXCIsXG4gIGl2ZWMzOiBcInNpbnQzMngzXCIsXG4gIGl2ZWM0OiBcInNpbnQzMng0XCIsXG4gIHVpbnQ6IFwidWludDMyXCIsXG4gIHV2ZWMyOiBcInVpbnQzMngyXCIsXG4gIHV2ZWMzOiBcInVpbnQzMngzXCIsXG4gIHV2ZWM0OiBcInVpbnQzMng0XCIsXG4gIGJvb2w6IFwidWludDMyXCIsXG4gIGJ2ZWMyOiBcInVpbnQzMngyXCIsXG4gIGJ2ZWMzOiBcInVpbnQzMngzXCIsXG4gIGJ2ZWM0OiBcInVpbnQzMng0XCJcbn07XG5mdW5jdGlvbiBtYXBUeXBlKGdsLCB0eXBlKSB7XG4gIGlmICghR0xfVEFCTEUpIHtcbiAgICBjb25zdCB0eXBlTmFtZXMgPSBPYmplY3Qua2V5cyhHTF9UT19HTFNMX1RZUEVTKTtcbiAgICBHTF9UQUJMRSA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHlwZU5hbWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCB0biA9IHR5cGVOYW1lc1tpXTtcbiAgICAgIEdMX1RBQkxFW2dsW3RuXV0gPSBHTF9UT19HTFNMX1RZUEVTW3RuXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIEdMX1RBQkxFW3R5cGVdO1xufVxuZnVuY3Rpb24gbWFwR2xUb1ZlcnRleEZvcm1hdChnbCwgdHlwZSkge1xuICBjb25zdCB0eXBlVmFsdWUgPSBtYXBUeXBlKGdsLCB0eXBlKTtcbiAgcmV0dXJuIEdMU0xfVE9fVkVSVEVYX1RZUEVTW3R5cGVWYWx1ZV0gfHwgXCJmbG9hdDMyXCI7XG59XG5cbmV4cG9ydCB7IG1hcEdsVG9WZXJ0ZXhGb3JtYXQsIG1hcFR5cGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcFR5cGUubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBsb2dQcmV0dHlTaGFkZXJFcnJvcihnbCwgc2hhZGVyKSB7XG4gIGNvbnN0IHNoYWRlclNyYyA9IGdsLmdldFNoYWRlclNvdXJjZShzaGFkZXIpLnNwbGl0KFwiXFxuXCIpLm1hcCgobGluZSwgaW5kZXgpID0+IGAke2luZGV4fTogJHtsaW5lfWApO1xuICBjb25zdCBzaGFkZXJMb2cgPSBnbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcik7XG4gIGNvbnN0IHNwbGl0U2hhZGVyID0gc2hhZGVyTG9nLnNwbGl0KFwiXFxuXCIpO1xuICBjb25zdCBkZWR1cGUgPSB7fTtcbiAgY29uc3QgbGluZU51bWJlcnMgPSBzcGxpdFNoYWRlci5tYXAoKGxpbmUpID0+IHBhcnNlRmxvYXQobGluZS5yZXBsYWNlKC9eRVJST1JcXDogMFxcOihbXFxkXSspXFw6LiokLywgXCIkMVwiKSkpLmZpbHRlcigobikgPT4ge1xuICAgIGlmIChuICYmICFkZWR1cGVbbl0pIHtcbiAgICAgIGRlZHVwZVtuXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbiAgY29uc3QgbG9nQXJncyA9IFtcIlwiXTtcbiAgbGluZU51bWJlcnMuZm9yRWFjaCgobnVtYmVyKSA9PiB7XG4gICAgc2hhZGVyU3JjW251bWJlciAtIDFdID0gYCVjJHtzaGFkZXJTcmNbbnVtYmVyIC0gMV19JWNgO1xuICAgIGxvZ0FyZ3MucHVzaChcImJhY2tncm91bmQ6ICNGRjAwMDA7IGNvbG9yOiNGRkZGRkY7IGZvbnQtc2l6ZTogMTBweFwiLCBcImZvbnQtc2l6ZTogMTBweFwiKTtcbiAgfSk7XG4gIGNvbnN0IGZyYWdtZW50U291cmNlVG9Mb2cgPSBzaGFkZXJTcmMuam9pbihcIlxcblwiKTtcbiAgbG9nQXJnc1swXSA9IGZyYWdtZW50U291cmNlVG9Mb2c7XG4gIGNvbnNvbGUuZXJyb3Ioc2hhZGVyTG9nKTtcbiAgY29uc29sZS5ncm91cENvbGxhcHNlZChcImNsaWNrIHRvIHZpZXcgZnVsbCBzaGFkZXIgY29kZVwiKTtcbiAgY29uc29sZS53YXJuKC4uLmxvZ0FyZ3MpO1xuICBjb25zb2xlLmdyb3VwRW5kKCk7XG59XG5mdW5jdGlvbiBsb2dQcm9ncmFtRXJyb3IoZ2wsIHByb2dyYW0sIHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXIpIHtcbiAgaWYgKCFnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkxJTktfU1RBVFVTKSkge1xuICAgIGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHZlcnRleFNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG4gICAgICBsb2dQcmV0dHlTaGFkZXJFcnJvcihnbCwgdmVydGV4U2hhZGVyKTtcbiAgICB9XG4gICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoZnJhZ21lbnRTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuICAgICAgbG9nUHJldHR5U2hhZGVyRXJyb3IoZ2wsIGZyYWdtZW50U2hhZGVyKTtcbiAgICB9XG4gICAgY29uc29sZS5lcnJvcihcIlBpeGlKUyBFcnJvcjogQ291bGQgbm90IGluaXRpYWxpemUgc2hhZGVyLlwiKTtcbiAgICBpZiAoZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSkgIT09IFwiXCIpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlBpeGlKUyBXYXJuaW5nOiBnbC5nZXRQcm9ncmFtSW5mb0xvZygpXCIsIGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgbG9nUHJvZ3JhbUVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dQcm9ncmFtRXJyb3IubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVTaGFkZXJTeW5jQ29kZSB9IGZyb20gJy4vR2VuZXJhdGVTaGFkZXJTeW5jQ29kZS5tanMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVQcm9ncmFtIH0gZnJvbSAnLi9wcm9ncmFtL2dlbmVyYXRlUHJvZ3JhbS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IGRlZmF1bHRTeW5jRGF0YSA9IHtcbiAgdGV4dHVyZUNvdW50OiAwLFxuICBibG9ja0luZGV4OiAwXG59O1xuY2xhc3MgR2xTaGFkZXJTeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICB0aGlzLl9hY3RpdmVQcm9ncmFtID0gbnVsbDtcbiAgICB0aGlzLl9wcm9ncmFtRGF0YUhhc2ggPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9zaGFkZXJTeW5jRnVuY3Rpb25zID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXJhYmxlR0MuYWRkTWFuYWdlZEhhc2godGhpcywgXCJfcHJvZ3JhbURhdGFIYXNoXCIpO1xuICB9XG4gIGNvbnRleHRDaGFuZ2UoZ2wpIHtcbiAgICB0aGlzLl9nbCA9IGdsO1xuICAgIHRoaXMuX3Byb2dyYW1EYXRhSGFzaCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX3NoYWRlclN5bmNGdW5jdGlvbnMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9hY3RpdmVQcm9ncmFtID0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQ2hhbmdlcyB0aGUgY3VycmVudCBzaGFkZXIgdG8gdGhlIG9uZSBnaXZlbiBpbiBwYXJhbWV0ZXIuXG4gICAqIEBwYXJhbSBzaGFkZXIgLSB0aGUgbmV3IHNoYWRlclxuICAgKiBAcGFyYW0gc2tpcFN5bmMgLSBmYWxzZSBpZiB0aGUgc2hhZGVyIHNob3VsZCBhdXRvbWF0aWNhbGx5IHN5bmMgaXRzIHVuaWZvcm1zLlxuICAgKiBAcmV0dXJucyB0aGUgZ2xQcm9ncmFtIHRoYXQgYmVsb25ncyB0byB0aGUgc2hhZGVyLlxuICAgKi9cbiAgYmluZChzaGFkZXIsIHNraXBTeW5jKSB7XG4gICAgdGhpcy5fc2V0UHJvZ3JhbShzaGFkZXIuZ2xQcm9ncmFtKTtcbiAgICBpZiAoc2tpcFN5bmMpXG4gICAgICByZXR1cm47XG4gICAgZGVmYXVsdFN5bmNEYXRhLnRleHR1cmVDb3VudCA9IDA7XG4gICAgZGVmYXVsdFN5bmNEYXRhLmJsb2NrSW5kZXggPSAwO1xuICAgIGxldCBzeW5jRnVuY3Rpb24gPSB0aGlzLl9zaGFkZXJTeW5jRnVuY3Rpb25zW3NoYWRlci5nbFByb2dyYW0uX2tleV07XG4gICAgaWYgKCFzeW5jRnVuY3Rpb24pIHtcbiAgICAgIHN5bmNGdW5jdGlvbiA9IHRoaXMuX3NoYWRlclN5bmNGdW5jdGlvbnNbc2hhZGVyLmdsUHJvZ3JhbS5fa2V5XSA9IHRoaXMuX2dlbmVyYXRlU2hhZGVyU3luYyhzaGFkZXIsIHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLl9yZW5kZXJlci5idWZmZXIubmV4dEJpbmRCYXNlKCEhc2hhZGVyLmdsUHJvZ3JhbS50cmFuc2Zvcm1GZWVkYmFja1ZhcnlpbmdzKTtcbiAgICBzeW5jRnVuY3Rpb24odGhpcy5fcmVuZGVyZXIsIHNoYWRlciwgZGVmYXVsdFN5bmNEYXRhKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgdW5pZm9ybSBncm91cC5cbiAgICogQHBhcmFtIHVuaWZvcm1Hcm91cCAtIHRoZSB1bmlmb3JtIGdyb3VwIHRvIHVwZGF0ZVxuICAgKi9cbiAgdXBkYXRlVW5pZm9ybUdyb3VwKHVuaWZvcm1Hcm91cCkge1xuICAgIHRoaXMuX3JlbmRlcmVyLnVuaWZvcm1Hcm91cC51cGRhdGVVbmlmb3JtR3JvdXAodW5pZm9ybUdyb3VwLCB0aGlzLl9hY3RpdmVQcm9ncmFtLCBkZWZhdWx0U3luY0RhdGEpO1xuICB9XG4gIC8qKlxuICAgKiBCaW5kcyBhIHVuaWZvcm0gYmxvY2sgdG8gdGhlIHNoYWRlci5cbiAgICogQHBhcmFtIHVuaWZvcm1Hcm91cCAtIHRoZSB1bmlmb3JtIGdyb3VwIHRvIGJpbmRcbiAgICogQHBhcmFtIG5hbWUgLSB0aGUgbmFtZSBvZiB0aGUgdW5pZm9ybSBibG9ja1xuICAgKiBAcGFyYW0gaW5kZXggLSB0aGUgaW5kZXggb2YgdGhlIHVuaWZvcm0gYmxvY2tcbiAgICovXG4gIGJpbmRVbmlmb3JtQmxvY2sodW5pZm9ybUdyb3VwLCBuYW1lLCBpbmRleCA9IDApIHtcbiAgICBjb25zdCBidWZmZXJTeXN0ZW0gPSB0aGlzLl9yZW5kZXJlci5idWZmZXI7XG4gICAgY29uc3QgcHJvZ3JhbURhdGEgPSB0aGlzLl9nZXRQcm9ncmFtRGF0YSh0aGlzLl9hY3RpdmVQcm9ncmFtKTtcbiAgICBjb25zdCBpc0J1ZmZlclJlc291cmNlID0gdW5pZm9ybUdyb3VwLl9idWZmZXJSZXNvdXJjZTtcbiAgICBpZiAoIWlzQnVmZmVyUmVzb3VyY2UpIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnViby51cGRhdGVVbmlmb3JtR3JvdXAodW5pZm9ybUdyb3VwKTtcbiAgICB9XG4gICAgY29uc3QgYnVmZmVyID0gdW5pZm9ybUdyb3VwLmJ1ZmZlcjtcbiAgICBjb25zdCBnbEJ1ZmZlciA9IGJ1ZmZlclN5c3RlbS51cGRhdGVCdWZmZXIoYnVmZmVyKTtcbiAgICBjb25zdCBib3VuZExvY2F0aW9uID0gYnVmZmVyU3lzdGVtLmZyZWVMb2NhdGlvbkZvckJ1ZmZlckJhc2UoZ2xCdWZmZXIpO1xuICAgIGlmIChpc0J1ZmZlclJlc291cmNlKSB7XG4gICAgICBjb25zdCB7IG9mZnNldCwgc2l6ZSB9ID0gdW5pZm9ybUdyb3VwO1xuICAgICAgaWYgKG9mZnNldCA9PT0gMCAmJiBzaXplID09PSBidWZmZXIuZGF0YS5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIGJ1ZmZlclN5c3RlbS5iaW5kQnVmZmVyQmFzZShnbEJ1ZmZlciwgYm91bmRMb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBidWZmZXJTeXN0ZW0uYmluZEJ1ZmZlclJhbmdlKGdsQnVmZmVyLCBib3VuZExvY2F0aW9uLCBvZmZzZXQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYnVmZmVyU3lzdGVtLmdldExhc3RCaW5kQmFzZUxvY2F0aW9uKGdsQnVmZmVyKSAhPT0gYm91bmRMb2NhdGlvbikge1xuICAgICAgYnVmZmVyU3lzdGVtLmJpbmRCdWZmZXJCYXNlKGdsQnVmZmVyLCBib3VuZExvY2F0aW9uKTtcbiAgICB9XG4gICAgY29uc3QgdW5pZm9ybUJsb2NrSW5kZXggPSB0aGlzLl9hY3RpdmVQcm9ncmFtLl91bmlmb3JtQmxvY2tEYXRhW25hbWVdLmluZGV4O1xuICAgIGlmIChwcm9ncmFtRGF0YS51bmlmb3JtQmxvY2tCaW5kaW5nc1tpbmRleF0gPT09IGJvdW5kTG9jYXRpb24pXG4gICAgICByZXR1cm47XG4gICAgcHJvZ3JhbURhdGEudW5pZm9ybUJsb2NrQmluZGluZ3NbaW5kZXhdID0gYm91bmRMb2NhdGlvbjtcbiAgICB0aGlzLl9yZW5kZXJlci5nbC51bmlmb3JtQmxvY2tCaW5kaW5nKHByb2dyYW1EYXRhLnByb2dyYW0sIHVuaWZvcm1CbG9ja0luZGV4LCBib3VuZExvY2F0aW9uKTtcbiAgfVxuICBfc2V0UHJvZ3JhbShwcm9ncmFtKSB7XG4gICAgaWYgKHRoaXMuX2FjdGl2ZVByb2dyYW0gPT09IHByb2dyYW0pXG4gICAgICByZXR1cm47XG4gICAgdGhpcy5fYWN0aXZlUHJvZ3JhbSA9IHByb2dyYW07XG4gICAgY29uc3QgcHJvZ3JhbURhdGEgPSB0aGlzLl9nZXRQcm9ncmFtRGF0YShwcm9ncmFtKTtcbiAgICB0aGlzLl9nbC51c2VQcm9ncmFtKHByb2dyYW1EYXRhLnByb2dyYW0pO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0gcHJvZ3JhbSAtIHRoZSBwcm9ncmFtIHRvIGdldCB0aGUgZGF0YSBmb3JcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfZ2V0UHJvZ3JhbURhdGEocHJvZ3JhbSkge1xuICAgIHJldHVybiB0aGlzLl9wcm9ncmFtRGF0YUhhc2hbcHJvZ3JhbS5fa2V5XSB8fCB0aGlzLl9jcmVhdGVQcm9ncmFtRGF0YShwcm9ncmFtKTtcbiAgfVxuICBfY3JlYXRlUHJvZ3JhbURhdGEocHJvZ3JhbSkge1xuICAgIGNvbnN0IGtleSA9IHByb2dyYW0uX2tleTtcbiAgICB0aGlzLl9wcm9ncmFtRGF0YUhhc2hba2V5XSA9IGdlbmVyYXRlUHJvZ3JhbSh0aGlzLl9nbCwgcHJvZ3JhbSk7XG4gICAgcmV0dXJuIHRoaXMuX3Byb2dyYW1EYXRhSGFzaFtrZXldO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5fcHJvZ3JhbURhdGFIYXNoKSkge1xuICAgICAgY29uc3QgcHJvZ3JhbURhdGEgPSB0aGlzLl9wcm9ncmFtRGF0YUhhc2hba2V5XTtcbiAgICAgIHByb2dyYW1EYXRhLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuX3Byb2dyYW1EYXRhSGFzaFtrZXldID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5fcHJvZ3JhbURhdGFIYXNoID0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIGV4ZWN1dGVkIHRoYXQgd2lsbCBzeW5jIHRoZSBzaGFkZXIgYXMgZWZmaWNpZW50bHkgYXMgcG9zc2libGUuXG4gICAqIE92ZXJyaWRkZW4gYnkgdGhlIHVuc2FmZSBldmFsIHBhY2thZ2UgaWYgeW91IGRvbid0IHdhbnQgZXZhbCB1c2VkIGluIHlvdXIgcHJvamVjdC5cbiAgICogQHBhcmFtIHNoYWRlciAtIHRoZSBzaGFkZXIgdG8gZ2VuZXJhdGUgdGhlIHN5bmMgZnVuY3Rpb24gZm9yXG4gICAqIEBwYXJhbSBzaGFkZXJTeXN0ZW0gLSB0aGUgc2hhZGVyIHN5c3RlbSB0byB1c2VcbiAgICogQHJldHVybnMgLSB0aGUgZ2VuZXJhdGVkIHN5bmMgZnVuY3Rpb25cbiAgICogQGlnbm9yZVxuICAgKi9cbiAgX2dlbmVyYXRlU2hhZGVyU3luYyhzaGFkZXIsIHNoYWRlclN5c3RlbSkge1xuICAgIHJldHVybiBnZW5lcmF0ZVNoYWRlclN5bmNDb2RlKHNoYWRlciwgc2hhZGVyU3lzdGVtKTtcbiAgfVxuICByZXNldFN0YXRlKCkge1xuICAgIHRoaXMuX2FjdGl2ZVByb2dyYW0gPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR2xTaGFkZXJTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbVxuICBdLFxuICBuYW1lOiBcInNoYWRlclwiXG59O1xuXG5leHBvcnQgeyBHbFNoYWRlclN5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xTaGFkZXJTeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxzL2xvZ2dpbmcvd2Fybi5tanMnO1xuaW1wb3J0IHsgR2xQcm9ncmFtRGF0YSB9IGZyb20gJy4uL0dsUHJvZ3JhbURhdGEubWpzJztcbmltcG9ydCB7IGNvbXBpbGVTaGFkZXIgfSBmcm9tICcuL2NvbXBpbGVTaGFkZXIubWpzJztcbmltcG9ydCB7IGRlZmF1bHRWYWx1ZSB9IGZyb20gJy4vZGVmYXVsdFZhbHVlLm1qcyc7XG5pbXBvcnQgeyBleHRyYWN0QXR0cmlidXRlc0Zyb21HbFByb2dyYW0gfSBmcm9tICcuL2V4dHJhY3RBdHRyaWJ1dGVzRnJvbUdsUHJvZ3JhbS5tanMnO1xuaW1wb3J0IHsgZ2V0VWJvRGF0YSB9IGZyb20gJy4vZ2V0VWJvRGF0YS5tanMnO1xuaW1wb3J0IHsgZ2V0VW5pZm9ybURhdGEgfSBmcm9tICcuL2dldFVuaWZvcm1EYXRhLm1qcyc7XG5pbXBvcnQgeyBsb2dQcm9ncmFtRXJyb3IgfSBmcm9tICcuL2xvZ1Byb2dyYW1FcnJvci5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGdlbmVyYXRlUHJvZ3JhbShnbCwgcHJvZ3JhbSkge1xuICBjb25zdCBnbFZlcnRTaGFkZXIgPSBjb21waWxlU2hhZGVyKGdsLCBnbC5WRVJURVhfU0hBREVSLCBwcm9ncmFtLnZlcnRleCk7XG4gIGNvbnN0IGdsRnJhZ1NoYWRlciA9IGNvbXBpbGVTaGFkZXIoZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgcHJvZ3JhbS5mcmFnbWVudCk7XG4gIGNvbnN0IHdlYkdMUHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgZ2wuYXR0YWNoU2hhZGVyKHdlYkdMUHJvZ3JhbSwgZ2xWZXJ0U2hhZGVyKTtcbiAgZ2wuYXR0YWNoU2hhZGVyKHdlYkdMUHJvZ3JhbSwgZ2xGcmFnU2hhZGVyKTtcbiAgY29uc3QgdHJhbnNmb3JtRmVlZGJhY2tWYXJ5aW5ncyA9IHByb2dyYW0udHJhbnNmb3JtRmVlZGJhY2tWYXJ5aW5ncztcbiAgaWYgKHRyYW5zZm9ybUZlZWRiYWNrVmFyeWluZ3MpIHtcbiAgICBpZiAodHlwZW9mIGdsLnRyYW5zZm9ybUZlZWRiYWNrVmFyeWluZ3MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgd2FybihgVHJhbnNmb3JtRmVlZGJhY2sgaXMgbm90IHN1cHBvcnRlZCBidXQgVHJhbnNmb3JtRmVlZGJhY2tWYXJ5aW5ncyBhcmUgZ2l2ZW4uYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsLnRyYW5zZm9ybUZlZWRiYWNrVmFyeWluZ3MoXG4gICAgICAgIHdlYkdMUHJvZ3JhbSxcbiAgICAgICAgdHJhbnNmb3JtRmVlZGJhY2tWYXJ5aW5ncy5uYW1lcyxcbiAgICAgICAgdHJhbnNmb3JtRmVlZGJhY2tWYXJ5aW5ncy5idWZmZXJNb2RlID09PSBcInNlcGFyYXRlXCIgPyBnbC5TRVBBUkFURV9BVFRSSUJTIDogZ2wuSU5URVJMRUFWRURfQVRUUklCU1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgZ2wubGlua1Byb2dyYW0od2ViR0xQcm9ncmFtKTtcbiAgaWYgKCFnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHdlYkdMUHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMpKSB7XG4gICAgbG9nUHJvZ3JhbUVycm9yKGdsLCB3ZWJHTFByb2dyYW0sIGdsVmVydFNoYWRlciwgZ2xGcmFnU2hhZGVyKTtcbiAgfVxuICBwcm9ncmFtLl9hdHRyaWJ1dGVEYXRhID0gZXh0cmFjdEF0dHJpYnV0ZXNGcm9tR2xQcm9ncmFtKFxuICAgIHdlYkdMUHJvZ3JhbSxcbiAgICBnbCxcbiAgICAhL15bIFxcdF0qI1sgXFx0XSp2ZXJzaW9uWyBcXHRdKzMwMFsgXFx0XStlc1sgXFx0XSokL20udGVzdChwcm9ncmFtLnZlcnRleClcbiAgKTtcbiAgcHJvZ3JhbS5fdW5pZm9ybURhdGEgPSBnZXRVbmlmb3JtRGF0YSh3ZWJHTFByb2dyYW0sIGdsKTtcbiAgcHJvZ3JhbS5fdW5pZm9ybUJsb2NrRGF0YSA9IGdldFVib0RhdGEod2ViR0xQcm9ncmFtLCBnbCk7XG4gIGdsLmRlbGV0ZVNoYWRlcihnbFZlcnRTaGFkZXIpO1xuICBnbC5kZWxldGVTaGFkZXIoZ2xGcmFnU2hhZGVyKTtcbiAgY29uc3QgdW5pZm9ybURhdGEgPSB7fTtcbiAgZm9yIChjb25zdCBpIGluIHByb2dyYW0uX3VuaWZvcm1EYXRhKSB7XG4gICAgY29uc3QgZGF0YSA9IHByb2dyYW0uX3VuaWZvcm1EYXRhW2ldO1xuICAgIHVuaWZvcm1EYXRhW2ldID0ge1xuICAgICAgbG9jYXRpb246IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih3ZWJHTFByb2dyYW0sIGkpLFxuICAgICAgdmFsdWU6IGRlZmF1bHRWYWx1ZShkYXRhLnR5cGUsIGRhdGEuc2l6ZSlcbiAgICB9O1xuICB9XG4gIGNvbnN0IGdsUHJvZ3JhbSA9IG5ldyBHbFByb2dyYW1EYXRhKHdlYkdMUHJvZ3JhbSwgdW5pZm9ybURhdGEpO1xuICByZXR1cm4gZ2xQcm9ncmFtO1xufVxuXG5leHBvcnQgeyBnZW5lcmF0ZVByb2dyYW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyYXRlUHJvZ3JhbS5tanMubWFwXG4iLCJpbXBvcnQgeyBnZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdCB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9nZW9tZXRyeS91dGlscy9nZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdC5tanMnO1xuaW1wb3J0IHsgbWFwR2xUb1ZlcnRleEZvcm1hdCB9IGZyb20gJy4vbWFwVHlwZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGV4dHJhY3RBdHRyaWJ1dGVzRnJvbUdsUHJvZ3JhbShwcm9ncmFtLCBnbCwgc29ydEF0dHJpYnV0ZXMgPSBmYWxzZSkge1xuICBjb25zdCBhdHRyaWJ1dGVzID0ge307XG4gIGNvbnN0IHRvdGFsQXR0cmlidXRlcyA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuQUNUSVZFX0FUVFJJQlVURVMpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsQXR0cmlidXRlczsgaSsrKSB7XG4gICAgY29uc3QgYXR0cmliRGF0YSA9IGdsLmdldEFjdGl2ZUF0dHJpYihwcm9ncmFtLCBpKTtcbiAgICBpZiAoYXR0cmliRGF0YS5uYW1lLnN0YXJ0c1dpdGgoXCJnbF9cIikpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBmb3JtYXQgPSBtYXBHbFRvVmVydGV4Rm9ybWF0KGdsLCBhdHRyaWJEYXRhLnR5cGUpO1xuICAgIGF0dHJpYnV0ZXNbYXR0cmliRGF0YS5uYW1lXSA9IHtcbiAgICAgIGxvY2F0aW9uOiAwLFxuICAgICAgLy8gc2V0IGZ1cnRoZXIgZG93bi4uXG4gICAgICBmb3JtYXQsXG4gICAgICBzdHJpZGU6IGdldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0KGZvcm1hdCkuc3RyaWRlLFxuICAgICAgb2Zmc2V0OiAwLFxuICAgICAgaW5zdGFuY2U6IGZhbHNlLFxuICAgICAgc3RhcnQ6IDBcbiAgICB9O1xuICB9XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKTtcbiAgaWYgKHNvcnRBdHRyaWJ1dGVzKSB7XG4gICAga2V5cy5zb3J0KChhLCBiKSA9PiBhID4gYiA/IDEgOiAtMSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhdHRyaWJ1dGVzW2tleXNbaV1dLmxvY2F0aW9uID0gaTtcbiAgICAgIGdsLmJpbmRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCBpLCBrZXlzW2ldKTtcbiAgICB9XG4gICAgZ2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhdHRyaWJ1dGVzW2tleXNbaV1dLmxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwga2V5c1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhdHRyaWJ1dGVzO1xufVxuXG5leHBvcnQgeyBleHRyYWN0QXR0cmlidXRlc0Zyb21HbFByb2dyYW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4dHJhY3RBdHRyaWJ1dGVzRnJvbUdsUHJvZ3JhbS5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZhdWx0VmFsdWUgfSBmcm9tICcuL2RlZmF1bHRWYWx1ZS5tanMnO1xuaW1wb3J0IHsgbWFwVHlwZSB9IGZyb20gJy4vbWFwVHlwZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGdldFVuaWZvcm1EYXRhKHByb2dyYW0sIGdsKSB7XG4gIGNvbnN0IHVuaWZvcm1zID0ge307XG4gIGNvbnN0IHRvdGFsVW5pZm9ybXMgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkFDVElWRV9VTklGT1JNUyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdG90YWxVbmlmb3JtczsgaSsrKSB7XG4gICAgY29uc3QgdW5pZm9ybURhdGEgPSBnbC5nZXRBY3RpdmVVbmlmb3JtKHByb2dyYW0sIGkpO1xuICAgIGNvbnN0IG5hbWUgPSB1bmlmb3JtRGF0YS5uYW1lLnJlcGxhY2UoL1xcWy4qP1xcXSQvLCBcIlwiKTtcbiAgICBjb25zdCBpc0FycmF5ID0gISF1bmlmb3JtRGF0YS5uYW1lLm1hdGNoKC9cXFsuKj9cXF0kLyk7XG4gICAgY29uc3QgdHlwZSA9IG1hcFR5cGUoZ2wsIHVuaWZvcm1EYXRhLnR5cGUpO1xuICAgIHVuaWZvcm1zW25hbWVdID0ge1xuICAgICAgbmFtZSxcbiAgICAgIGluZGV4OiBpLFxuICAgICAgdHlwZSxcbiAgICAgIHNpemU6IHVuaWZvcm1EYXRhLnNpemUsXG4gICAgICBpc0FycmF5LFxuICAgICAgdmFsdWU6IGRlZmF1bHRWYWx1ZSh0eXBlLCB1bmlmb3JtRGF0YS5zaXplKVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHVuaWZvcm1zO1xufVxuXG5leHBvcnQgeyBnZXRVbmlmb3JtRGF0YSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0VW5pZm9ybURhdGEubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBnZXRVYm9EYXRhKHByb2dyYW0sIGdsKSB7XG4gIGlmICghZ2wuQUNUSVZFX1VOSUZPUk1fQkxPQ0tTKVxuICAgIHJldHVybiB7fTtcbiAgY29uc3QgdW5pZm9ybUJsb2NrcyA9IHt9O1xuICBjb25zdCB0b3RhbFVuaWZvcm1zQmxvY2tzID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STV9CTE9DS1MpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsVW5pZm9ybXNCbG9ja3M7IGkrKykge1xuICAgIGNvbnN0IG5hbWUgPSBnbC5nZXRBY3RpdmVVbmlmb3JtQmxvY2tOYW1lKHByb2dyYW0sIGkpO1xuICAgIGNvbnN0IHVuaWZvcm1CbG9ja0luZGV4ID0gZ2wuZ2V0VW5pZm9ybUJsb2NrSW5kZXgocHJvZ3JhbSwgbmFtZSk7XG4gICAgY29uc3Qgc2l6ZSA9IGdsLmdldEFjdGl2ZVVuaWZvcm1CbG9ja1BhcmFtZXRlcihwcm9ncmFtLCBpLCBnbC5VTklGT1JNX0JMT0NLX0RBVEFfU0laRSk7XG4gICAgdW5pZm9ybUJsb2Nrc1tuYW1lXSA9IHtcbiAgICAgIG5hbWUsXG4gICAgICBpbmRleDogdW5pZm9ybUJsb2NrSW5kZXgsXG4gICAgICBzaXplXG4gICAgfTtcbiAgfVxuICByZXR1cm4gdW5pZm9ybUJsb2Nrcztcbn1cblxuZXhwb3J0IHsgZ2V0VWJvRGF0YSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0VWJvRGF0YS5tanMubWFwXG4iLCJpbXBvcnQgeyBCdWZmZXJSZXNvdXJjZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9idWZmZXIvQnVmZmVyUmVzb3VyY2UubWpzJztcbmltcG9ydCB7IFVuaWZvcm1Hcm91cCB9IGZyb20gJy4uLy4uL3NoYXJlZC9zaGFkZXIvVW5pZm9ybUdyb3VwLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlU291cmNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3RleHR1cmUvc291cmNlcy9UZXh0dXJlU291cmNlLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZ2VuZXJhdGVTaGFkZXJTeW5jQ29kZShzaGFkZXIsIHNoYWRlclN5c3RlbSkge1xuICBjb25zdCBmdW5jRnJhZ21lbnRzID0gW107XG4gIGNvbnN0IGhlYWRlckZyYWdtZW50cyA9IFtgXG4gICAgICAgIHZhciBnID0gcy5ncm91cHM7XG4gICAgICAgIHZhciBzUyA9IHIuc2hhZGVyO1xuICAgICAgICB2YXIgcCA9IHMuZ2xQcm9ncmFtO1xuICAgICAgICB2YXIgdWdTID0gci51bmlmb3JtR3JvdXA7XG4gICAgICAgIHZhciByZXNvdXJjZXM7XG4gICAgYF07XG4gIGxldCBhZGRlZFRleHRyZVN5c3RlbSA9IGZhbHNlO1xuICBsZXQgdGV4dHVyZUNvdW50ID0gMDtcbiAgY29uc3QgcHJvZ3JhbURhdGEgPSBzaGFkZXJTeXN0ZW0uX2dldFByb2dyYW1EYXRhKHNoYWRlci5nbFByb2dyYW0pO1xuICBmb3IgKGNvbnN0IGkgaW4gc2hhZGVyLmdyb3Vwcykge1xuICAgIGNvbnN0IGdyb3VwID0gc2hhZGVyLmdyb3Vwc1tpXTtcbiAgICBmdW5jRnJhZ21lbnRzLnB1c2goYFxuICAgICAgICAgICAgcmVzb3VyY2VzID0gZ1ske2l9XS5yZXNvdXJjZXM7XG4gICAgICAgIGApO1xuICAgIGZvciAoY29uc3QgaiBpbiBncm91cC5yZXNvdXJjZXMpIHtcbiAgICAgIGNvbnN0IHJlc291cmNlID0gZ3JvdXAucmVzb3VyY2VzW2pdO1xuICAgICAgaWYgKHJlc291cmNlIGluc3RhbmNlb2YgVW5pZm9ybUdyb3VwKSB7XG4gICAgICAgIGlmIChyZXNvdXJjZS51Ym8pIHtcbiAgICAgICAgICBjb25zdCByZXNOYW1lID0gc2hhZGVyLl91bmlmb3JtQmluZE1hcFtpXVtOdW1iZXIoaildO1xuICAgICAgICAgIGZ1bmNGcmFnbWVudHMucHVzaChgXG4gICAgICAgICAgICAgICAgICAgICAgICBzUy5iaW5kVW5pZm9ybUJsb2NrKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlc1ske2p9XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJHtyZXNOYW1lfScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtzaGFkZXIuZ2xQcm9ncmFtLl91bmlmb3JtQmxvY2tEYXRhW3Jlc05hbWVdLmluZGV4fVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgYCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZnVuY0ZyYWdtZW50cy5wdXNoKGBcbiAgICAgICAgICAgICAgICAgICAgICAgIHVnUy51cGRhdGVVbmlmb3JtR3JvdXAocmVzb3VyY2VzWyR7an1dLCBwLCBzRCk7XG4gICAgICAgICAgICAgICAgICAgIGApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJlc291cmNlIGluc3RhbmNlb2YgQnVmZmVyUmVzb3VyY2UpIHtcbiAgICAgICAgY29uc3QgcmVzTmFtZSA9IHNoYWRlci5fdW5pZm9ybUJpbmRNYXBbaV1bTnVtYmVyKGopXTtcbiAgICAgICAgZnVuY0ZyYWdtZW50cy5wdXNoKGBcbiAgICAgICAgICAgICAgICAgICAgc1MuYmluZFVuaWZvcm1CbG9jayhcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlc1ske2p9XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICcke3Jlc05hbWV9JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICR7c2hhZGVyLmdsUHJvZ3JhbS5fdW5pZm9ybUJsb2NrRGF0YVtyZXNOYW1lXS5pbmRleH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBgKTtcbiAgICAgIH0gZWxzZSBpZiAocmVzb3VyY2UgaW5zdGFuY2VvZiBUZXh0dXJlU291cmNlKSB7XG4gICAgICAgIGNvbnN0IHVuaWZvcm1OYW1lID0gc2hhZGVyLl91bmlmb3JtQmluZE1hcFtpXVtqXTtcbiAgICAgICAgY29uc3QgdW5pZm9ybURhdGEgPSBwcm9ncmFtRGF0YS51bmlmb3JtRGF0YVt1bmlmb3JtTmFtZV07XG4gICAgICAgIGlmICh1bmlmb3JtRGF0YSkge1xuICAgICAgICAgIGlmICghYWRkZWRUZXh0cmVTeXN0ZW0pIHtcbiAgICAgICAgICAgIGFkZGVkVGV4dHJlU3lzdGVtID0gdHJ1ZTtcbiAgICAgICAgICAgIGhlYWRlckZyYWdtZW50cy5wdXNoKGBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0UyA9IHIudGV4dHVyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzaGFkZXJTeXN0ZW0uX2dsLnVuaWZvcm0xaSh1bmlmb3JtRGF0YS5sb2NhdGlvbiwgdGV4dHVyZUNvdW50KTtcbiAgICAgICAgICBmdW5jRnJhZ21lbnRzLnB1c2goYFxuICAgICAgICAgICAgICAgICAgICAgICAgdFMuYmluZChyZXNvdXJjZXNbJHtqfV0sICR7dGV4dHVyZUNvdW50fSk7XG4gICAgICAgICAgICAgICAgICAgIGApO1xuICAgICAgICAgIHRleHR1cmVDb3VudCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IGZ1bmN0aW9uU291cmNlID0gWy4uLmhlYWRlckZyYWdtZW50cywgLi4uZnVuY0ZyYWdtZW50c10uam9pbihcIlxcblwiKTtcbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihcInJcIiwgXCJzXCIsIFwic0RcIiwgZnVuY3Rpb25Tb3VyY2UpO1xufVxuXG5leHBvcnQgeyBnZW5lcmF0ZVNoYWRlclN5bmNDb2RlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HZW5lcmF0ZVNoYWRlclN5bmNDb2RlLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc3QgVU5JRk9STV9UT19TSU5HTEVfU0VUVEVSUyA9IHtcbiAgZjMyOiBgaWYgKGN2ICE9PSB2KSB7XG4gICAgICAgICAgICBjdS52YWx1ZSA9IHY7XG4gICAgICAgICAgICBnbC51bmlmb3JtMWYobG9jYXRpb24sIHYpO1xuICAgICAgICB9YCxcbiAgXCJ2ZWMyPGYzMj5cIjogYGlmIChjdlswXSAhPT0gdlswXSB8fCBjdlsxXSAhPT0gdlsxXSkge1xuICAgICAgICAgICAgY3ZbMF0gPSB2WzBdO1xuICAgICAgICAgICAgY3ZbMV0gPSB2WzFdO1xuICAgICAgICAgICAgZ2wudW5pZm9ybTJmKGxvY2F0aW9uLCB2WzBdLCB2WzFdKTtcbiAgICAgICAgfWAsXG4gIFwidmVjMzxmMzI+XCI6IGBpZiAoY3ZbMF0gIT09IHZbMF0gfHwgY3ZbMV0gIT09IHZbMV0gfHwgY3ZbMl0gIT09IHZbMl0pIHtcbiAgICAgICAgICAgIGN2WzBdID0gdlswXTtcbiAgICAgICAgICAgIGN2WzFdID0gdlsxXTtcbiAgICAgICAgICAgIGN2WzJdID0gdlsyXTtcbiAgICAgICAgICAgIGdsLnVuaWZvcm0zZihsb2NhdGlvbiwgdlswXSwgdlsxXSwgdlsyXSk7XG4gICAgICAgIH1gLFxuICBcInZlYzQ8ZjMyPlwiOiBgaWYgKGN2WzBdICE9PSB2WzBdIHx8IGN2WzFdICE9PSB2WzFdIHx8IGN2WzJdICE9PSB2WzJdIHx8IGN2WzNdICE9PSB2WzNdKSB7XG4gICAgICAgICAgICBjdlswXSA9IHZbMF07XG4gICAgICAgICAgICBjdlsxXSA9IHZbMV07XG4gICAgICAgICAgICBjdlsyXSA9IHZbMl07XG4gICAgICAgICAgICBjdlszXSA9IHZbM107XG4gICAgICAgICAgICBnbC51bmlmb3JtNGYobG9jYXRpb24sIHZbMF0sIHZbMV0sIHZbMl0sIHZbM10pO1xuICAgICAgICB9YCxcbiAgaTMyOiBgaWYgKGN2ICE9PSB2KSB7XG4gICAgICAgICAgICBjdS52YWx1ZSA9IHY7XG4gICAgICAgICAgICBnbC51bmlmb3JtMWkobG9jYXRpb24sIHYpO1xuICAgICAgICB9YCxcbiAgXCJ2ZWMyPGkzMj5cIjogYGlmIChjdlswXSAhPT0gdlswXSB8fCBjdlsxXSAhPT0gdlsxXSkge1xuICAgICAgICAgICAgY3ZbMF0gPSB2WzBdO1xuICAgICAgICAgICAgY3ZbMV0gPSB2WzFdO1xuICAgICAgICAgICAgZ2wudW5pZm9ybTJpKGxvY2F0aW9uLCB2WzBdLCB2WzFdKTtcbiAgICAgICAgfWAsXG4gIFwidmVjMzxpMzI+XCI6IGBpZiAoY3ZbMF0gIT09IHZbMF0gfHwgY3ZbMV0gIT09IHZbMV0gfHwgY3ZbMl0gIT09IHZbMl0pIHtcbiAgICAgICAgICAgIGN2WzBdID0gdlswXTtcbiAgICAgICAgICAgIGN2WzFdID0gdlsxXTtcbiAgICAgICAgICAgIGN2WzJdID0gdlsyXTtcbiAgICAgICAgICAgIGdsLnVuaWZvcm0zaShsb2NhdGlvbiwgdlswXSwgdlsxXSwgdlsyXSk7XG4gICAgICAgIH1gLFxuICBcInZlYzQ8aTMyPlwiOiBgaWYgKGN2WzBdICE9PSB2WzBdIHx8IGN2WzFdICE9PSB2WzFdIHx8IGN2WzJdICE9PSB2WzJdIHx8IGN2WzNdICE9PSB2WzNdKSB7XG4gICAgICAgICAgICBjdlswXSA9IHZbMF07XG4gICAgICAgICAgICBjdlsxXSA9IHZbMV07XG4gICAgICAgICAgICBjdlsyXSA9IHZbMl07XG4gICAgICAgICAgICBjdlszXSA9IHZbM107XG4gICAgICAgICAgICBnbC51bmlmb3JtNGkobG9jYXRpb24sIHZbMF0sIHZbMV0sIHZbMl0sIHZbM10pO1xuICAgICAgICB9YCxcbiAgdTMyOiBgaWYgKGN2ICE9PSB2KSB7XG4gICAgICAgICAgICBjdS52YWx1ZSA9IHY7XG4gICAgICAgICAgICBnbC51bmlmb3JtMXVpKGxvY2F0aW9uLCB2KTtcbiAgICAgICAgfWAsXG4gIFwidmVjMjx1MzI+XCI6IGBpZiAoY3ZbMF0gIT09IHZbMF0gfHwgY3ZbMV0gIT09IHZbMV0pIHtcbiAgICAgICAgICAgIGN2WzBdID0gdlswXTtcbiAgICAgICAgICAgIGN2WzFdID0gdlsxXTtcbiAgICAgICAgICAgIGdsLnVuaWZvcm0ydWkobG9jYXRpb24sIHZbMF0sIHZbMV0pO1xuICAgICAgICB9YCxcbiAgXCJ2ZWMzPHUzMj5cIjogYGlmIChjdlswXSAhPT0gdlswXSB8fCBjdlsxXSAhPT0gdlsxXSB8fCBjdlsyXSAhPT0gdlsyXSkge1xuICAgICAgICAgICAgY3ZbMF0gPSB2WzBdO1xuICAgICAgICAgICAgY3ZbMV0gPSB2WzFdO1xuICAgICAgICAgICAgY3ZbMl0gPSB2WzJdO1xuICAgICAgICAgICAgZ2wudW5pZm9ybTN1aShsb2NhdGlvbiwgdlswXSwgdlsxXSwgdlsyXSk7XG4gICAgICAgIH1gLFxuICBcInZlYzQ8dTMyPlwiOiBgaWYgKGN2WzBdICE9PSB2WzBdIHx8IGN2WzFdICE9PSB2WzFdIHx8IGN2WzJdICE9PSB2WzJdIHx8IGN2WzNdICE9PSB2WzNdKSB7XG4gICAgICAgICAgICBjdlswXSA9IHZbMF07XG4gICAgICAgICAgICBjdlsxXSA9IHZbMV07XG4gICAgICAgICAgICBjdlsyXSA9IHZbMl07XG4gICAgICAgICAgICBjdlszXSA9IHZbM107XG4gICAgICAgICAgICBnbC51bmlmb3JtNHVpKGxvY2F0aW9uLCB2WzBdLCB2WzFdLCB2WzJdLCB2WzNdKTtcbiAgICAgICAgfWAsXG4gIGJvb2w6IGBpZiAoY3YgIT09IHYpIHtcbiAgICAgICAgICAgIGN1LnZhbHVlID0gdjtcbiAgICAgICAgICAgIGdsLnVuaWZvcm0xaShsb2NhdGlvbiwgdik7XG4gICAgICAgIH1gLFxuICBcInZlYzI8Ym9vbD5cIjogYGlmIChjdlswXSAhPT0gdlswXSB8fCBjdlsxXSAhPT0gdlsxXSkge1xuICAgICAgICAgICAgY3ZbMF0gPSB2WzBdO1xuICAgICAgICAgICAgY3ZbMV0gPSB2WzFdO1xuICAgICAgICAgICAgZ2wudW5pZm9ybTJpKGxvY2F0aW9uLCB2WzBdLCB2WzFdKTtcbiAgICAgICAgfWAsXG4gIFwidmVjMzxib29sPlwiOiBgaWYgKGN2WzBdICE9PSB2WzBdIHx8IGN2WzFdICE9PSB2WzFdIHx8IGN2WzJdICE9PSB2WzJdKSB7XG4gICAgICAgICAgICBjdlswXSA9IHZbMF07XG4gICAgICAgICAgICBjdlsxXSA9IHZbMV07XG4gICAgICAgICAgICBjdlsyXSA9IHZbMl07XG4gICAgICAgICAgICBnbC51bmlmb3JtM2kobG9jYXRpb24sIHZbMF0sIHZbMV0sIHZbMl0pO1xuICAgICAgICB9YCxcbiAgXCJ2ZWM0PGJvb2w+XCI6IGBpZiAoY3ZbMF0gIT09IHZbMF0gfHwgY3ZbMV0gIT09IHZbMV0gfHwgY3ZbMl0gIT09IHZbMl0gfHwgY3ZbM10gIT09IHZbM10pIHtcbiAgICAgICAgICAgIGN2WzBdID0gdlswXTtcbiAgICAgICAgICAgIGN2WzFdID0gdlsxXTtcbiAgICAgICAgICAgIGN2WzJdID0gdlsyXTtcbiAgICAgICAgICAgIGN2WzNdID0gdlszXTtcbiAgICAgICAgICAgIGdsLnVuaWZvcm00aShsb2NhdGlvbiwgdlswXSwgdlsxXSwgdlsyXSwgdlszXSk7XG4gICAgICAgIH1gLFxuICBcIm1hdDJ4MjxmMzI+XCI6IGBnbC51bmlmb3JtTWF0cml4MmZ2KGxvY2F0aW9uLCBmYWxzZSwgdik7YCxcbiAgXCJtYXQzeDM8ZjMyPlwiOiBgZ2wudW5pZm9ybU1hdHJpeDNmdihsb2NhdGlvbiwgZmFsc2UsIHYpO2AsXG4gIFwibWF0NHg0PGYzMj5cIjogYGdsLnVuaWZvcm1NYXRyaXg0ZnYobG9jYXRpb24sIGZhbHNlLCB2KTtgXG59O1xuY29uc3QgVU5JRk9STV9UT19BUlJBWV9TRVRURVJTID0ge1xuICBmMzI6IGBnbC51bmlmb3JtMWZ2KGxvY2F0aW9uLCB2KTtgLFxuICBcInZlYzI8ZjMyPlwiOiBgZ2wudW5pZm9ybTJmdihsb2NhdGlvbiwgdik7YCxcbiAgXCJ2ZWMzPGYzMj5cIjogYGdsLnVuaWZvcm0zZnYobG9jYXRpb24sIHYpO2AsXG4gIFwidmVjNDxmMzI+XCI6IGBnbC51bmlmb3JtNGZ2KGxvY2F0aW9uLCB2KTtgLFxuICBcIm1hdDJ4MjxmMzI+XCI6IGBnbC51bmlmb3JtTWF0cml4MmZ2KGxvY2F0aW9uLCBmYWxzZSwgdik7YCxcbiAgXCJtYXQzeDM8ZjMyPlwiOiBgZ2wudW5pZm9ybU1hdHJpeDNmdihsb2NhdGlvbiwgZmFsc2UsIHYpO2AsXG4gIFwibWF0NHg0PGYzMj5cIjogYGdsLnVuaWZvcm1NYXRyaXg0ZnYobG9jYXRpb24sIGZhbHNlLCB2KTtgLFxuICBpMzI6IGBnbC51bmlmb3JtMWl2KGxvY2F0aW9uLCB2KTtgLFxuICBcInZlYzI8aTMyPlwiOiBgZ2wudW5pZm9ybTJpdihsb2NhdGlvbiwgdik7YCxcbiAgXCJ2ZWMzPGkzMj5cIjogYGdsLnVuaWZvcm0zaXYobG9jYXRpb24sIHYpO2AsXG4gIFwidmVjNDxpMzI+XCI6IGBnbC51bmlmb3JtNGl2KGxvY2F0aW9uLCB2KTtgLFxuICB1MzI6IGBnbC51bmlmb3JtMWl2KGxvY2F0aW9uLCB2KTtgLFxuICBcInZlYzI8dTMyPlwiOiBgZ2wudW5pZm9ybTJpdihsb2NhdGlvbiwgdik7YCxcbiAgXCJ2ZWMzPHUzMj5cIjogYGdsLnVuaWZvcm0zaXYobG9jYXRpb24sIHYpO2AsXG4gIFwidmVjNDx1MzI+XCI6IGBnbC51bmlmb3JtNGl2KGxvY2F0aW9uLCB2KTtgLFxuICBib29sOiBgZ2wudW5pZm9ybTFpdihsb2NhdGlvbiwgdik7YCxcbiAgXCJ2ZWMyPGJvb2w+XCI6IGBnbC51bmlmb3JtMml2KGxvY2F0aW9uLCB2KTtgLFxuICBcInZlYzM8Ym9vbD5cIjogYGdsLnVuaWZvcm0zaXYobG9jYXRpb24sIHYpO2AsXG4gIFwidmVjNDxib29sPlwiOiBgZ2wudW5pZm9ybTRpdihsb2NhdGlvbiwgdik7YFxufTtcblxuZXhwb3J0IHsgVU5JRk9STV9UT19BUlJBWV9TRVRURVJTLCBVTklGT1JNX1RPX1NJTkdMRV9TRVRURVJTIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmF0ZVVuaWZvcm1zU3luY1R5cGVzLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IGdlbmVyYXRlVW5pZm9ybXNTeW5jIH0gZnJvbSAnLi91dGlscy9nZW5lcmF0ZVVuaWZvcm1zU3luYy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsVW5pZm9ybUdyb3VwU3lzdGVtIHtcbiAgLyoqIEBwYXJhbSByZW5kZXJlciAtIFRoZSByZW5kZXJlciB0aGlzIFN5c3RlbSB3b3JrcyBmb3IuICovXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgLyoqIENhY2hlIHRvIGhvbGRzIHRoZSBnZW5lcmF0ZWQgZnVuY3Rpb25zLiBTdG9yZWQgYWdhaW5zdCBVbmlmb3JtT2JqZWN0cyB1bmlxdWUgc2lnbmF0dXJlLiAqL1xuICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgdGhpcy5fdW5pZm9ybUdyb3VwU3luY0hhc2ggPSB7fTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuZ2wgPSBudWxsO1xuICAgIHRoaXMuX2NhY2hlID0ge307XG4gIH1cbiAgY29udGV4dENoYW5nZShnbCkge1xuICAgIHRoaXMuZ2wgPSBnbDtcbiAgfVxuICAvKipcbiAgICogVXBsb2FkcyB0aGUgdW5pZm9ybXMgdmFsdWVzIHRvIHRoZSBjdXJyZW50bHkgYm91bmQgc2hhZGVyLlxuICAgKiBAcGFyYW0gZ3JvdXAgLSB0aGUgdW5pZm9ybXMgdmFsdWVzIHRoYXQgYmUgYXBwbGllZCB0byB0aGUgY3VycmVudCBzaGFkZXJcbiAgICogQHBhcmFtIHByb2dyYW1cbiAgICogQHBhcmFtIHN5bmNEYXRhXG4gICAqIEBwYXJhbSBzeW5jRGF0YS50ZXh0dXJlQ291bnRcbiAgICovXG4gIHVwZGF0ZVVuaWZvcm1Hcm91cChncm91cCwgcHJvZ3JhbSwgc3luY0RhdGEpIHtcbiAgICBjb25zdCBwcm9ncmFtRGF0YSA9IHRoaXMuX3JlbmRlcmVyLnNoYWRlci5fZ2V0UHJvZ3JhbURhdGEocHJvZ3JhbSk7XG4gICAgaWYgKCFncm91cC5pc1N0YXRpYyB8fCBncm91cC5fZGlydHlJZCAhPT0gcHJvZ3JhbURhdGEudW5pZm9ybURpcnR5R3JvdXBzW2dyb3VwLnVpZF0pIHtcbiAgICAgIHByb2dyYW1EYXRhLnVuaWZvcm1EaXJ0eUdyb3Vwc1tncm91cC51aWRdID0gZ3JvdXAuX2RpcnR5SWQ7XG4gICAgICBjb25zdCBzeW5jRnVuYyA9IHRoaXMuX2dldFVuaWZvcm1TeW5jRnVuY3Rpb24oZ3JvdXAsIHByb2dyYW0pO1xuICAgICAgc3luY0Z1bmMocHJvZ3JhbURhdGEudW5pZm9ybURhdGEsIGdyb3VwLnVuaWZvcm1zLCB0aGlzLl9yZW5kZXJlciwgc3luY0RhdGEpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogT3ZlcnJpZGFibGUgYnkgdGhlIHBpeGkuanMvdW5zYWZlLWV2YWwgcGFja2FnZSB0byB1c2Ugc3RhdGljIHN5bmNVbmlmb3JtcyBpbnN0ZWFkLlxuICAgKiBAcGFyYW0gZ3JvdXBcbiAgICogQHBhcmFtIHByb2dyYW1cbiAgICovXG4gIF9nZXRVbmlmb3JtU3luY0Z1bmN0aW9uKGdyb3VwLCBwcm9ncmFtKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VuaWZvcm1Hcm91cFN5bmNIYXNoW2dyb3VwLl9zaWduYXR1cmVdPy5bcHJvZ3JhbS5fa2V5XSB8fCB0aGlzLl9jcmVhdGVVbmlmb3JtU3luY0Z1bmN0aW9uKGdyb3VwLCBwcm9ncmFtKTtcbiAgfVxuICBfY3JlYXRlVW5pZm9ybVN5bmNGdW5jdGlvbihncm91cCwgcHJvZ3JhbSkge1xuICAgIGNvbnN0IHVuaWZvcm1Hcm91cFN5bmNIYXNoID0gdGhpcy5fdW5pZm9ybUdyb3VwU3luY0hhc2hbZ3JvdXAuX3NpZ25hdHVyZV0gfHwgKHRoaXMuX3VuaWZvcm1Hcm91cFN5bmNIYXNoW2dyb3VwLl9zaWduYXR1cmVdID0ge30pO1xuICAgIGNvbnN0IGlkID0gdGhpcy5fZ2V0U2lnbmF0dXJlKGdyb3VwLCBwcm9ncmFtLl91bmlmb3JtRGF0YSwgXCJ1XCIpO1xuICAgIGlmICghdGhpcy5fY2FjaGVbaWRdKSB7XG4gICAgICB0aGlzLl9jYWNoZVtpZF0gPSB0aGlzLl9nZW5lcmF0ZVVuaWZvcm1zU3luYyhncm91cCwgcHJvZ3JhbS5fdW5pZm9ybURhdGEpO1xuICAgIH1cbiAgICB1bmlmb3JtR3JvdXBTeW5jSGFzaFtwcm9ncmFtLl9rZXldID0gdGhpcy5fY2FjaGVbaWRdO1xuICAgIHJldHVybiB1bmlmb3JtR3JvdXBTeW5jSGFzaFtwcm9ncmFtLl9rZXldO1xuICB9XG4gIF9nZW5lcmF0ZVVuaWZvcm1zU3luYyhncm91cCwgdW5pZm9ybURhdGEpIHtcbiAgICByZXR1cm4gZ2VuZXJhdGVVbmlmb3Jtc1N5bmMoZ3JvdXAsIHVuaWZvcm1EYXRhKTtcbiAgfVxuICAvKipcbiAgICogVGFrZXMgYSB1bmlmb3JtIGdyb3VwIGFuZCBkYXRhIGFuZCBnZW5lcmF0ZXMgYSB1bmlxdWUgc2lnbmF0dXJlIGZvciB0aGVtLlxuICAgKiBAcGFyYW0gZ3JvdXAgLSBUaGUgdW5pZm9ybSBncm91cCB0byBnZXQgc2lnbmF0dXJlIG9mXG4gICAqIEBwYXJhbSBncm91cC51bmlmb3Jtc1xuICAgKiBAcGFyYW0gdW5pZm9ybURhdGEgLSBVbmlmb3JtIGluZm9ybWF0aW9uIGdlbmVyYXRlZCBieSB0aGUgc2hhZGVyXG4gICAqIEBwYXJhbSBwcmVGaXhcbiAgICogQHJldHVybnMgVW5pcXVlIHNpZ25hdHVyZSBvZiB0aGUgdW5pZm9ybSBncm91cFxuICAgKi9cbiAgX2dldFNpZ25hdHVyZShncm91cCwgdW5pZm9ybURhdGEsIHByZUZpeCkge1xuICAgIGNvbnN0IHVuaWZvcm1zID0gZ3JvdXAudW5pZm9ybXM7XG4gICAgY29uc3Qgc3RyaW5ncyA9IFtgJHtwcmVGaXh9LWBdO1xuICAgIGZvciAoY29uc3QgaSBpbiB1bmlmb3Jtcykge1xuICAgICAgc3RyaW5ncy5wdXNoKGkpO1xuICAgICAgaWYgKHVuaWZvcm1EYXRhW2ldKSB7XG4gICAgICAgIHN0cmluZ3MucHVzaCh1bmlmb3JtRGF0YVtpXS50eXBlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZ3Muam9pbihcIi1cIik7XG4gIH1cbiAgLyoqIERlc3Ryb3lzIHRoaXMgU3lzdGVtIGFuZCByZW1vdmVzIGFsbCBpdHMgdGV4dHVyZXMuICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICAgIHRoaXMuX2NhY2hlID0gbnVsbDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdsVW5pZm9ybUdyb3VwU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJ1bmlmb3JtR3JvdXBcIlxufTtcblxuZXhwb3J0IHsgR2xVbmlmb3JtR3JvdXBTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsVW5pZm9ybUdyb3VwU3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IEJ1ZmZlclJlc291cmNlIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2J1ZmZlci9CdWZmZXJSZXNvdXJjZS5tanMnO1xuaW1wb3J0IHsgVW5pZm9ybUdyb3VwIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3NoYWRlci9Vbmlmb3JtR3JvdXAubWpzJztcbmltcG9ydCB7IHVuaWZvcm1QYXJzZXJzIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3NoYWRlci91dGlscy91bmlmb3JtUGFyc2Vycy5tanMnO1xuaW1wb3J0IHsgVU5JRk9STV9UT19TSU5HTEVfU0VUVEVSUywgVU5JRk9STV9UT19BUlJBWV9TRVRURVJTIH0gZnJvbSAnLi9nZW5lcmF0ZVVuaWZvcm1zU3luY1R5cGVzLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZ2VuZXJhdGVVbmlmb3Jtc1N5bmMoZ3JvdXAsIHVuaWZvcm1EYXRhKSB7XG4gIGNvbnN0IGZ1bmNGcmFnbWVudHMgPSBbYFxuICAgICAgICB2YXIgdiA9IG51bGw7XG4gICAgICAgIHZhciBjdiA9IG51bGw7XG4gICAgICAgIHZhciBjdSA9IG51bGw7XG4gICAgICAgIHZhciB0ID0gMDtcbiAgICAgICAgdmFyIGdsID0gcmVuZGVyZXIuZ2w7XG4gICAgICAgIHZhciBuYW1lID0gbnVsbDtcbiAgICBgXTtcbiAgZm9yIChjb25zdCBpIGluIGdyb3VwLnVuaWZvcm1zKSB7XG4gICAgaWYgKCF1bmlmb3JtRGF0YVtpXSkge1xuICAgICAgaWYgKGdyb3VwLnVuaWZvcm1zW2ldIGluc3RhbmNlb2YgVW5pZm9ybUdyb3VwKSB7XG4gICAgICAgIGlmIChncm91cC51bmlmb3Jtc1tpXS51Ym8pIHtcbiAgICAgICAgICBmdW5jRnJhZ21lbnRzLnB1c2goYFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIuc2hhZGVyLmJpbmRVbmlmb3JtQmxvY2sodXYuJHtpfSwgXCIke2l9XCIpO1xuICAgICAgICAgICAgICAgICAgICBgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmdW5jRnJhZ21lbnRzLnB1c2goYFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIuc2hhZGVyLnVwZGF0ZVVuaWZvcm1Hcm91cCh1di4ke2l9KTtcbiAgICAgICAgICAgICAgICAgICAgYCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZ3JvdXAudW5pZm9ybXNbaV0gaW5zdGFuY2VvZiBCdWZmZXJSZXNvdXJjZSkge1xuICAgICAgICBmdW5jRnJhZ21lbnRzLnB1c2goYFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIuc2hhZGVyLmJpbmRCdWZmZXJSZXNvdXJjZSh1di4ke2l9LCBcIiR7aX1cIik7XG4gICAgICAgICAgICAgICAgICAgIGApO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHVuaWZvcm0gPSBncm91cC51bmlmb3JtU3RydWN0dXJlc1tpXTtcbiAgICBsZXQgcGFyc2VkID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB1bmlmb3JtUGFyc2Vycy5sZW5ndGg7IGorKykge1xuICAgICAgY29uc3QgcGFyc2VyID0gdW5pZm9ybVBhcnNlcnNbal07XG4gICAgICBpZiAodW5pZm9ybS50eXBlID09PSBwYXJzZXIudHlwZSAmJiBwYXJzZXIudGVzdCh1bmlmb3JtKSkge1xuICAgICAgICBmdW5jRnJhZ21lbnRzLnB1c2goYG5hbWUgPSBcIiR7aX1cIjtgLCB1bmlmb3JtUGFyc2Vyc1tqXS51bmlmb3JtKTtcbiAgICAgICAgcGFyc2VkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghcGFyc2VkKSB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZVR5cGUgPSB1bmlmb3JtLnNpemUgPT09IDEgPyBVTklGT1JNX1RPX1NJTkdMRV9TRVRURVJTIDogVU5JRk9STV9UT19BUlJBWV9TRVRURVJTO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZVR5cGVbdW5pZm9ybS50eXBlXS5yZXBsYWNlKFwibG9jYXRpb25cIiwgYHVkW1wiJHtpfVwiXS5sb2NhdGlvbmApO1xuICAgICAgZnVuY0ZyYWdtZW50cy5wdXNoKGBcbiAgICAgICAgICAgIGN1ID0gdWRbXCIke2l9XCJdO1xuICAgICAgICAgICAgY3YgPSBjdS52YWx1ZTtcbiAgICAgICAgICAgIHYgPSB1dltcIiR7aX1cIl07XG4gICAgICAgICAgICAke3RlbXBsYXRlfTtgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihcInVkXCIsIFwidXZcIiwgXCJyZW5kZXJlclwiLCBcInN5bmNEYXRhXCIsIGZ1bmNGcmFnbWVudHMuam9pbihcIlxcblwiKSk7XG59XG5cbmV4cG9ydCB7IGdlbmVyYXRlVW5pZm9ybXNTeW5jIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmF0ZVVuaWZvcm1zU3luYy5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9zdGF0ZS9TdGF0ZS5tanMnO1xuaW1wb3J0IHsgbWFwV2ViR0xCbGVuZE1vZGVzVG9QaXhpIH0gZnJvbSAnLi9tYXBXZWJHTEJsZW5kTW9kZXNUb1BpeGkubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBCTEVORCA9IDA7XG5jb25zdCBPRkZTRVQgPSAxO1xuY29uc3QgQ1VMTElORyA9IDI7XG5jb25zdCBERVBUSF9URVNUID0gMztcbmNvbnN0IFdJTkRJTkcgPSA0O1xuY29uc3QgREVQVEhfTUFTSyA9IDU7XG5jb25zdCBfR2xTdGF0ZVN5c3RlbSA9IGNsYXNzIF9HbFN0YXRlU3lzdGVtIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIGludmVydCB0aGUgZnJvbnQgZmFjZSB3aGVuIHJlbmRlcmluZ1xuICAgICAqIFRoaXMgaXMgdXNlZCBmb3IgcmVuZGVyIHRleHR1cmVzIHdoZXJlIHRoZSBZLWNvb3JkaW5hdGUgaXMgZmxpcHBlZFxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgdGhpcy5faW52ZXJ0RnJvbnRGYWNlID0gZmFsc2U7XG4gICAgdGhpcy5nbCA9IG51bGw7XG4gICAgdGhpcy5zdGF0ZUlkID0gMDtcbiAgICB0aGlzLnBvbHlnb25PZmZzZXQgPSAwO1xuICAgIHRoaXMuYmxlbmRNb2RlID0gXCJub25lXCI7XG4gICAgdGhpcy5fYmxlbmRFcSA9IGZhbHNlO1xuICAgIHRoaXMubWFwID0gW107XG4gICAgdGhpcy5tYXBbQkxFTkRdID0gdGhpcy5zZXRCbGVuZDtcbiAgICB0aGlzLm1hcFtPRkZTRVRdID0gdGhpcy5zZXRPZmZzZXQ7XG4gICAgdGhpcy5tYXBbQ1VMTElOR10gPSB0aGlzLnNldEN1bGxGYWNlO1xuICAgIHRoaXMubWFwW0RFUFRIX1RFU1RdID0gdGhpcy5zZXREZXB0aFRlc3Q7XG4gICAgdGhpcy5tYXBbV0lORElOR10gPSB0aGlzLnNldEZyb250RmFjZTtcbiAgICB0aGlzLm1hcFtERVBUSF9NQVNLXSA9IHRoaXMuc2V0RGVwdGhNYXNrO1xuICAgIHRoaXMuY2hlY2tzID0gW107XG4gICAgdGhpcy5kZWZhdWx0U3RhdGUgPSBTdGF0ZS5mb3IyZCgpO1xuICAgIHJlbmRlcmVyLnJlbmRlclRhcmdldC5vblJlbmRlclRhcmdldENoYW5nZS5hZGQodGhpcyk7XG4gIH1cbiAgb25SZW5kZXJUYXJnZXRDaGFuZ2UocmVuZGVyVGFyZ2V0KSB7XG4gICAgdGhpcy5faW52ZXJ0RnJvbnRGYWNlID0gIXJlbmRlclRhcmdldC5pc1Jvb3Q7XG4gICAgaWYgKHRoaXMuX2N1bGxGYWNlKSB7XG4gICAgICB0aGlzLnNldEZyb250RmFjZSh0aGlzLl9mcm9udEZhY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9mcm9udEZhY2VEaXJ0eSA9IHRydWU7XG4gICAgfVxuICB9XG4gIGNvbnRleHRDaGFuZ2UoZ2wpIHtcbiAgICB0aGlzLmdsID0gZ2w7XG4gICAgdGhpcy5ibGVuZE1vZGVzTWFwID0gbWFwV2ViR0xCbGVuZE1vZGVzVG9QaXhpKGdsKTtcbiAgICB0aGlzLnJlc2V0U3RhdGUoKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgY3VycmVudCBzdGF0ZVxuICAgKiBAcGFyYW0geyp9IHN0YXRlIC0gVGhlIHN0YXRlIHRvIHNldC5cbiAgICovXG4gIHNldChzdGF0ZSkge1xuICAgIHN0YXRlIHx8IChzdGF0ZSA9IHRoaXMuZGVmYXVsdFN0YXRlKTtcbiAgICBpZiAodGhpcy5zdGF0ZUlkICE9PSBzdGF0ZS5kYXRhKSB7XG4gICAgICBsZXQgZGlmZiA9IHRoaXMuc3RhdGVJZCBeIHN0YXRlLmRhdGE7XG4gICAgICBsZXQgaSA9IDA7XG4gICAgICB3aGlsZSAoZGlmZikge1xuICAgICAgICBpZiAoZGlmZiAmIDEpIHtcbiAgICAgICAgICB0aGlzLm1hcFtpXS5jYWxsKHRoaXMsICEhKHN0YXRlLmRhdGEgJiAxIDw8IGkpKTtcbiAgICAgICAgfVxuICAgICAgICBkaWZmID4+PSAxO1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgICB0aGlzLnN0YXRlSWQgPSBzdGF0ZS5kYXRhO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hlY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmNoZWNrc1tpXSh0aGlzLCBzdGF0ZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzdGF0ZSwgd2hlbiBwcmV2aW91cyBzdGF0ZSBpcyB1bmtub3duLlxuICAgKiBAcGFyYW0geyp9IHN0YXRlIC0gVGhlIHN0YXRlIHRvIHNldFxuICAgKi9cbiAgZm9yY2VTdGF0ZShzdGF0ZSkge1xuICAgIHN0YXRlIHx8IChzdGF0ZSA9IHRoaXMuZGVmYXVsdFN0YXRlKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWFwLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLm1hcFtpXS5jYWxsKHRoaXMsICEhKHN0YXRlLmRhdGEgJiAxIDw8IGkpKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoZWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5jaGVja3NbaV0odGhpcywgc3RhdGUpO1xuICAgIH1cbiAgICB0aGlzLnN0YXRlSWQgPSBzdGF0ZS5kYXRhO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHdoZXRoZXIgdG8gZW5hYmxlIG9yIGRpc2FibGUgYmxlbmRpbmcuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFR1cm4gb24gb3Igb2ZmIFdlYkdsIGJsZW5kaW5nLlxuICAgKi9cbiAgc2V0QmxlbmQodmFsdWUpIHtcbiAgICB0aGlzLl91cGRhdGVDaGVjayhfR2xTdGF0ZVN5c3RlbS5fY2hlY2tCbGVuZE1vZGUsIHZhbHVlKTtcbiAgICB0aGlzLmdsW3ZhbHVlID8gXCJlbmFibGVcIiA6IFwiZGlzYWJsZVwiXSh0aGlzLmdsLkJMRU5EKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIHRvIGVuYWJsZSBvciBkaXNhYmxlIHBvbHlnb24gb2Zmc2V0IGZpbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFR1cm4gb24gb3Igb2ZmIHdlYmdsIHBvbHlnb24gb2Zmc2V0IHRlc3RpbmcuXG4gICAqL1xuICBzZXRPZmZzZXQodmFsdWUpIHtcbiAgICB0aGlzLl91cGRhdGVDaGVjayhfR2xTdGF0ZVN5c3RlbS5fY2hlY2tQb2x5Z29uT2Zmc2V0LCB2YWx1ZSk7XG4gICAgdGhpcy5nbFt2YWx1ZSA/IFwiZW5hYmxlXCIgOiBcImRpc2FibGVcIl0odGhpcy5nbC5QT0xZR09OX09GRlNFVF9GSUxMKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIHRvIGVuYWJsZSBvciBkaXNhYmxlIGRlcHRoIHRlc3QuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFR1cm4gb24gb3Igb2ZmIHdlYmdsIGRlcHRoIHRlc3RpbmcuXG4gICAqL1xuICBzZXREZXB0aFRlc3QodmFsdWUpIHtcbiAgICB0aGlzLmdsW3ZhbHVlID8gXCJlbmFibGVcIiA6IFwiZGlzYWJsZVwiXSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHdoZXRoZXIgdG8gZW5hYmxlIG9yIGRpc2FibGUgZGVwdGggbWFzay5cbiAgICogQHBhcmFtIHZhbHVlIC0gVHVybiBvbiBvciBvZmYgd2ViZ2wgZGVwdGggbWFzay5cbiAgICovXG4gIHNldERlcHRoTWFzayh2YWx1ZSkge1xuICAgIHRoaXMuZ2wuZGVwdGhNYXNrKHZhbHVlKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIHRvIGVuYWJsZSBvciBkaXNhYmxlIGN1bGwgZmFjZS5cbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAtIFR1cm4gb24gb3Igb2ZmIHdlYmdsIGN1bGwgZmFjZS5cbiAgICovXG4gIHNldEN1bGxGYWNlKHZhbHVlKSB7XG4gICAgdGhpcy5fY3VsbEZhY2UgPSB2YWx1ZTtcbiAgICB0aGlzLmdsW3ZhbHVlID8gXCJlbmFibGVcIiA6IFwiZGlzYWJsZVwiXSh0aGlzLmdsLkNVTExfRkFDRSk7XG4gICAgaWYgKHRoaXMuX2N1bGxGYWNlICYmIHRoaXMuX2Zyb250RmFjZURpcnR5KSB7XG4gICAgICB0aGlzLnNldEZyb250RmFjZSh0aGlzLl9mcm9udEZhY2UpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgZ2wgZnJvbnQgZmFjZS5cbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAtIHRydWUgaXMgY2xvY2t3aXNlIGFuZCBmYWxzZSBpcyBjb3VudGVyLWNsb2Nrd2lzZVxuICAgKi9cbiAgc2V0RnJvbnRGYWNlKHZhbHVlKSB7XG4gICAgdGhpcy5fZnJvbnRGYWNlID0gdmFsdWU7XG4gICAgdGhpcy5fZnJvbnRGYWNlRGlydHkgPSBmYWxzZTtcbiAgICBjb25zdCBmYWNlTW9kZSA9IHRoaXMuX2ludmVydEZyb250RmFjZSA/ICF2YWx1ZSA6IHZhbHVlO1xuICAgIGlmICh0aGlzLl9nbEZyb250RmFjZSAhPT0gZmFjZU1vZGUpIHtcbiAgICAgIHRoaXMuX2dsRnJvbnRGYWNlID0gZmFjZU1vZGU7XG4gICAgICB0aGlzLmdsLmZyb250RmFjZSh0aGlzLmdsW2ZhY2VNb2RlID8gXCJDV1wiIDogXCJDQ1dcIl0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYmxlbmQgbW9kZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIGJsZW5kIG1vZGUgdG8gc2V0IHRvLlxuICAgKi9cbiAgc2V0QmxlbmRNb2RlKHZhbHVlKSB7XG4gICAgaWYgKCF0aGlzLmJsZW5kTW9kZXNNYXBbdmFsdWVdKSB7XG4gICAgICB2YWx1ZSA9IFwibm9ybWFsXCI7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gdGhpcy5ibGVuZE1vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5ibGVuZE1vZGUgPSB2YWx1ZTtcbiAgICBjb25zdCBtb2RlID0gdGhpcy5ibGVuZE1vZGVzTWFwW3ZhbHVlXTtcbiAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgaWYgKG1vZGUubGVuZ3RoID09PSAyKSB7XG4gICAgICBnbC5ibGVuZEZ1bmMobW9kZVswXSwgbW9kZVsxXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsLmJsZW5kRnVuY1NlcGFyYXRlKG1vZGVbMF0sIG1vZGVbMV0sIG1vZGVbMl0sIG1vZGVbM10pO1xuICAgIH1cbiAgICBpZiAobW9kZS5sZW5ndGggPT09IDYpIHtcbiAgICAgIHRoaXMuX2JsZW5kRXEgPSB0cnVlO1xuICAgICAgZ2wuYmxlbmRFcXVhdGlvblNlcGFyYXRlKG1vZGVbNF0sIG1vZGVbNV0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fYmxlbmRFcSkge1xuICAgICAgdGhpcy5fYmxlbmRFcSA9IGZhbHNlO1xuICAgICAgZ2wuYmxlbmRFcXVhdGlvblNlcGFyYXRlKGdsLkZVTkNfQURELCBnbC5GVU5DX0FERCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwb2x5Z29uIG9mZnNldC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdGhlIHBvbHlnb24gb2Zmc2V0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZSAtIHRoZSBwb2x5Z29uIG9mZnNldCBzY2FsZVxuICAgKi9cbiAgc2V0UG9seWdvbk9mZnNldCh2YWx1ZSwgc2NhbGUpIHtcbiAgICB0aGlzLmdsLnBvbHlnb25PZmZzZXQodmFsdWUsIHNjYWxlKTtcbiAgfVxuICAvKiogUmVzZXRzIGFsbCB0aGUgbG9naWMgYW5kIGRpc2FibGVzIHRoZSBWQU9zLiAqL1xuICByZXNldFN0YXRlKCkge1xuICAgIHRoaXMuX2dsRnJvbnRGYWNlID0gZmFsc2U7XG4gICAgdGhpcy5fZnJvbnRGYWNlID0gZmFsc2U7XG4gICAgdGhpcy5fY3VsbEZhY2UgPSBmYWxzZTtcbiAgICB0aGlzLl9mcm9udEZhY2VEaXJ0eSA9IGZhbHNlO1xuICAgIHRoaXMuX2ludmVydEZyb250RmFjZSA9IGZhbHNlO1xuICAgIHRoaXMuZ2wuZnJvbnRGYWNlKHRoaXMuZ2wuQ0NXKTtcbiAgICB0aGlzLmdsLnBpeGVsU3RvcmVpKHRoaXMuZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgZmFsc2UpO1xuICAgIHRoaXMuZm9yY2VTdGF0ZSh0aGlzLmRlZmF1bHRTdGF0ZSk7XG4gICAgdGhpcy5fYmxlbmRFcSA9IHRydWU7XG4gICAgdGhpcy5ibGVuZE1vZGUgPSBcIlwiO1xuICAgIHRoaXMuc2V0QmxlbmRNb2RlKFwibm9ybWFsXCIpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVja3MgdG8gc2VlIHdoaWNoIHVwZGF0ZXMgc2hvdWxkIGJlIGNoZWNrZWQgYmFzZWQgb24gd2hpY2ggc2V0dGluZ3MgaGF2ZSBiZWVuIGFjdGl2YXRlZC5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIGlmIGJsZW5kIGlzIGVuYWJsZWQgdGhlbiB3ZSBzaG91bGQgY2hlY2sgdGhlIGJsZW5kIG1vZGVzIGVhY2ggdGltZSB0aGUgc3RhdGUgaXMgY2hhbmdlZFxuICAgKiBvciBpZiBwb2x5Z29uIGZpbGwgaXMgYWN0aXZhdGVkIHRoZW4gd2UgbmVlZCB0byBjaGVjayBpZiB0aGUgcG9seWdvbiBvZmZzZXQgY2hhbmdlcy5cbiAgICogVGhlIGlkZWEgaXMgdGhhdCB3ZSBvbmx5IGNoZWNrIHdoYXQgd2UgaGF2ZSB0b28uXG4gICAqIEBwYXJhbSBmdW5jIC0gdGhlIGNoZWNraW5nIGZ1bmN0aW9uIHRvIGFkZCBvciByZW1vdmVcbiAgICogQHBhcmFtIHZhbHVlIC0gc2hvdWxkIHRoZSBjaGVjayBmdW5jdGlvbiBiZSBhZGRlZCBvciByZW1vdmVkLlxuICAgKi9cbiAgX3VwZGF0ZUNoZWNrKGZ1bmMsIHZhbHVlKSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmNoZWNrcy5pbmRleE9mKGZ1bmMpO1xuICAgIGlmICh2YWx1ZSAmJiBpbmRleCA9PT0gLTEpIHtcbiAgICAgIHRoaXMuY2hlY2tzLnB1c2goZnVuYyk7XG4gICAgfSBlbHNlIGlmICghdmFsdWUgJiYgaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLmNoZWNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQSBwcml2YXRlIGxpdHRsZSB3cmFwcGVyIGZ1bmN0aW9uIHRoYXQgd2UgY2FsbCB0byBjaGVjayB0aGUgYmxlbmQgbW9kZS5cbiAgICogQHBhcmFtIHN5c3RlbSAtIHRoZSBTeXN0ZW0gdG8gcGVyZm9ybSB0aGUgc3RhdGUgY2hlY2sgb25cbiAgICogQHBhcmFtIHN0YXRlIC0gdGhlIHN0YXRlIHRoYXQgdGhlIGJsZW5kTW9kZSB3aWxsIHB1bGxlZCBmcm9tXG4gICAqL1xuICBzdGF0aWMgX2NoZWNrQmxlbmRNb2RlKHN5c3RlbSwgc3RhdGUpIHtcbiAgICBzeXN0ZW0uc2V0QmxlbmRNb2RlKHN0YXRlLmJsZW5kTW9kZSk7XG4gIH1cbiAgLyoqXG4gICAqIEEgcHJpdmF0ZSBsaXR0bGUgd3JhcHBlciBmdW5jdGlvbiB0aGF0IHdlIGNhbGwgdG8gY2hlY2sgdGhlIHBvbHlnb24gb2Zmc2V0LlxuICAgKiBAcGFyYW0gc3lzdGVtIC0gdGhlIFN5c3RlbSB0byBwZXJmb3JtIHRoZSBzdGF0ZSBjaGVjayBvblxuICAgKiBAcGFyYW0gc3RhdGUgLSB0aGUgc3RhdGUgdGhhdCB0aGUgYmxlbmRNb2RlIHdpbGwgcHVsbGVkIGZyb21cbiAgICovXG4gIHN0YXRpYyBfY2hlY2tQb2x5Z29uT2Zmc2V0KHN5c3RlbSwgc3RhdGUpIHtcbiAgICBzeXN0ZW0uc2V0UG9seWdvbk9mZnNldCgxLCBzdGF0ZS5wb2x5Z29uT2Zmc2V0KTtcbiAgfVxuICAvKiogQGlnbm9yZSAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZ2wgPSBudWxsO1xuICAgIHRoaXMuY2hlY2tzLmxlbmd0aCA9IDA7XG4gIH1cbn07XG4vKiogQGlnbm9yZSAqL1xuX0dsU3RhdGVTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbVxuICBdLFxuICBuYW1lOiBcInN0YXRlXCJcbn07XG5sZXQgR2xTdGF0ZVN5c3RlbSA9IF9HbFN0YXRlU3lzdGVtO1xuXG5leHBvcnQgeyBHbFN0YXRlU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbFN0YXRlU3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IERPTUFkYXB0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9lbnZpcm9ubWVudC9hZGFwdGVyLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gbWFwV2ViR0xCbGVuZE1vZGVzVG9QaXhpKGdsKSB7XG4gIGNvbnN0IGJsZW5kTWFwID0ge307XG4gIGJsZW5kTWFwLm5vcm1hbCA9IFtnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICBibGVuZE1hcC5hZGQgPSBbZ2wuT05FLCBnbC5PTkVdO1xuICBibGVuZE1hcC5tdWx0aXBseSA9IFtnbC5EU1RfQ09MT1IsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gIGJsZW5kTWFwLnNjcmVlbiA9IFtnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQ09MT1IsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gIGJsZW5kTWFwLm5vbmUgPSBbMCwgMF07XG4gIGJsZW5kTWFwW1wibm9ybWFsLW5wbVwiXSA9IFtnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gIGJsZW5kTWFwW1wiYWRkLW5wbVwiXSA9IFtnbC5TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FLCBnbC5PTkVdO1xuICBibGVuZE1hcFtcInNjcmVlbi1ucG1cIl0gPSBbZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0NPTE9SLCBnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICBibGVuZE1hcC5lcmFzZSA9IFtnbC5aRVJPLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgY29uc3QgaXNXZWJHbDIgPSAhKGdsIGluc3RhbmNlb2YgRE9NQWRhcHRlci5nZXQoKS5nZXRXZWJHTFJlbmRlcmluZ0NvbnRleHQoKSk7XG4gIGlmIChpc1dlYkdsMikge1xuICAgIGJsZW5kTWFwLm1pbiA9IFtnbC5PTkUsIGdsLk9ORSwgZ2wuT05FLCBnbC5PTkUsIGdsLk1JTiwgZ2wuTUlOXTtcbiAgICBibGVuZE1hcC5tYXggPSBbZ2wuT05FLCBnbC5PTkUsIGdsLk9ORSwgZ2wuT05FLCBnbC5NQVgsIGdsLk1BWF07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZXh0ID0gZ2wuZ2V0RXh0ZW5zaW9uKFwiRVhUX2JsZW5kX21pbm1heFwiKTtcbiAgICBpZiAoZXh0KSB7XG4gICAgICBibGVuZE1hcC5taW4gPSBbZ2wuT05FLCBnbC5PTkUsIGdsLk9ORSwgZ2wuT05FLCBleHQuTUlOX0VYVCwgZXh0Lk1JTl9FWFRdO1xuICAgICAgYmxlbmRNYXAubWF4ID0gW2dsLk9ORSwgZ2wuT05FLCBnbC5PTkUsIGdsLk9ORSwgZXh0Lk1BWF9FWFQsIGV4dC5NQVhfRVhUXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJsZW5kTWFwO1xufVxuXG5leHBvcnQgeyBtYXBXZWJHTEJsZW5kTW9kZXNUb1BpeGkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcFdlYkdMQmxlbmRNb2Rlc1RvUGl4aS5tanMubWFwXG4iLCJpbXBvcnQgeyBHTF9UQVJHRVRTLCBHTF9UWVBFUywgR0xfRk9STUFUUyB9IGZyb20gJy4vY29uc3QubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHbFRleHR1cmUge1xuICBjb25zdHJ1Y3Rvcih0ZXh0dXJlKSB7XG4gICAgdGhpcy50YXJnZXQgPSBHTF9UQVJHRVRTLlRFWFRVUkVfMkQ7XG4gICAgdGhpcy50ZXh0dXJlID0gdGV4dHVyZTtcbiAgICB0aGlzLndpZHRoID0gLTE7XG4gICAgdGhpcy5oZWlnaHQgPSAtMTtcbiAgICB0aGlzLnR5cGUgPSBHTF9UWVBFUy5VTlNJR05FRF9CWVRFO1xuICAgIHRoaXMuaW50ZXJuYWxGb3JtYXQgPSBHTF9GT1JNQVRTLlJHQkE7XG4gICAgdGhpcy5mb3JtYXQgPSBHTF9GT1JNQVRTLlJHQkE7XG4gICAgdGhpcy5zYW1wbGVyVHlwZSA9IDA7XG4gIH1cbn1cblxuZXhwb3J0IHsgR2xUZXh0dXJlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbFRleHR1cmUubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBnbFVwbG9hZEJ1ZmZlckltYWdlUmVzb3VyY2UgPSB7XG4gIGlkOiBcImJ1ZmZlclwiLFxuICB1cGxvYWQoc291cmNlLCBnbFRleHR1cmUsIGdsKSB7XG4gICAgaWYgKGdsVGV4dHVyZS53aWR0aCA9PT0gc291cmNlLndpZHRoIHx8IGdsVGV4dHVyZS5oZWlnaHQgPT09IHNvdXJjZS5oZWlnaHQpIHtcbiAgICAgIGdsLnRleFN1YkltYWdlMkQoXG4gICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIHNvdXJjZS53aWR0aCxcbiAgICAgICAgc291cmNlLmhlaWdodCxcbiAgICAgICAgZ2xUZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgZ2xUZXh0dXJlLnR5cGUsXG4gICAgICAgIHNvdXJjZS5yZXNvdXJjZVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2wudGV4SW1hZ2UyRChcbiAgICAgICAgZ2xUZXh0dXJlLnRhcmdldCxcbiAgICAgICAgMCxcbiAgICAgICAgZ2xUZXh0dXJlLmludGVybmFsRm9ybWF0LFxuICAgICAgICBzb3VyY2Uud2lkdGgsXG4gICAgICAgIHNvdXJjZS5oZWlnaHQsXG4gICAgICAgIDAsXG4gICAgICAgIGdsVGV4dHVyZS5mb3JtYXQsXG4gICAgICAgIGdsVGV4dHVyZS50eXBlLFxuICAgICAgICBzb3VyY2UucmVzb3VyY2VcbiAgICAgICk7XG4gICAgfVxuICAgIGdsVGV4dHVyZS53aWR0aCA9IHNvdXJjZS53aWR0aDtcbiAgICBnbFRleHR1cmUuaGVpZ2h0ID0gc291cmNlLmhlaWdodDtcbiAgfVxufTtcblxuZXhwb3J0IHsgZ2xVcGxvYWRCdWZmZXJJbWFnZVJlc291cmNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbFVwbG9hZEJ1ZmZlckltYWdlUmVzb3VyY2UubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBjb21wcmVzc2VkRm9ybWF0TWFwID0ge1xuICBcImJjMS1yZ2JhLXVub3JtXCI6IHRydWUsXG4gIFwiYmMxLXJnYmEtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImJjMi1yZ2JhLXVub3JtXCI6IHRydWUsXG4gIFwiYmMyLXJnYmEtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImJjMy1yZ2JhLXVub3JtXCI6IHRydWUsXG4gIFwiYmMzLXJnYmEtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImJjNC1yLXVub3JtXCI6IHRydWUsXG4gIFwiYmM0LXItc25vcm1cIjogdHJ1ZSxcbiAgXCJiYzUtcmctdW5vcm1cIjogdHJ1ZSxcbiAgXCJiYzUtcmctc25vcm1cIjogdHJ1ZSxcbiAgXCJiYzZoLXJnYi11ZmxvYXRcIjogdHJ1ZSxcbiAgXCJiYzZoLXJnYi1mbG9hdFwiOiB0cnVlLFxuICBcImJjNy1yZ2JhLXVub3JtXCI6IHRydWUsXG4gIFwiYmM3LXJnYmEtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICAvLyBFVEMyIGNvbXByZXNzZWQgZm9ybWF0cyB1c2FibGUgaWYgXCJ0ZXh0dXJlLWNvbXByZXNzaW9uLWV0YzJcIiBpcyBib3RoXG4gIC8vIHN1cHBvcnRlZCBieSB0aGUgZGV2aWNlL3VzZXIgYWdlbnQgYW5kIGVuYWJsZWQgaW4gcmVxdWVzdERldmljZS5cbiAgXCJldGMyLXJnYjh1bm9ybVwiOiB0cnVlLFxuICBcImV0YzItcmdiOHVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJldGMyLXJnYjhhMXVub3JtXCI6IHRydWUsXG4gIFwiZXRjMi1yZ2I4YTF1bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiZXRjMi1yZ2JhOHVub3JtXCI6IHRydWUsXG4gIFwiZXRjMi1yZ2JhOHVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJlYWMtcjExdW5vcm1cIjogdHJ1ZSxcbiAgXCJlYWMtcjExc25vcm1cIjogdHJ1ZSxcbiAgXCJlYWMtcmcxMXVub3JtXCI6IHRydWUsXG4gIFwiZWFjLXJnMTFzbm9ybVwiOiB0cnVlLFxuICAvLyBBU1RDIGNvbXByZXNzZWQgZm9ybWF0cyB1c2FibGUgaWYgXCJ0ZXh0dXJlLWNvbXByZXNzaW9uLWFzdGNcIiBpcyBib3RoXG4gIC8vIHN1cHBvcnRlZCBieSB0aGUgZGV2aWNlL3VzZXIgYWdlbnQgYW5kIGVuYWJsZWQgaW4gcmVxdWVzdERldmljZS5cbiAgXCJhc3RjLTR4NC11bm9ybVwiOiB0cnVlLFxuICBcImFzdGMtNHg0LXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJhc3RjLTV4NC11bm9ybVwiOiB0cnVlLFxuICBcImFzdGMtNXg0LXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJhc3RjLTV4NS11bm9ybVwiOiB0cnVlLFxuICBcImFzdGMtNXg1LXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJhc3RjLTZ4NS11bm9ybVwiOiB0cnVlLFxuICBcImFzdGMtNng1LXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJhc3RjLTZ4Ni11bm9ybVwiOiB0cnVlLFxuICBcImFzdGMtNng2LXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJhc3RjLTh4NS11bm9ybVwiOiB0cnVlLFxuICBcImFzdGMtOHg1LXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJhc3RjLTh4Ni11bm9ybVwiOiB0cnVlLFxuICBcImFzdGMtOHg2LXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJhc3RjLTh4OC11bm9ybVwiOiB0cnVlLFxuICBcImFzdGMtOHg4LXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJhc3RjLTEweDUtdW5vcm1cIjogdHJ1ZSxcbiAgXCJhc3RjLTEweDUtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImFzdGMtMTB4Ni11bm9ybVwiOiB0cnVlLFxuICBcImFzdGMtMTB4Ni11bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiYXN0Yy0xMHg4LXVub3JtXCI6IHRydWUsXG4gIFwiYXN0Yy0xMHg4LXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJhc3RjLTEweDEwLXVub3JtXCI6IHRydWUsXG4gIFwiYXN0Yy0xMHgxMC11bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiYXN0Yy0xMngxMC11bm9ybVwiOiB0cnVlLFxuICBcImFzdGMtMTJ4MTAtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImFzdGMtMTJ4MTItdW5vcm1cIjogdHJ1ZSxcbiAgXCJhc3RjLTEyeDEyLXVub3JtLXNyZ2JcIjogdHJ1ZVxufTtcbmNvbnN0IGdsVXBsb2FkQ29tcHJlc3NlZFRleHR1cmVSZXNvdXJjZSA9IHtcbiAgaWQ6IFwiY29tcHJlc3NlZFwiLFxuICB1cGxvYWQoc291cmNlLCBnbFRleHR1cmUsIGdsKSB7XG4gICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0FMSUdOTUVOVCwgNCk7XG4gICAgbGV0IG1pcFdpZHRoID0gc291cmNlLnBpeGVsV2lkdGg7XG4gICAgbGV0IG1pcEhlaWdodCA9IHNvdXJjZS5waXhlbEhlaWdodDtcbiAgICBjb25zdCBjb21wcmVzc2VkID0gISFjb21wcmVzc2VkRm9ybWF0TWFwW3NvdXJjZS5mb3JtYXRdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlLnJlc291cmNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBsZXZlbEJ1ZmZlciA9IHNvdXJjZS5yZXNvdXJjZVtpXTtcbiAgICAgIGlmIChjb21wcmVzc2VkKSB7XG4gICAgICAgIGdsLmNvbXByZXNzZWRUZXhJbWFnZTJEKFxuICAgICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBnbFRleHR1cmUuaW50ZXJuYWxGb3JtYXQsXG4gICAgICAgICAgbWlwV2lkdGgsXG4gICAgICAgICAgbWlwSGVpZ2h0LFxuICAgICAgICAgIDAsXG4gICAgICAgICAgbGV2ZWxCdWZmZXJcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdsLnRleEltYWdlMkQoXG4gICAgICAgICAgZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGdsVGV4dHVyZS5pbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgICBtaXBXaWR0aCxcbiAgICAgICAgICBtaXBIZWlnaHQsXG4gICAgICAgICAgMCxcbiAgICAgICAgICBnbFRleHR1cmUuZm9ybWF0LFxuICAgICAgICAgIGdsVGV4dHVyZS50eXBlLFxuICAgICAgICAgIGxldmVsQnVmZmVyXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBtaXBXaWR0aCA9IE1hdGgubWF4KG1pcFdpZHRoID4+IDEsIDEpO1xuICAgICAgbWlwSGVpZ2h0ID0gTWF0aC5tYXgobWlwSGVpZ2h0ID4+IDEsIDEpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IHsgZ2xVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbFVwbG9hZENvbXByZXNzZWRUZXh0dXJlUmVzb3VyY2UubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBnbFVwbG9hZEltYWdlUmVzb3VyY2UgPSB7XG4gIGlkOiBcImltYWdlXCIsXG4gIHVwbG9hZChzb3VyY2UsIGdsVGV4dHVyZSwgZ2wsIHdlYkdMVmVyc2lvbikge1xuICAgIGNvbnN0IGdsV2lkdGggPSBnbFRleHR1cmUud2lkdGg7XG4gICAgY29uc3QgZ2xIZWlnaHQgPSBnbFRleHR1cmUuaGVpZ2h0O1xuICAgIGNvbnN0IHRleHR1cmVXaWR0aCA9IHNvdXJjZS5waXhlbFdpZHRoO1xuICAgIGNvbnN0IHRleHR1cmVIZWlnaHQgPSBzb3VyY2UucGl4ZWxIZWlnaHQ7XG4gICAgY29uc3QgcmVzb3VyY2VXaWR0aCA9IHNvdXJjZS5yZXNvdXJjZVdpZHRoO1xuICAgIGNvbnN0IHJlc291cmNlSGVpZ2h0ID0gc291cmNlLnJlc291cmNlSGVpZ2h0O1xuICAgIGlmIChyZXNvdXJjZVdpZHRoIDwgdGV4dHVyZVdpZHRoIHx8IHJlc291cmNlSGVpZ2h0IDwgdGV4dHVyZUhlaWdodCkge1xuICAgICAgaWYgKGdsV2lkdGggIT09IHRleHR1cmVXaWR0aCB8fCBnbEhlaWdodCAhPT0gdGV4dHVyZUhlaWdodCkge1xuICAgICAgICBnbC50ZXhJbWFnZTJEKFxuICAgICAgICAgIGdsVGV4dHVyZS50YXJnZXQsXG4gICAgICAgICAgMCxcbiAgICAgICAgICBnbFRleHR1cmUuaW50ZXJuYWxGb3JtYXQsXG4gICAgICAgICAgdGV4dHVyZVdpZHRoLFxuICAgICAgICAgIHRleHR1cmVIZWlnaHQsXG4gICAgICAgICAgMCxcbiAgICAgICAgICBnbFRleHR1cmUuZm9ybWF0LFxuICAgICAgICAgIGdsVGV4dHVyZS50eXBlLFxuICAgICAgICAgIG51bGxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICh3ZWJHTFZlcnNpb24gPT09IDIpIHtcbiAgICAgICAgZ2wudGV4U3ViSW1hZ2UyRChcbiAgICAgICAgICBnbC5URVhUVVJFXzJELFxuICAgICAgICAgIDAsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIHJlc291cmNlV2lkdGgsXG4gICAgICAgICAgcmVzb3VyY2VIZWlnaHQsXG4gICAgICAgICAgZ2xUZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgICBnbFRleHR1cmUudHlwZSxcbiAgICAgICAgICBzb3VyY2UucmVzb3VyY2VcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdsLnRleFN1YkltYWdlMkQoXG4gICAgICAgICAgZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIDAsXG4gICAgICAgICAgMCxcbiAgICAgICAgICBnbFRleHR1cmUuZm9ybWF0LFxuICAgICAgICAgIGdsVGV4dHVyZS50eXBlLFxuICAgICAgICAgIHNvdXJjZS5yZXNvdXJjZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZ2xXaWR0aCA9PT0gdGV4dHVyZVdpZHRoICYmIGdsSGVpZ2h0ID09PSB0ZXh0dXJlSGVpZ2h0KSB7XG4gICAgICBnbC50ZXhTdWJJbWFnZTJEKFxuICAgICAgICBnbC5URVhUVVJFXzJELFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICBnbFRleHR1cmUuZm9ybWF0LFxuICAgICAgICBnbFRleHR1cmUudHlwZSxcbiAgICAgICAgc291cmNlLnJlc291cmNlXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAod2ViR0xWZXJzaW9uID09PSAyKSB7XG4gICAgICBnbC50ZXhJbWFnZTJEKFxuICAgICAgICBnbFRleHR1cmUudGFyZ2V0LFxuICAgICAgICAwLFxuICAgICAgICBnbFRleHR1cmUuaW50ZXJuYWxGb3JtYXQsXG4gICAgICAgIHRleHR1cmVXaWR0aCxcbiAgICAgICAgdGV4dHVyZUhlaWdodCxcbiAgICAgICAgMCxcbiAgICAgICAgZ2xUZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgZ2xUZXh0dXJlLnR5cGUsXG4gICAgICAgIHNvdXJjZS5yZXNvdXJjZVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2wudGV4SW1hZ2UyRChcbiAgICAgICAgZ2xUZXh0dXJlLnRhcmdldCxcbiAgICAgICAgMCxcbiAgICAgICAgZ2xUZXh0dXJlLmludGVybmFsRm9ybWF0LFxuICAgICAgICBnbFRleHR1cmUuZm9ybWF0LFxuICAgICAgICBnbFRleHR1cmUudHlwZSxcbiAgICAgICAgc291cmNlLnJlc291cmNlXG4gICAgICApO1xuICAgIH1cbiAgICBnbFRleHR1cmUud2lkdGggPSB0ZXh0dXJlV2lkdGg7XG4gICAgZ2xUZXh0dXJlLmhlaWdodCA9IHRleHR1cmVIZWlnaHQ7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGdsVXBsb2FkSW1hZ2VSZXNvdXJjZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xVcGxvYWRJbWFnZVJlc291cmNlLm1qcy5tYXBcbiIsImltcG9ydCB7IGdsVXBsb2FkSW1hZ2VSZXNvdXJjZSB9IGZyb20gJy4vZ2xVcGxvYWRJbWFnZVJlc291cmNlLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY29uc3QgZ2xVcGxvYWRWaWRlb1Jlc291cmNlID0ge1xuICBpZDogXCJ2aWRlb1wiLFxuICB1cGxvYWQoc291cmNlLCBnbFRleHR1cmUsIGdsLCB3ZWJHTFZlcnNpb24pIHtcbiAgICBpZiAoIXNvdXJjZS5pc1ZhbGlkKSB7XG4gICAgICBnbC50ZXhJbWFnZTJEKFxuICAgICAgICBnbFRleHR1cmUudGFyZ2V0LFxuICAgICAgICAwLFxuICAgICAgICBnbFRleHR1cmUuaW50ZXJuYWxGb3JtYXQsXG4gICAgICAgIDEsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIGdsVGV4dHVyZS5mb3JtYXQsXG4gICAgICAgIGdsVGV4dHVyZS50eXBlLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBnbFVwbG9hZEltYWdlUmVzb3VyY2UudXBsb2FkKHNvdXJjZSwgZ2xUZXh0dXJlLCBnbCwgd2ViR0xWZXJzaW9uKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgZ2xVcGxvYWRWaWRlb1Jlc291cmNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbFVwbG9hZFZpZGVvUmVzb3VyY2UubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBzY2FsZU1vZGVUb0dsRmlsdGVyID0ge1xuICBsaW5lYXI6IDk3MjksXG4gIG5lYXJlc3Q6IDk3Mjhcbn07XG5jb25zdCBtaXBtYXBTY2FsZU1vZGVUb0dsRmlsdGVyID0ge1xuICBsaW5lYXI6IHtcbiAgICBsaW5lYXI6IDk5ODcsXG4gICAgbmVhcmVzdDogOTk4NVxuICB9LFxuICBuZWFyZXN0OiB7XG4gICAgbGluZWFyOiA5OTg2LFxuICAgIG5lYXJlc3Q6IDk5ODRcbiAgfVxufTtcbmNvbnN0IHdyYXBNb2RlVG9HbEFkZHJlc3MgPSB7XG4gIFwiY2xhbXAtdG8tZWRnZVwiOiAzMzA3MSxcbiAgcmVwZWF0OiAxMDQ5NyxcbiAgXCJtaXJyb3ItcmVwZWF0XCI6IDMzNjQ4XG59O1xuY29uc3QgY29tcGFyZU1vZGVUb0dsQ29tcGFyZSA9IHtcbiAgbmV2ZXI6IDUxMixcbiAgbGVzczogNTEzLFxuICBlcXVhbDogNTE0LFxuICBcImxlc3MtZXF1YWxcIjogNTE1LFxuICBncmVhdGVyOiA1MTYsXG4gIFwibm90LWVxdWFsXCI6IDUxNyxcbiAgXCJncmVhdGVyLWVxdWFsXCI6IDUxOCxcbiAgYWx3YXlzOiA1MTlcbn07XG5cbmV4cG9ydCB7IGNvbXBhcmVNb2RlVG9HbENvbXBhcmUsIG1pcG1hcFNjYWxlTW9kZVRvR2xGaWx0ZXIsIHNjYWxlTW9kZVRvR2xGaWx0ZXIsIHdyYXBNb2RlVG9HbEFkZHJlc3MgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpeGlUb0dsTWFwcy5tanMubWFwXG4iLCJpbXBvcnQgeyB3cmFwTW9kZVRvR2xBZGRyZXNzLCBzY2FsZU1vZGVUb0dsRmlsdGVyLCBtaXBtYXBTY2FsZU1vZGVUb0dsRmlsdGVyLCBjb21wYXJlTW9kZVRvR2xDb21wYXJlIH0gZnJvbSAnLi9waXhpVG9HbE1hcHMubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBhcHBseVN0eWxlUGFyYW1zKHN0eWxlLCBnbCwgbWlwbWFwcywgYW5pc290cm9waWNFeHQsIGdsRnVuY3Rpb25OYW1lLCBmaXJzdFBhcmFtLCBmb3JjZUNsYW1wLCBmaXJzdENyZWF0aW9uKSB7XG4gIGNvbnN0IGNhc3RQYXJhbSA9IGZpcnN0UGFyYW07XG4gIGlmICghZmlyc3RDcmVhdGlvbiB8fCBzdHlsZS5hZGRyZXNzTW9kZVUgIT09IFwicmVwZWF0XCIgfHwgc3R5bGUuYWRkcmVzc01vZGVWICE9PSBcInJlcGVhdFwiIHx8IHN0eWxlLmFkZHJlc3NNb2RlVyAhPT0gXCJyZXBlYXRcIikge1xuICAgIGNvbnN0IHdyYXBNb2RlUyA9IHdyYXBNb2RlVG9HbEFkZHJlc3NbZm9yY2VDbGFtcCA/IFwiY2xhbXAtdG8tZWRnZVwiIDogc3R5bGUuYWRkcmVzc01vZGVVXTtcbiAgICBjb25zdCB3cmFwTW9kZVQgPSB3cmFwTW9kZVRvR2xBZGRyZXNzW2ZvcmNlQ2xhbXAgPyBcImNsYW1wLXRvLWVkZ2VcIiA6IHN0eWxlLmFkZHJlc3NNb2RlVl07XG4gICAgY29uc3Qgd3JhcE1vZGVSID0gd3JhcE1vZGVUb0dsQWRkcmVzc1tmb3JjZUNsYW1wID8gXCJjbGFtcC10by1lZGdlXCIgOiBzdHlsZS5hZGRyZXNzTW9kZVddO1xuICAgIGdsW2dsRnVuY3Rpb25OYW1lXShjYXN0UGFyYW0sIGdsLlRFWFRVUkVfV1JBUF9TLCB3cmFwTW9kZVMpO1xuICAgIGdsW2dsRnVuY3Rpb25OYW1lXShjYXN0UGFyYW0sIGdsLlRFWFRVUkVfV1JBUF9ULCB3cmFwTW9kZVQpO1xuICAgIGlmIChnbC5URVhUVVJFX1dSQVBfUilcbiAgICAgIGdsW2dsRnVuY3Rpb25OYW1lXShjYXN0UGFyYW0sIGdsLlRFWFRVUkVfV1JBUF9SLCB3cmFwTW9kZVIpO1xuICB9XG4gIGlmICghZmlyc3RDcmVhdGlvbiB8fCBzdHlsZS5tYWdGaWx0ZXIgIT09IFwibGluZWFyXCIpIHtcbiAgICBnbFtnbEZ1bmN0aW9uTmFtZV0oY2FzdFBhcmFtLCBnbC5URVhUVVJFX01BR19GSUxURVIsIHNjYWxlTW9kZVRvR2xGaWx0ZXJbc3R5bGUubWFnRmlsdGVyXSk7XG4gIH1cbiAgaWYgKG1pcG1hcHMpIHtcbiAgICBpZiAoIWZpcnN0Q3JlYXRpb24gfHwgc3R5bGUubWlwbWFwRmlsdGVyICE9PSBcImxpbmVhclwiKSB7XG4gICAgICBjb25zdCBnbEZpbHRlck1vZGUgPSBtaXBtYXBTY2FsZU1vZGVUb0dsRmlsdGVyW3N0eWxlLm1pbkZpbHRlcl1bc3R5bGUubWlwbWFwRmlsdGVyXTtcbiAgICAgIGdsW2dsRnVuY3Rpb25OYW1lXShjYXN0UGFyYW0sIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2xGaWx0ZXJNb2RlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZ2xbZ2xGdW5jdGlvbk5hbWVdKGNhc3RQYXJhbSwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBzY2FsZU1vZGVUb0dsRmlsdGVyW3N0eWxlLm1pbkZpbHRlcl0pO1xuICB9XG4gIGlmIChhbmlzb3Ryb3BpY0V4dCAmJiBzdHlsZS5tYXhBbmlzb3Ryb3B5ID4gMSkge1xuICAgIGNvbnN0IGxldmVsID0gTWF0aC5taW4oc3R5bGUubWF4QW5pc290cm9weSwgZ2wuZ2V0UGFyYW1ldGVyKGFuaXNvdHJvcGljRXh0Lk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCkpO1xuICAgIGdsW2dsRnVuY3Rpb25OYW1lXShjYXN0UGFyYW0sIGFuaXNvdHJvcGljRXh0LlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBsZXZlbCk7XG4gIH1cbiAgaWYgKHN0eWxlLmNvbXBhcmUpIHtcbiAgICBnbFtnbEZ1bmN0aW9uTmFtZV0oY2FzdFBhcmFtLCBnbC5URVhUVVJFX0NPTVBBUkVfRlVOQywgY29tcGFyZU1vZGVUb0dsQ29tcGFyZVtzdHlsZS5jb21wYXJlXSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgYXBwbHlTdHlsZVBhcmFtcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwbHlTdHlsZVBhcmFtcy5tanMubWFwXG4iLCJpbXBvcnQgeyBET01BZGFwdGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vZW52aXJvbm1lbnQvYWRhcHRlci5tanMnO1xuaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uLy4uL3NoYXJlZC90ZXh0dXJlL1RleHR1cmUubWpzJztcbmltcG9ydCB7IEdsVGV4dHVyZSB9IGZyb20gJy4vR2xUZXh0dXJlLm1qcyc7XG5pbXBvcnQgeyBnbFVwbG9hZEJ1ZmZlckltYWdlUmVzb3VyY2UgfSBmcm9tICcuL3VwbG9hZGVycy9nbFVwbG9hZEJ1ZmZlckltYWdlUmVzb3VyY2UubWpzJztcbmltcG9ydCB7IGdsVXBsb2FkQ29tcHJlc3NlZFRleHR1cmVSZXNvdXJjZSB9IGZyb20gJy4vdXBsb2FkZXJzL2dsVXBsb2FkQ29tcHJlc3NlZFRleHR1cmVSZXNvdXJjZS5tanMnO1xuaW1wb3J0IHsgZ2xVcGxvYWRJbWFnZVJlc291cmNlIH0gZnJvbSAnLi91cGxvYWRlcnMvZ2xVcGxvYWRJbWFnZVJlc291cmNlLm1qcyc7XG5pbXBvcnQgeyBnbFVwbG9hZFZpZGVvUmVzb3VyY2UgfSBmcm9tICcuL3VwbG9hZGVycy9nbFVwbG9hZFZpZGVvUmVzb3VyY2UubWpzJztcbmltcG9ydCB7IGFwcGx5U3R5bGVQYXJhbXMgfSBmcm9tICcuL3V0aWxzL2FwcGx5U3R5bGVQYXJhbXMubWpzJztcbmltcG9ydCB7IG1hcEZvcm1hdFRvR2xGb3JtYXQgfSBmcm9tICcuL3V0aWxzL21hcEZvcm1hdFRvR2xGb3JtYXQubWpzJztcbmltcG9ydCB7IG1hcEZvcm1hdFRvR2xJbnRlcm5hbEZvcm1hdCB9IGZyb20gJy4vdXRpbHMvbWFwRm9ybWF0VG9HbEludGVybmFsRm9ybWF0Lm1qcyc7XG5pbXBvcnQgeyBtYXBGb3JtYXRUb0dsVHlwZSB9IGZyb20gJy4vdXRpbHMvbWFwRm9ybWF0VG9HbFR5cGUubWpzJztcbmltcG9ydCAnLi91dGlscy91bnByZW11bHRpcGx5QWxwaGEubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBCWVRFU19QRVJfUElYRUwgPSA0O1xuY2xhc3MgR2xUZXh0dXJlU3lzdGVtIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLm1hbmFnZWRUZXh0dXJlcyA9IFtdO1xuICAgIHRoaXMuX2dsVGV4dHVyZXMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9nbFNhbXBsZXJzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fYm91bmRUZXh0dXJlcyA9IFtdO1xuICAgIHRoaXMuX2FjdGl2ZVRleHR1cmVMb2NhdGlvbiA9IC0xO1xuICAgIHRoaXMuX2JvdW5kU2FtcGxlcnMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl91cGxvYWRzID0ge1xuICAgICAgaW1hZ2U6IGdsVXBsb2FkSW1hZ2VSZXNvdXJjZSxcbiAgICAgIGJ1ZmZlcjogZ2xVcGxvYWRCdWZmZXJJbWFnZVJlc291cmNlLFxuICAgICAgdmlkZW86IGdsVXBsb2FkVmlkZW9SZXNvdXJjZSxcbiAgICAgIGNvbXByZXNzZWQ6IGdsVXBsb2FkQ29tcHJlc3NlZFRleHR1cmVSZXNvdXJjZVxuICAgIH07XG4gICAgdGhpcy5fcHJlbXVsdGlwbHlBbHBoYSA9IGZhbHNlO1xuICAgIC8vIFRPRE8gLSBzZXBhcmF0ZSBzYW1wbGVycyB3aWxsIGJlIGEgY29vbCB0aGluZyB0byBhZGQsIGJ1dCBub3QgcmlnaHQgbm93IVxuICAgIHRoaXMuX3VzZVNlcGFyYXRlU2FtcGxlcnMgPSBmYWxzZTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuX3JlbmRlcmVyLnJlbmRlcmFibGVHQy5hZGRNYW5hZ2VkSGFzaCh0aGlzLCBcIl9nbFRleHR1cmVzXCIpO1xuICAgIHRoaXMuX3JlbmRlcmVyLnJlbmRlcmFibGVHQy5hZGRNYW5hZ2VkSGFzaCh0aGlzLCBcIl9nbFNhbXBsZXJzXCIpO1xuICB9XG4gIGNvbnRleHRDaGFuZ2UoZ2wpIHtcbiAgICB0aGlzLl9nbCA9IGdsO1xuICAgIGlmICghdGhpcy5fbWFwRm9ybWF0VG9JbnRlcm5hbEZvcm1hdCkge1xuICAgICAgdGhpcy5fbWFwRm9ybWF0VG9JbnRlcm5hbEZvcm1hdCA9IG1hcEZvcm1hdFRvR2xJbnRlcm5hbEZvcm1hdChnbCwgdGhpcy5fcmVuZGVyZXIuY29udGV4dC5leHRlbnNpb25zKTtcbiAgICAgIHRoaXMuX21hcEZvcm1hdFRvVHlwZSA9IG1hcEZvcm1hdFRvR2xUeXBlKGdsKTtcbiAgICAgIHRoaXMuX21hcEZvcm1hdFRvRm9ybWF0ID0gbWFwRm9ybWF0VG9HbEZvcm1hdChnbCk7XG4gICAgfVxuICAgIHRoaXMuX2dsVGV4dHVyZXMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9nbFNhbXBsZXJzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fYm91bmRTYW1wbGVycyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX3ByZW11bHRpcGx5QWxwaGEgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgIHRoaXMuYmluZChUZXh0dXJlLkVNUFRZLCBpKTtcbiAgICB9XG4gIH1cbiAgaW5pdFNvdXJjZShzb3VyY2UpIHtcbiAgICB0aGlzLmJpbmQoc291cmNlKTtcbiAgfVxuICBiaW5kKHRleHR1cmUsIGxvY2F0aW9uID0gMCkge1xuICAgIGNvbnN0IHNvdXJjZSA9IHRleHR1cmUuc291cmNlO1xuICAgIGlmICh0ZXh0dXJlKSB7XG4gICAgICB0aGlzLmJpbmRTb3VyY2Uoc291cmNlLCBsb2NhdGlvbik7XG4gICAgICBpZiAodGhpcy5fdXNlU2VwYXJhdGVTYW1wbGVycykge1xuICAgICAgICB0aGlzLl9iaW5kU2FtcGxlcihzb3VyY2Uuc3R5bGUsIGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5iaW5kU291cmNlKG51bGwsIGxvY2F0aW9uKTtcbiAgICAgIGlmICh0aGlzLl91c2VTZXBhcmF0ZVNhbXBsZXJzKSB7XG4gICAgICAgIHRoaXMuX2JpbmRTYW1wbGVyKG51bGwsIGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYmluZFNvdXJjZShzb3VyY2UsIGxvY2F0aW9uID0gMCkge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgc291cmNlLl90b3VjaGVkID0gdGhpcy5fcmVuZGVyZXIudGV4dHVyZUdDLmNvdW50O1xuICAgIGlmICh0aGlzLl9ib3VuZFRleHR1cmVzW2xvY2F0aW9uXSAhPT0gc291cmNlKSB7XG4gICAgICB0aGlzLl9ib3VuZFRleHR1cmVzW2xvY2F0aW9uXSA9IHNvdXJjZTtcbiAgICAgIHRoaXMuX2FjdGl2YXRlTG9jYXRpb24obG9jYXRpb24pO1xuICAgICAgc291cmNlIHx8IChzb3VyY2UgPSBUZXh0dXJlLkVNUFRZLnNvdXJjZSk7XG4gICAgICBjb25zdCBnbFRleHR1cmUgPSB0aGlzLmdldEdsU291cmNlKHNvdXJjZSk7XG4gICAgICBnbC5iaW5kVGV4dHVyZShnbFRleHR1cmUudGFyZ2V0LCBnbFRleHR1cmUudGV4dHVyZSk7XG4gICAgfVxuICB9XG4gIF9iaW5kU2FtcGxlcihzdHlsZSwgbG9jYXRpb24gPSAwKSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICBpZiAoIXN0eWxlKSB7XG4gICAgICB0aGlzLl9ib3VuZFNhbXBsZXJzW2xvY2F0aW9uXSA9IG51bGw7XG4gICAgICBnbC5iaW5kU2FtcGxlcihsb2NhdGlvbiwgbnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNhbXBsZXIgPSB0aGlzLl9nZXRHbFNhbXBsZXIoc3R5bGUpO1xuICAgIGlmICh0aGlzLl9ib3VuZFNhbXBsZXJzW2xvY2F0aW9uXSAhPT0gc2FtcGxlcikge1xuICAgICAgdGhpcy5fYm91bmRTYW1wbGVyc1tsb2NhdGlvbl0gPSBzYW1wbGVyO1xuICAgICAgZ2wuYmluZFNhbXBsZXIobG9jYXRpb24sIHNhbXBsZXIpO1xuICAgIH1cbiAgfVxuICB1bmJpbmQodGV4dHVyZSkge1xuICAgIGNvbnN0IHNvdXJjZSA9IHRleHR1cmUuc291cmNlO1xuICAgIGNvbnN0IGJvdW5kVGV4dHVyZXMgPSB0aGlzLl9ib3VuZFRleHR1cmVzO1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3VuZFRleHR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYm91bmRUZXh0dXJlc1tpXSA9PT0gc291cmNlKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlTG9jYXRpb24oaSk7XG4gICAgICAgIGNvbnN0IGdsVGV4dHVyZSA9IHRoaXMuZ2V0R2xTb3VyY2Uoc291cmNlKTtcbiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2xUZXh0dXJlLnRhcmdldCwgbnVsbCk7XG4gICAgICAgIGJvdW5kVGV4dHVyZXNbaV0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBfYWN0aXZhdGVMb2NhdGlvbihsb2NhdGlvbikge1xuICAgIGlmICh0aGlzLl9hY3RpdmVUZXh0dXJlTG9jYXRpb24gIT09IGxvY2F0aW9uKSB7XG4gICAgICB0aGlzLl9hY3RpdmVUZXh0dXJlTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgIHRoaXMuX2dsLmFjdGl2ZVRleHR1cmUodGhpcy5fZ2wuVEVYVFVSRTAgKyBsb2NhdGlvbik7XG4gICAgfVxuICB9XG4gIF9pbml0U291cmNlKHNvdXJjZSkge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgY29uc3QgZ2xUZXh0dXJlID0gbmV3IEdsVGV4dHVyZShnbC5jcmVhdGVUZXh0dXJlKCkpO1xuICAgIGdsVGV4dHVyZS50eXBlID0gdGhpcy5fbWFwRm9ybWF0VG9UeXBlW3NvdXJjZS5mb3JtYXRdO1xuICAgIGdsVGV4dHVyZS5pbnRlcm5hbEZvcm1hdCA9IHRoaXMuX21hcEZvcm1hdFRvSW50ZXJuYWxGb3JtYXRbc291cmNlLmZvcm1hdF07XG4gICAgZ2xUZXh0dXJlLmZvcm1hdCA9IHRoaXMuX21hcEZvcm1hdFRvRm9ybWF0W3NvdXJjZS5mb3JtYXRdO1xuICAgIGlmIChzb3VyY2UuYXV0b0dlbmVyYXRlTWlwbWFwcyAmJiAodGhpcy5fcmVuZGVyZXIuY29udGV4dC5zdXBwb3J0cy5ub25Qb3dPZjJtaXBtYXBzIHx8IHNvdXJjZS5pc1Bvd2VyT2ZUd28pKSB7XG4gICAgICBjb25zdCBiaWdnZXN0RGltZW5zaW9uID0gTWF0aC5tYXgoc291cmNlLndpZHRoLCBzb3VyY2UuaGVpZ2h0KTtcbiAgICAgIHNvdXJjZS5taXBMZXZlbENvdW50ID0gTWF0aC5mbG9vcihNYXRoLmxvZzIoYmlnZ2VzdERpbWVuc2lvbikpICsgMTtcbiAgICB9XG4gICAgdGhpcy5fZ2xUZXh0dXJlc1tzb3VyY2UudWlkXSA9IGdsVGV4dHVyZTtcbiAgICBpZiAoIXRoaXMubWFuYWdlZFRleHR1cmVzLmluY2x1ZGVzKHNvdXJjZSkpIHtcbiAgICAgIHNvdXJjZS5vbihcInVwZGF0ZVwiLCB0aGlzLm9uU291cmNlVXBkYXRlLCB0aGlzKTtcbiAgICAgIHNvdXJjZS5vbihcInJlc2l6ZVwiLCB0aGlzLm9uU291cmNlVXBkYXRlLCB0aGlzKTtcbiAgICAgIHNvdXJjZS5vbihcInN0eWxlQ2hhbmdlXCIsIHRoaXMub25TdHlsZUNoYW5nZSwgdGhpcyk7XG4gICAgICBzb3VyY2Uub24oXCJkZXN0cm95XCIsIHRoaXMub25Tb3VyY2VEZXN0cm95LCB0aGlzKTtcbiAgICAgIHNvdXJjZS5vbihcInVubG9hZFwiLCB0aGlzLm9uU291cmNlVW5sb2FkLCB0aGlzKTtcbiAgICAgIHNvdXJjZS5vbihcInVwZGF0ZU1pcG1hcHNcIiwgdGhpcy5vblVwZGF0ZU1pcG1hcHMsIHRoaXMpO1xuICAgICAgdGhpcy5tYW5hZ2VkVGV4dHVyZXMucHVzaChzb3VyY2UpO1xuICAgIH1cbiAgICB0aGlzLm9uU291cmNlVXBkYXRlKHNvdXJjZSk7XG4gICAgdGhpcy51cGRhdGVTdHlsZShzb3VyY2UsIGZhbHNlKTtcbiAgICByZXR1cm4gZ2xUZXh0dXJlO1xuICB9XG4gIG9uU3R5bGVDaGFuZ2Uoc291cmNlKSB7XG4gICAgdGhpcy51cGRhdGVTdHlsZShzb3VyY2UsIGZhbHNlKTtcbiAgfVxuICB1cGRhdGVTdHlsZShzb3VyY2UsIGZpcnN0Q3JlYXRpb24pIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGNvbnN0IGdsVGV4dHVyZSA9IHRoaXMuZ2V0R2xTb3VyY2Uoc291cmNlKTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBnbFRleHR1cmUudGV4dHVyZSk7XG4gICAgdGhpcy5fYm91bmRUZXh0dXJlc1t0aGlzLl9hY3RpdmVUZXh0dXJlTG9jYXRpb25dID0gc291cmNlO1xuICAgIGFwcGx5U3R5bGVQYXJhbXMoXG4gICAgICBzb3VyY2Uuc3R5bGUsXG4gICAgICBnbCxcbiAgICAgIHNvdXJjZS5taXBMZXZlbENvdW50ID4gMSxcbiAgICAgIHRoaXMuX3JlbmRlcmVyLmNvbnRleHQuZXh0ZW5zaW9ucy5hbmlzb3Ryb3BpY0ZpbHRlcmluZyxcbiAgICAgIFwidGV4UGFyYW1ldGVyaVwiLFxuICAgICAgZ2wuVEVYVFVSRV8yRCxcbiAgICAgIC8vIHdpbGwgZm9yY2UgYSBjbGFtcCB0byBlZGdlIGlmIHRoZSB0ZXh0dXJlIGlzIG5vdCBhIHBvd2VyIG9mIHR3b1xuICAgICAgIXRoaXMuX3JlbmRlcmVyLmNvbnRleHQuc3VwcG9ydHMubm9uUG93T2Yyd3JhcHBpbmcgJiYgIXNvdXJjZS5pc1Bvd2VyT2ZUd28sXG4gICAgICBmaXJzdENyZWF0aW9uXG4gICAgKTtcbiAgfVxuICBvblNvdXJjZVVubG9hZChzb3VyY2UpIHtcbiAgICBjb25zdCBnbFRleHR1cmUgPSB0aGlzLl9nbFRleHR1cmVzW3NvdXJjZS51aWRdO1xuICAgIGlmICghZ2xUZXh0dXJlKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMudW5iaW5kKHNvdXJjZSk7XG4gICAgdGhpcy5fZ2xUZXh0dXJlc1tzb3VyY2UudWlkXSA9IG51bGw7XG4gICAgdGhpcy5fZ2wuZGVsZXRlVGV4dHVyZShnbFRleHR1cmUudGV4dHVyZSk7XG4gIH1cbiAgb25Tb3VyY2VVcGRhdGUoc291cmNlKSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICBjb25zdCBnbFRleHR1cmUgPSB0aGlzLmdldEdsU291cmNlKHNvdXJjZSk7XG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgZ2xUZXh0dXJlLnRleHR1cmUpO1xuICAgIHRoaXMuX2JvdW5kVGV4dHVyZXNbdGhpcy5fYWN0aXZlVGV4dHVyZUxvY2F0aW9uXSA9IHNvdXJjZTtcbiAgICBjb25zdCBwcmVtdWx0aXBsaWVkQWxwaGEgPSBzb3VyY2UuYWxwaGFNb2RlID09PSBcInByZW11bHRpcGx5LWFscGhhLW9uLXVwbG9hZFwiO1xuICAgIGlmICh0aGlzLl9wcmVtdWx0aXBseUFscGhhICE9PSBwcmVtdWx0aXBsaWVkQWxwaGEpIHtcbiAgICAgIHRoaXMuX3ByZW11bHRpcGx5QWxwaGEgPSBwcmVtdWx0aXBsaWVkQWxwaGE7XG4gICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIHByZW11bHRpcGxpZWRBbHBoYSk7XG4gICAgfVxuICAgIGlmICh0aGlzLl91cGxvYWRzW3NvdXJjZS51cGxvYWRNZXRob2RJZF0pIHtcbiAgICAgIHRoaXMuX3VwbG9hZHNbc291cmNlLnVwbG9hZE1ldGhvZElkXS51cGxvYWQoc291cmNlLCBnbFRleHR1cmUsIGdsLCB0aGlzLl9yZW5kZXJlci5jb250ZXh0LndlYkdMVmVyc2lvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgc291cmNlLnBpeGVsV2lkdGgsIHNvdXJjZS5waXhlbEhlaWdodCwgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgbnVsbCk7XG4gICAgfVxuICAgIGlmIChzb3VyY2UuYXV0b0dlbmVyYXRlTWlwbWFwcyAmJiBzb3VyY2UubWlwTGV2ZWxDb3VudCA+IDEpIHtcbiAgICAgIHRoaXMub25VcGRhdGVNaXBtYXBzKHNvdXJjZSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICBvblVwZGF0ZU1pcG1hcHMoc291cmNlLCBiaW5kID0gdHJ1ZSkge1xuICAgIGlmIChiaW5kKVxuICAgICAgdGhpcy5iaW5kU291cmNlKHNvdXJjZSwgMCk7XG4gICAgY29uc3QgZ2xUZXh0dXJlID0gdGhpcy5nZXRHbFNvdXJjZShzb3VyY2UpO1xuICAgIHRoaXMuX2dsLmdlbmVyYXRlTWlwbWFwKGdsVGV4dHVyZS50YXJnZXQpO1xuICB9XG4gIG9uU291cmNlRGVzdHJveShzb3VyY2UpIHtcbiAgICBzb3VyY2Uub2ZmKFwiZGVzdHJveVwiLCB0aGlzLm9uU291cmNlRGVzdHJveSwgdGhpcyk7XG4gICAgc291cmNlLm9mZihcInVwZGF0ZVwiLCB0aGlzLm9uU291cmNlVXBkYXRlLCB0aGlzKTtcbiAgICBzb3VyY2Uub2ZmKFwicmVzaXplXCIsIHRoaXMub25Tb3VyY2VVcGRhdGUsIHRoaXMpO1xuICAgIHNvdXJjZS5vZmYoXCJ1bmxvYWRcIiwgdGhpcy5vblNvdXJjZVVubG9hZCwgdGhpcyk7XG4gICAgc291cmNlLm9mZihcInN0eWxlQ2hhbmdlXCIsIHRoaXMub25TdHlsZUNoYW5nZSwgdGhpcyk7XG4gICAgc291cmNlLm9mZihcInVwZGF0ZU1pcG1hcHNcIiwgdGhpcy5vblVwZGF0ZU1pcG1hcHMsIHRoaXMpO1xuICAgIHRoaXMubWFuYWdlZFRleHR1cmVzLnNwbGljZSh0aGlzLm1hbmFnZWRUZXh0dXJlcy5pbmRleE9mKHNvdXJjZSksIDEpO1xuICAgIHRoaXMub25Tb3VyY2VVbmxvYWQoc291cmNlKTtcbiAgfVxuICBfaW5pdFNhbXBsZXIoc3R5bGUpIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGNvbnN0IGdsU2FtcGxlciA9IHRoaXMuX2dsLmNyZWF0ZVNhbXBsZXIoKTtcbiAgICB0aGlzLl9nbFNhbXBsZXJzW3N0eWxlLl9yZXNvdXJjZUlkXSA9IGdsU2FtcGxlcjtcbiAgICBhcHBseVN0eWxlUGFyYW1zKFxuICAgICAgc3R5bGUsXG4gICAgICBnbCxcbiAgICAgIHRoaXMuX2JvdW5kVGV4dHVyZXNbdGhpcy5fYWN0aXZlVGV4dHVyZUxvY2F0aW9uXS5taXBMZXZlbENvdW50ID4gMSxcbiAgICAgIHRoaXMuX3JlbmRlcmVyLmNvbnRleHQuZXh0ZW5zaW9ucy5hbmlzb3Ryb3BpY0ZpbHRlcmluZyxcbiAgICAgIFwic2FtcGxlclBhcmFtZXRlcmlcIixcbiAgICAgIGdsU2FtcGxlcixcbiAgICAgIGZhbHNlLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuX2dsU2FtcGxlcnNbc3R5bGUuX3Jlc291cmNlSWRdO1xuICB9XG4gIF9nZXRHbFNhbXBsZXIoc2FtcGxlcikge1xuICAgIHJldHVybiB0aGlzLl9nbFNhbXBsZXJzW3NhbXBsZXIuX3Jlc291cmNlSWRdIHx8IHRoaXMuX2luaXRTYW1wbGVyKHNhbXBsZXIpO1xuICB9XG4gIGdldEdsU291cmNlKHNvdXJjZSkge1xuICAgIHJldHVybiB0aGlzLl9nbFRleHR1cmVzW3NvdXJjZS51aWRdIHx8IHRoaXMuX2luaXRTb3VyY2Uoc291cmNlKTtcbiAgfVxuICBnZW5lcmF0ZUNhbnZhcyh0ZXh0dXJlKSB7XG4gICAgY29uc3QgeyBwaXhlbHMsIHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMuZ2V0UGl4ZWxzKHRleHR1cmUpO1xuICAgIGNvbnN0IGNhbnZhcyA9IERPTUFkYXB0ZXIuZ2V0KCkuY3JlYXRlQ2FudmFzKCk7XG4gICAgY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGlmIChjdHgpIHtcbiAgICAgIGNvbnN0IGltYWdlRGF0YSA9IGN0eC5jcmVhdGVJbWFnZURhdGEod2lkdGgsIGhlaWdodCk7XG4gICAgICBpbWFnZURhdGEuZGF0YS5zZXQocGl4ZWxzKTtcbiAgICAgIGN0eC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhbnZhcztcbiAgfVxuICBnZXRQaXhlbHModGV4dHVyZSkge1xuICAgIGNvbnN0IHJlc29sdXRpb24gPSB0ZXh0dXJlLnNvdXJjZS5yZXNvbHV0aW9uO1xuICAgIGNvbnN0IGZyYW1lID0gdGV4dHVyZS5mcmFtZTtcbiAgICBjb25zdCB3aWR0aCA9IE1hdGgubWF4KE1hdGgucm91bmQoZnJhbWUud2lkdGggKiByZXNvbHV0aW9uKSwgMSk7XG4gICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5tYXgoTWF0aC5yb3VuZChmcmFtZS5oZWlnaHQgKiByZXNvbHV0aW9uKSwgMSk7XG4gICAgY29uc3QgcGl4ZWxzID0gbmV3IFVpbnQ4QXJyYXkoQllURVNfUEVSX1BJWEVMICogd2lkdGggKiBoZWlnaHQpO1xuICAgIGNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG4gICAgY29uc3QgcmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIucmVuZGVyVGFyZ2V0LmdldFJlbmRlclRhcmdldCh0ZXh0dXJlKTtcbiAgICBjb25zdCBnbFJlbnRlclRhcmdldCA9IHJlbmRlcmVyLnJlbmRlclRhcmdldC5nZXRHcHVSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KTtcbiAgICBjb25zdCBnbCA9IHJlbmRlcmVyLmdsO1xuICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2xSZW50ZXJUYXJnZXQucmVzb2x2ZVRhcmdldEZyYW1lYnVmZmVyKTtcbiAgICBnbC5yZWFkUGl4ZWxzKFxuICAgICAgTWF0aC5yb3VuZChmcmFtZS54ICogcmVzb2x1dGlvbiksXG4gICAgICBNYXRoLnJvdW5kKGZyYW1lLnkgKiByZXNvbHV0aW9uKSxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgZ2wuUkdCQSxcbiAgICAgIGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgICBwaXhlbHNcbiAgICApO1xuICAgIGlmIChmYWxzZSkge1xuICAgICAgdW5wcmVtdWx0aXBseUFscGhhKHBpeGVscyk7XG4gICAgfVxuICAgIHJldHVybiB7IHBpeGVsczogbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHBpeGVscy5idWZmZXIpLCB3aWR0aCwgaGVpZ2h0IH07XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLm1hbmFnZWRUZXh0dXJlcy5zbGljZSgpLmZvckVhY2goKHNvdXJjZSkgPT4gdGhpcy5vblNvdXJjZURlc3Ryb3koc291cmNlKSk7XG4gICAgdGhpcy5tYW5hZ2VkVGV4dHVyZXMgPSBudWxsO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcbiAgfVxuICByZXNldFN0YXRlKCkge1xuICAgIHRoaXMuX2FjdGl2ZVRleHR1cmVMb2NhdGlvbiA9IC0xO1xuICAgIHRoaXMuX2JvdW5kVGV4dHVyZXMuZmlsbChUZXh0dXJlLkVNUFRZLnNvdXJjZSk7XG4gICAgdGhpcy5fYm91bmRTYW1wbGVycyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgdGhpcy5fcHJlbXVsdGlwbHlBbHBoYSA9IGZhbHNlO1xuICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgdGhpcy5fcHJlbXVsdGlwbHlBbHBoYSk7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HbFRleHR1cmVTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbVxuICBdLFxuICBuYW1lOiBcInRleHR1cmVcIlxufTtcblxuZXhwb3J0IHsgR2xUZXh0dXJlU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbFRleHR1cmVTeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgRE9NQWRhcHRlciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2Vudmlyb25tZW50L2FkYXB0ZXIubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBtYXBGb3JtYXRUb0dsSW50ZXJuYWxGb3JtYXQoZ2wsIGV4dGVuc2lvbnMpIHtcbiAgbGV0IHNyZ2IgPSB7fTtcbiAgbGV0IGJncmE4dW5vcm0gPSBnbC5SR0JBO1xuICBpZiAoIShnbCBpbnN0YW5jZW9mIERPTUFkYXB0ZXIuZ2V0KCkuZ2V0V2ViR0xSZW5kZXJpbmdDb250ZXh0KCkpKSB7XG4gICAgc3JnYiA9IHtcbiAgICAgIFwicmdiYTh1bm9ybS1zcmdiXCI6IGdsLlNSR0I4X0FMUEhBOCxcbiAgICAgIFwiYmdyYTh1bm9ybS1zcmdiXCI6IGdsLlNSR0I4X0FMUEhBOFxuICAgIH07XG4gICAgYmdyYTh1bm9ybSA9IGdsLlJHQkE4O1xuICB9IGVsc2UgaWYgKGV4dGVuc2lvbnMuc3JnYikge1xuICAgIHNyZ2IgPSB7XG4gICAgICBcInJnYmE4dW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLnNyZ2IuU1JHQjhfQUxQSEE4X0VYVCxcbiAgICAgIFwiYmdyYTh1bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuc3JnYi5TUkdCOF9BTFBIQThfRVhUXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIC8vIDgtYml0IGZvcm1hdHNcbiAgICByOHVub3JtOiBnbC5SOCxcbiAgICByOHNub3JtOiBnbC5SOF9TTk9STSxcbiAgICByOHVpbnQ6IGdsLlI4VUksXG4gICAgcjhzaW50OiBnbC5SOEksXG4gICAgLy8gMTYtYml0IGZvcm1hdHNcbiAgICByMTZ1aW50OiBnbC5SMTZVSSxcbiAgICByMTZzaW50OiBnbC5SMTZJLFxuICAgIHIxNmZsb2F0OiBnbC5SMTZGLFxuICAgIHJnOHVub3JtOiBnbC5SRzgsXG4gICAgcmc4c25vcm06IGdsLlJHOF9TTk9STSxcbiAgICByZzh1aW50OiBnbC5SRzhVSSxcbiAgICByZzhzaW50OiBnbC5SRzhJLFxuICAgIC8vIDMyLWJpdCBmb3JtYXRzXG4gICAgcjMydWludDogZ2wuUjMyVUksXG4gICAgcjMyc2ludDogZ2wuUjMySSxcbiAgICByMzJmbG9hdDogZ2wuUjMyRixcbiAgICByZzE2dWludDogZ2wuUkcxNlVJLFxuICAgIHJnMTZzaW50OiBnbC5SRzE2SSxcbiAgICByZzE2ZmxvYXQ6IGdsLlJHMTZGLFxuICAgIHJnYmE4dW5vcm06IGdsLlJHQkEsXG4gICAgLi4uc3JnYixcbiAgICAvLyBQYWNrZWQgMzItYml0IGZvcm1hdHNcbiAgICByZ2JhOHNub3JtOiBnbC5SR0JBOF9TTk9STSxcbiAgICByZ2JhOHVpbnQ6IGdsLlJHQkE4VUksXG4gICAgcmdiYThzaW50OiBnbC5SR0JBOEksXG4gICAgYmdyYTh1bm9ybSxcbiAgICByZ2I5ZTV1ZmxvYXQ6IGdsLlJHQjlfRTUsXG4gICAgcmdiMTBhMnVub3JtOiBnbC5SR0IxMF9BMixcbiAgICByZzExYjEwdWZsb2F0OiBnbC5SMTFGX0cxMUZfQjEwRixcbiAgICAvLyA2NC1iaXQgZm9ybWF0c1xuICAgIHJnMzJ1aW50OiBnbC5SRzMyVUksXG4gICAgcmczMnNpbnQ6IGdsLlJHMzJJLFxuICAgIHJnMzJmbG9hdDogZ2wuUkczMkYsXG4gICAgcmdiYTE2dWludDogZ2wuUkdCQTE2VUksXG4gICAgcmdiYTE2c2ludDogZ2wuUkdCQTE2SSxcbiAgICByZ2JhMTZmbG9hdDogZ2wuUkdCQTE2RixcbiAgICAvLyAxMjgtYml0IGZvcm1hdHNcbiAgICByZ2JhMzJ1aW50OiBnbC5SR0JBMzJVSSxcbiAgICByZ2JhMzJzaW50OiBnbC5SR0JBMzJJLFxuICAgIHJnYmEzMmZsb2F0OiBnbC5SR0JBMzJGLFxuICAgIC8vIERlcHRoL3N0ZW5jaWwgZm9ybWF0c1xuICAgIHN0ZW5jaWw4OiBnbC5TVEVOQ0lMX0lOREVYOCxcbiAgICBkZXB0aDE2dW5vcm06IGdsLkRFUFRIX0NPTVBPTkVOVDE2LFxuICAgIGRlcHRoMjRwbHVzOiBnbC5ERVBUSF9DT01QT05FTlQyNCxcbiAgICBcImRlcHRoMjRwbHVzLXN0ZW5jaWw4XCI6IGdsLkRFUFRIMjRfU1RFTkNJTDgsXG4gICAgZGVwdGgzMmZsb2F0OiBnbC5ERVBUSF9DT01QT05FTlQzMkYsXG4gICAgXCJkZXB0aDMyZmxvYXQtc3RlbmNpbDhcIjogZ2wuREVQVEgzMkZfU1RFTkNJTDgsXG4gICAgLy8gQ29tcHJlc3NlZCBmb3JtYXRzXG4gICAgLi4uZXh0ZW5zaW9ucy5zM3RjID8ge1xuICAgICAgXCJiYzEtcmdiYS11bm9ybVwiOiBleHRlbnNpb25zLnMzdGMuQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQsXG4gICAgICBcImJjMi1yZ2JhLXVub3JtXCI6IGV4dGVuc2lvbnMuczN0Yy5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVCxcbiAgICAgIFwiYmMzLXJnYmEtdW5vcm1cIjogZXh0ZW5zaW9ucy5zM3RjLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUXG4gICAgfSA6IHt9LFxuICAgIC4uLmV4dGVuc2lvbnMuczN0Y19zUkdCID8ge1xuICAgICAgXCJiYzEtcmdiYS11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuczN0Y19zUkdCLkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDFfRVhULFxuICAgICAgXCJiYzItcmdiYS11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuczN0Y19zUkdCLkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDNfRVhULFxuICAgICAgXCJiYzMtcmdiYS11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuczN0Y19zUkdCLkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDVfRVhUXG4gICAgfSA6IHt9LFxuICAgIC4uLmV4dGVuc2lvbnMucmd0YyA/IHtcbiAgICAgIFwiYmM0LXItdW5vcm1cIjogZXh0ZW5zaW9ucy5yZ3RjLkNPTVBSRVNTRURfUkVEX1JHVEMxX0VYVCxcbiAgICAgIFwiYmM0LXItc25vcm1cIjogZXh0ZW5zaW9ucy5yZ3RjLkNPTVBSRVNTRURfU0lHTkVEX1JFRF9SR1RDMV9FWFQsXG4gICAgICBcImJjNS1yZy11bm9ybVwiOiBleHRlbnNpb25zLnJndGMuQ09NUFJFU1NFRF9SRURfR1JFRU5fUkdUQzJfRVhULFxuICAgICAgXCJiYzUtcmctc25vcm1cIjogZXh0ZW5zaW9ucy5yZ3RjLkNPTVBSRVNTRURfU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9FWFRcbiAgICB9IDoge30sXG4gICAgLi4uZXh0ZW5zaW9ucy5icHRjID8ge1xuICAgICAgXCJiYzZoLXJnYi1mbG9hdFwiOiBleHRlbnNpb25zLmJwdGMuQ09NUFJFU1NFRF9SR0JfQlBUQ19TSUdORURfRkxPQVRfRVhULFxuICAgICAgXCJiYzZoLXJnYi11ZmxvYXRcIjogZXh0ZW5zaW9ucy5icHRjLkNPTVBSRVNTRURfUkdCX0JQVENfVU5TSUdORURfRkxPQVRfRVhULFxuICAgICAgXCJiYzctcmdiYS11bm9ybVwiOiBleHRlbnNpb25zLmJwdGMuQ09NUFJFU1NFRF9SR0JBX0JQVENfVU5PUk1fRVhULFxuICAgICAgXCJiYzctcmdiYS11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuYnB0Yy5DT01QUkVTU0VEX1NSR0JfQUxQSEFfQlBUQ19VTk9STV9FWFRcbiAgICB9IDoge30sXG4gICAgLi4uZXh0ZW5zaW9ucy5ldGMgPyB7XG4gICAgICBcImV0YzItcmdiOHVub3JtXCI6IGV4dGVuc2lvbnMuZXRjLkNPTVBSRVNTRURfUkdCOF9FVEMyLFxuICAgICAgXCJldGMyLXJnYjh1bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuZXRjLkNPTVBSRVNTRURfU1JHQjhfRVRDMixcbiAgICAgIFwiZXRjMi1yZ2I4YTF1bm9ybVwiOiBleHRlbnNpb25zLmV0Yy5DT01QUkVTU0VEX1JHQjhfUFVOQ0hUSFJPVUdIX0FMUEhBMV9FVEMyLFxuICAgICAgXCJldGMyLXJnYjhhMXVub3JtLXNyZ2JcIjogZXh0ZW5zaW9ucy5ldGMuQ09NUFJFU1NFRF9TUkdCOF9QVU5DSFRIUk9VR0hfQUxQSEExX0VUQzIsXG4gICAgICBcImV0YzItcmdiYTh1bm9ybVwiOiBleHRlbnNpb25zLmV0Yy5DT01QUkVTU0VEX1JHQkE4X0VUQzJfRUFDLFxuICAgICAgXCJldGMyLXJnYmE4dW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmV0Yy5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9FVEMyX0VBQyxcbiAgICAgIFwiZWFjLXIxMXVub3JtXCI6IGV4dGVuc2lvbnMuZXRjLkNPTVBSRVNTRURfUjExX0VBQyxcbiAgICAgIC8vICdlYWMtcjExc25vcm0nXG4gICAgICBcImVhYy1yZzExdW5vcm1cIjogZXh0ZW5zaW9ucy5ldGMuQ09NUFJFU1NFRF9TSUdORURfUkcxMV9FQUNcbiAgICAgIC8vICdlYWMtcmcxMXNub3JtJ1xuICAgIH0gOiB7fSxcbiAgICAuLi5leHRlbnNpb25zLmFzdGMgPyB7XG4gICAgICBcImFzdGMtNHg0LXVub3JtXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1JHQkFfQVNUQ180eDRfS0hSLFxuICAgICAgXCJhc3RjLTR4NC11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzR4NF9LSFIsXG4gICAgICBcImFzdGMtNXg0LXVub3JtXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1JHQkFfQVNUQ181eDRfS0hSLFxuICAgICAgXCJhc3RjLTV4NC11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzV4NF9LSFIsXG4gICAgICBcImFzdGMtNXg1LXVub3JtXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1JHQkFfQVNUQ181eDVfS0hSLFxuICAgICAgXCJhc3RjLTV4NS11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzV4NV9LSFIsXG4gICAgICBcImFzdGMtNng1LXVub3JtXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1JHQkFfQVNUQ182eDVfS0hSLFxuICAgICAgXCJhc3RjLTZ4NS11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzZ4NV9LSFIsXG4gICAgICBcImFzdGMtNng2LXVub3JtXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1JHQkFfQVNUQ182eDZfS0hSLFxuICAgICAgXCJhc3RjLTZ4Ni11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzZ4Nl9LSFIsXG4gICAgICBcImFzdGMtOHg1LXVub3JtXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1JHQkFfQVNUQ184eDVfS0hSLFxuICAgICAgXCJhc3RjLTh4NS11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4NV9LSFIsXG4gICAgICBcImFzdGMtOHg2LXVub3JtXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1JHQkFfQVNUQ184eDZfS0hSLFxuICAgICAgXCJhc3RjLTh4Ni11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4Nl9LSFIsXG4gICAgICBcImFzdGMtOHg4LXVub3JtXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1JHQkFfQVNUQ184eDhfS0hSLFxuICAgICAgXCJhc3RjLTh4OC11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4OF9LSFIsXG4gICAgICBcImFzdGMtMTB4NS11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4NV9LSFIsXG4gICAgICBcImFzdGMtMTB4NS11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDVfS0hSLFxuICAgICAgXCJhc3RjLTEweDYtdW5vcm1cIjogZXh0ZW5zaW9ucy5hc3RjLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDZfS0hSLFxuICAgICAgXCJhc3RjLTEweDYtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg2X0tIUixcbiAgICAgIFwiYXN0Yy0xMHg4LXVub3JtXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg4X0tIUixcbiAgICAgIFwiYXN0Yy0xMHg4LXVub3JtLXNyZ2JcIjogZXh0ZW5zaW9ucy5hc3RjLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4OF9LSFIsXG4gICAgICBcImFzdGMtMTB4MTAtdW5vcm1cIjogZXh0ZW5zaW9ucy5hc3RjLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDEwX0tIUixcbiAgICAgIFwiYXN0Yy0xMHgxMC11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDEwX0tIUixcbiAgICAgIFwiYXN0Yy0xMngxMC11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfMTJ4MTBfS0hSLFxuICAgICAgXCJhc3RjLTEyeDEwLXVub3JtLXNyZ2JcIjogZXh0ZW5zaW9ucy5hc3RjLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTBfS0hSLFxuICAgICAgXCJhc3RjLTEyeDEyLXVub3JtXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMngxMl9LSFIsXG4gICAgICBcImFzdGMtMTJ4MTItdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMngxMl9LSFJcbiAgICB9IDoge31cbiAgfTtcbn1cblxuZXhwb3J0IHsgbWFwRm9ybWF0VG9HbEludGVybmFsRm9ybWF0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBGb3JtYXRUb0dsSW50ZXJuYWxGb3JtYXQubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBtYXBGb3JtYXRUb0dsVHlwZShnbCkge1xuICByZXR1cm4ge1xuICAgIC8vIDgtYml0IGZvcm1hdHNcbiAgICByOHVub3JtOiBnbC5VTlNJR05FRF9CWVRFLFxuICAgIHI4c25vcm06IGdsLkJZVEUsXG4gICAgcjh1aW50OiBnbC5VTlNJR05FRF9CWVRFLFxuICAgIHI4c2ludDogZ2wuQllURSxcbiAgICAvLyAxNi1iaXQgZm9ybWF0c1xuICAgIHIxNnVpbnQ6IGdsLlVOU0lHTkVEX1NIT1JULFxuICAgIHIxNnNpbnQ6IGdsLlNIT1JULFxuICAgIHIxNmZsb2F0OiBnbC5IQUxGX0ZMT0FULFxuICAgIHJnOHVub3JtOiBnbC5VTlNJR05FRF9CWVRFLFxuICAgIHJnOHNub3JtOiBnbC5CWVRFLFxuICAgIHJnOHVpbnQ6IGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgcmc4c2ludDogZ2wuQllURSxcbiAgICAvLyAzMi1iaXQgZm9ybWF0c1xuICAgIHIzMnVpbnQ6IGdsLlVOU0lHTkVEX0lOVCxcbiAgICByMzJzaW50OiBnbC5JTlQsXG4gICAgcjMyZmxvYXQ6IGdsLkZMT0FULFxuICAgIHJnMTZ1aW50OiBnbC5VTlNJR05FRF9TSE9SVCxcbiAgICByZzE2c2ludDogZ2wuU0hPUlQsXG4gICAgcmcxNmZsb2F0OiBnbC5IQUxGX0ZMT0FULFxuICAgIHJnYmE4dW5vcm06IGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgXCJyZ2JhOHVub3JtLXNyZ2JcIjogZ2wuVU5TSUdORURfQllURSxcbiAgICAvLyBQYWNrZWQgMzItYml0IGZvcm1hdHNcbiAgICByZ2JhOHNub3JtOiBnbC5CWVRFLFxuICAgIHJnYmE4dWludDogZ2wuVU5TSUdORURfQllURSxcbiAgICByZ2JhOHNpbnQ6IGdsLkJZVEUsXG4gICAgYmdyYTh1bm9ybTogZ2wuVU5TSUdORURfQllURSxcbiAgICBcImJncmE4dW5vcm0tc3JnYlwiOiBnbC5VTlNJR05FRF9CWVRFLFxuICAgIHJnYjllNXVmbG9hdDogZ2wuVU5TSUdORURfSU5UXzVfOV85XzlfUkVWLFxuICAgIHJnYjEwYTJ1bm9ybTogZ2wuVU5TSUdORURfSU5UXzJfMTBfMTBfMTBfUkVWLFxuICAgIHJnMTFiMTB1ZmxvYXQ6IGdsLlVOU0lHTkVEX0lOVF8xMEZfMTFGXzExRl9SRVYsXG4gICAgLy8gNjQtYml0IGZvcm1hdHNcbiAgICByZzMydWludDogZ2wuVU5TSUdORURfSU5ULFxuICAgIHJnMzJzaW50OiBnbC5JTlQsXG4gICAgcmczMmZsb2F0OiBnbC5GTE9BVCxcbiAgICByZ2JhMTZ1aW50OiBnbC5VTlNJR05FRF9TSE9SVCxcbiAgICByZ2JhMTZzaW50OiBnbC5TSE9SVCxcbiAgICByZ2JhMTZmbG9hdDogZ2wuSEFMRl9GTE9BVCxcbiAgICAvLyAxMjgtYml0IGZvcm1hdHNcbiAgICByZ2JhMzJ1aW50OiBnbC5VTlNJR05FRF9JTlQsXG4gICAgcmdiYTMyc2ludDogZ2wuSU5ULFxuICAgIHJnYmEzMmZsb2F0OiBnbC5GTE9BVCxcbiAgICAvLyBEZXB0aC9zdGVuY2lsIGZvcm1hdHNcbiAgICBzdGVuY2lsODogZ2wuVU5TSUdORURfQllURSxcbiAgICBkZXB0aDE2dW5vcm06IGdsLlVOU0lHTkVEX1NIT1JULFxuICAgIGRlcHRoMjRwbHVzOiBnbC5VTlNJR05FRF9JTlQsXG4gICAgXCJkZXB0aDI0cGx1cy1zdGVuY2lsOFwiOiBnbC5VTlNJR05FRF9JTlRfMjRfOCxcbiAgICBkZXB0aDMyZmxvYXQ6IGdsLkZMT0FULFxuICAgIFwiZGVwdGgzMmZsb2F0LXN0ZW5jaWw4XCI6IGdsLkZMT0FUXzMyX1VOU0lHTkVEX0lOVF8yNF84X1JFVlxuICB9O1xufVxuXG5leHBvcnQgeyBtYXBGb3JtYXRUb0dsVHlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwRm9ybWF0VG9HbFR5cGUubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBtYXBGb3JtYXRUb0dsRm9ybWF0KGdsKSB7XG4gIHJldHVybiB7XG4gICAgLy8gOC1iaXQgZm9ybWF0c1xuICAgIHI4dW5vcm06IGdsLlJFRCxcbiAgICByOHNub3JtOiBnbC5SRUQsXG4gICAgcjh1aW50OiBnbC5SRUQsXG4gICAgcjhzaW50OiBnbC5SRUQsXG4gICAgLy8gMTYtYml0IGZvcm1hdHNcbiAgICByMTZ1aW50OiBnbC5SRUQsXG4gICAgcjE2c2ludDogZ2wuUkVELFxuICAgIHIxNmZsb2F0OiBnbC5SRUQsXG4gICAgcmc4dW5vcm06IGdsLlJHLFxuICAgIHJnOHNub3JtOiBnbC5SRyxcbiAgICByZzh1aW50OiBnbC5SRyxcbiAgICByZzhzaW50OiBnbC5SRyxcbiAgICAvLyAzMi1iaXQgZm9ybWF0c1xuICAgIHIzMnVpbnQ6IGdsLlJFRCxcbiAgICByMzJzaW50OiBnbC5SRUQsXG4gICAgcjMyZmxvYXQ6IGdsLlJFRCxcbiAgICByZzE2dWludDogZ2wuUkcsXG4gICAgcmcxNnNpbnQ6IGdsLlJHLFxuICAgIHJnMTZmbG9hdDogZ2wuUkcsXG4gICAgcmdiYTh1bm9ybTogZ2wuUkdCQSxcbiAgICBcInJnYmE4dW5vcm0tc3JnYlwiOiBnbC5SR0JBLFxuICAgIC8vIFBhY2tlZCAzMi1iaXQgZm9ybWF0c1xuICAgIHJnYmE4c25vcm06IGdsLlJHQkEsXG4gICAgcmdiYTh1aW50OiBnbC5SR0JBLFxuICAgIHJnYmE4c2ludDogZ2wuUkdCQSxcbiAgICBiZ3JhOHVub3JtOiBnbC5SR0JBLFxuICAgIFwiYmdyYTh1bm9ybS1zcmdiXCI6IGdsLlJHQkEsXG4gICAgcmdiOWU1dWZsb2F0OiBnbC5SR0IsXG4gICAgcmdiMTBhMnVub3JtOiBnbC5SR0JBLFxuICAgIHJnMTFiMTB1ZmxvYXQ6IGdsLlJHQixcbiAgICAvLyA2NC1iaXQgZm9ybWF0c1xuICAgIHJnMzJ1aW50OiBnbC5SRyxcbiAgICByZzMyc2ludDogZ2wuUkcsXG4gICAgcmczMmZsb2F0OiBnbC5SRyxcbiAgICByZ2JhMTZ1aW50OiBnbC5SR0JBLFxuICAgIHJnYmExNnNpbnQ6IGdsLlJHQkEsXG4gICAgcmdiYTE2ZmxvYXQ6IGdsLlJHQkEsXG4gICAgLy8gMTI4LWJpdCBmb3JtYXRzXG4gICAgcmdiYTMydWludDogZ2wuUkdCQSxcbiAgICByZ2JhMzJzaW50OiBnbC5SR0JBLFxuICAgIHJnYmEzMmZsb2F0OiBnbC5SR0JBLFxuICAgIC8vIERlcHRoL3N0ZW5jaWwgZm9ybWF0c1xuICAgIHN0ZW5jaWw4OiBnbC5TVEVOQ0lMX0lOREVYOCxcbiAgICBkZXB0aDE2dW5vcm06IGdsLkRFUFRIX0NPTVBPTkVOVCxcbiAgICBkZXB0aDI0cGx1czogZ2wuREVQVEhfQ09NUE9ORU5ULFxuICAgIFwiZGVwdGgyNHBsdXMtc3RlbmNpbDhcIjogZ2wuREVQVEhfU1RFTkNJTCxcbiAgICBkZXB0aDMyZmxvYXQ6IGdsLkRFUFRIX0NPTVBPTkVOVCxcbiAgICBcImRlcHRoMzJmbG9hdC1zdGVuY2lsOFwiOiBnbC5ERVBUSF9TVEVOQ0lMXG4gIH07XG59XG5cbmV4cG9ydCB7IG1hcEZvcm1hdFRvR2xGb3JtYXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcEZvcm1hdFRvR2xGb3JtYXQubWpzLm1hcFxuIiwiaW1wb3J0IHsgZXh0ZW5zaW9ucywgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgR2xHcmFwaGljc0FkYXB0b3IgfSBmcm9tICcuLi8uLi8uLi9zY2VuZS9ncmFwaGljcy9nbC9HbEdyYXBoaWNzQWRhcHRvci5tanMnO1xuaW1wb3J0IHsgR2xNZXNoQWRhcHRvciB9IGZyb20gJy4uLy4uLy4uL3NjZW5lL21lc2gvZ2wvR2xNZXNoQWRhcHRvci5tanMnO1xuaW1wb3J0IHsgR2xCYXRjaEFkYXB0b3IgfSBmcm9tICcuLi8uLi9iYXRjaGVyL2dsL0dsQmF0Y2hBZGFwdG9yLm1qcyc7XG5pbXBvcnQgeyBBYnN0cmFjdFJlbmRlcmVyIH0gZnJvbSAnLi4vc2hhcmVkL3N5c3RlbS9BYnN0cmFjdFJlbmRlcmVyLm1qcyc7XG5pbXBvcnQgeyBTaGFyZWRTeXN0ZW1zLCBTaGFyZWRSZW5kZXJQaXBlcyB9IGZyb20gJy4uL3NoYXJlZC9zeXN0ZW0vU2hhcmVkU3lzdGVtcy5tanMnO1xuaW1wb3J0IHsgUmVuZGVyZXJUeXBlIH0gZnJvbSAnLi4vdHlwZXMubWpzJztcbmltcG9ydCB7IEdsQnVmZmVyU3lzdGVtIH0gZnJvbSAnLi9idWZmZXIvR2xCdWZmZXJTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdsQ29udGV4dFN5c3RlbSB9IGZyb20gJy4vY29udGV4dC9HbENvbnRleHRTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdsR2VvbWV0cnlTeXN0ZW0gfSBmcm9tICcuL2dlb21ldHJ5L0dsR2VvbWV0cnlTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdsQmFja0J1ZmZlclN5c3RlbSB9IGZyb20gJy4vR2xCYWNrQnVmZmVyU3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBHbENvbG9yTWFza1N5c3RlbSB9IGZyb20gJy4vR2xDb2xvck1hc2tTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdsRW5jb2RlclN5c3RlbSB9IGZyb20gJy4vR2xFbmNvZGVyU3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBHbExpbWl0c1N5c3RlbSB9IGZyb20gJy4vR2xMaW1pdHNTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdsU3RlbmNpbFN5c3RlbSB9IGZyb20gJy4vR2xTdGVuY2lsU3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBHbFVib1N5c3RlbSB9IGZyb20gJy4vR2xVYm9TeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdsUmVuZGVyVGFyZ2V0U3lzdGVtIH0gZnJvbSAnLi9yZW5kZXJUYXJnZXQvR2xSZW5kZXJUYXJnZXRTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdsU2hhZGVyU3lzdGVtIH0gZnJvbSAnLi9zaGFkZXIvR2xTaGFkZXJTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdsVW5pZm9ybUdyb3VwU3lzdGVtIH0gZnJvbSAnLi9zaGFkZXIvR2xVbmlmb3JtR3JvdXBTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdsU3RhdGVTeXN0ZW0gfSBmcm9tICcuL3N0YXRlL0dsU3RhdGVTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdsVGV4dHVyZVN5c3RlbSB9IGZyb20gJy4vdGV4dHVyZS9HbFRleHR1cmVTeXN0ZW0ubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBEZWZhdWx0V2ViR0xTeXN0ZW1zID0gW1xuICAuLi5TaGFyZWRTeXN0ZW1zLFxuICBHbFVib1N5c3RlbSxcbiAgR2xCYWNrQnVmZmVyU3lzdGVtLFxuICBHbENvbnRleHRTeXN0ZW0sXG4gIEdsTGltaXRzU3lzdGVtLFxuICBHbEJ1ZmZlclN5c3RlbSxcbiAgR2xUZXh0dXJlU3lzdGVtLFxuICBHbFJlbmRlclRhcmdldFN5c3RlbSxcbiAgR2xHZW9tZXRyeVN5c3RlbSxcbiAgR2xVbmlmb3JtR3JvdXBTeXN0ZW0sXG4gIEdsU2hhZGVyU3lzdGVtLFxuICBHbEVuY29kZXJTeXN0ZW0sXG4gIEdsU3RhdGVTeXN0ZW0sXG4gIEdsU3RlbmNpbFN5c3RlbSxcbiAgR2xDb2xvck1hc2tTeXN0ZW1cbl07XG5jb25zdCBEZWZhdWx0V2ViR0xQaXBlcyA9IFsuLi5TaGFyZWRSZW5kZXJQaXBlc107XG5jb25zdCBEZWZhdWx0V2ViR0xBZGFwdGVycyA9IFtHbEJhdGNoQWRhcHRvciwgR2xNZXNoQWRhcHRvciwgR2xHcmFwaGljc0FkYXB0b3JdO1xuY29uc3Qgc3lzdGVtcyA9IFtdO1xuY29uc3QgcmVuZGVyUGlwZXMgPSBbXTtcbmNvbnN0IHJlbmRlclBpcGVBZGFwdG9ycyA9IFtdO1xuZXh0ZW5zaW9ucy5oYW5kbGVCeU5hbWVkTGlzdChFeHRlbnNpb25UeXBlLldlYkdMU3lzdGVtLCBzeXN0ZW1zKTtcbmV4dGVuc2lvbnMuaGFuZGxlQnlOYW1lZExpc3QoRXh0ZW5zaW9uVHlwZS5XZWJHTFBpcGVzLCByZW5kZXJQaXBlcyk7XG5leHRlbnNpb25zLmhhbmRsZUJ5TmFtZWRMaXN0KEV4dGVuc2lvblR5cGUuV2ViR0xQaXBlc0FkYXB0b3IsIHJlbmRlclBpcGVBZGFwdG9ycyk7XG5leHRlbnNpb25zLmFkZCguLi5EZWZhdWx0V2ViR0xTeXN0ZW1zLCAuLi5EZWZhdWx0V2ViR0xQaXBlcywgLi4uRGVmYXVsdFdlYkdMQWRhcHRlcnMpO1xuY2xhc3MgV2ViR0xSZW5kZXJlciBleHRlbmRzIEFic3RyYWN0UmVuZGVyZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBzeXN0ZW1Db25maWcgPSB7XG4gICAgICBuYW1lOiBcIndlYmdsXCIsXG4gICAgICB0eXBlOiBSZW5kZXJlclR5cGUuV0VCR0wsXG4gICAgICBzeXN0ZW1zLFxuICAgICAgcmVuZGVyUGlwZXMsXG4gICAgICByZW5kZXJQaXBlQWRhcHRvcnNcbiAgICB9O1xuICAgIHN1cGVyKHN5c3RlbUNvbmZpZyk7XG4gIH1cbn1cblxuZXhwb3J0IHsgV2ViR0xSZW5kZXJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9V2ViR0xSZW5kZXJlci5tanMubWFwXG4iXSwibmFtZXMiOlsiR2xHcmFwaGljc0FkYXB0b3IiLCJjb250ZXh0Q2hhbmdlIiwicmVuZGVyZXIiLCJ1bmlmb3JtcyIsIlVuaWZvcm1Hcm91cCIsInVDb2xvciIsInZhbHVlIiwiRmxvYXQzMkFycmF5IiwidHlwZSIsInVUcmFuc2Zvcm1NYXRyaXgiLCJNYXRyaXgiLCJ1Um91bmQiLCJtYXhUZXh0dXJlcyIsImxpbWl0cyIsIm1heEJhdGNoYWJsZVRleHR1cmVzIiwiZ2xQcm9ncmFtIiwibmFtZSIsImJpdHMiLCJjb2xvckJpdCIsImdlbmVyYXRlVGV4dHVyZUJhdGNoQml0IiwibG9jYWxVbmlmb3JtQml0Iiwicm91bmRQaXhlbHNCaXQiLCJ0aGlzIiwic2hhZGVyIiwiU2hhZGVyIiwicmVzb3VyY2VzIiwibG9jYWxVbmlmb3JtcyIsImJhdGNoU2FtcGxlcnMiLCJnZXRCYXRjaFNhbXBsZXJzVW5pZm9ybUdyb3VwIiwiZXhlY3V0ZSIsImdyYXBoaWNzUGlwZSIsInJlbmRlcmFibGUiLCJjb250ZXh0IiwiY3VzdG9tU2hhZGVyIiwiY29udGV4dFN5c3RlbSIsImdyYXBoaWNzQ29udGV4dCIsImJhdGNoZXIiLCJpbnN0cnVjdGlvbnMiLCJnZXRDb250ZXh0UmVuZGVyRGF0YSIsImdyb3VwcyIsImdsb2JhbFVuaWZvcm1zIiwiYmluZEdyb3VwIiwic3RhdGUiLCJzZXQiLCJiaW5kIiwiZ2VvbWV0cnkiLCJiYXRjaGVzIiwiaSIsImluc3RydWN0aW9uU2l6ZSIsImJhdGNoIiwic2l6ZSIsImoiLCJ0ZXh0dXJlcyIsImNvdW50IiwidGV4dHVyZSIsImRyYXciLCJ0b3BvbG9neSIsInN0YXJ0IiwiZGVzdHJveSIsImV4dGVuc2lvbiIsIldlYkdMUGlwZXNBZGFwdG9yIiwiR2xNZXNoQWRhcHRvciIsImluaXQiLCJ0ZXh0dXJlQml0IiwiX3NoYWRlciIsInVUZXh0dXJlIiwiVGV4dHVyZSIsIkVNUFRZIiwic291cmNlIiwidGV4dHVyZVVuaWZvcm1zIiwidVRleHR1cmVNYXRyaXgiLCJtZXNoUGlwZSIsIm1lc2giLCJ3YXJuIiwidVNhbXBsZXIiLCJzdHlsZSIsInRleHR1cmVNYXRyaXgiLCJtYXBDb29yZCIsImxvY2FsVW5pZm9ybXNCaW5kR3JvdXAiLCJlbmNvZGVyIiwiX2dlb21ldHJ5IiwiR2xCYXRjaEFkYXB0b3IiLCJjb25zdHJ1Y3RvciIsIl90ZW1wU3RhdGUiLCJTdGF0ZSIsImZvcjJkIiwiX2RpZFVwbG9hZEhhc2giLCJiYXRjaGVyUGlwZSIsInJ1bm5lcnMiLCJhZGQiLCJiYXRjaFBpcGUiLCJkaWRVcGxvYWQiLCJ1aWQiLCJ1cGRhdGVVbmlmb3JtR3JvdXAiLCJ1bmlmb3JtR3JvdXAiLCJibGVuZE1vZGUiLCJCVUZGRVJfVFlQRSIsIkJVRkZFUl9UWVBFMiIsIkdsQnVmZmVyIiwiYnVmZmVyIiwiX2xhc3RCaW5kQmFzZUxvY2F0aW9uIiwiX2xhc3RCaW5kQ2FsbElkIiwidXBkYXRlSUQiLCJieXRlTGVuZ3RoIiwiR2xCdWZmZXJTeXN0ZW0iLCJfZ3B1QnVmZmVycyIsIk9iamVjdCIsImNyZWF0ZSIsIl9ib3VuZEJ1ZmZlckJhc2VzIiwiX21pbkJhc2VMb2NhdGlvbiIsIl9uZXh0QmluZEJhc2VJbmRleCIsIl9iaW5kQ2FsbElkIiwiX3JlbmRlcmVyIiwicmVuZGVyYWJsZUdDIiwiYWRkTWFuYWdlZEhhc2giLCJfZ2wiLCJnbCIsIl9tYXhCaW5kaW5ncyIsIm1heFVuaWZvcm1CaW5kaW5ncyIsImdldEdsQnVmZmVyIiwiY3JlYXRlR0xCdWZmZXIiLCJnbEJ1ZmZlciIsImJpbmRCdWZmZXIiLCJiaW5kQnVmZmVyQmFzZSIsImluZGV4IiwiVU5JRk9STV9CVUZGRVIiLCJuZXh0QmluZEJhc2UiLCJoYXNUcmFuc2Zvcm1GZWVkYmFjayIsImZyZWVMb2NhdGlvbkZvckJ1ZmZlckJhc2UiLCJmcmVlSW5kZXgiLCJnZXRMYXN0QmluZEJhc2VMb2NhdGlvbiIsImxvb3AiLCJuZXh0SW5kZXgiLCJjdXJCdWYiLCJiaW5kQnVmZmVyUmFuZ2UiLCJvZmZzZXQiLCJ1cGRhdGVCdWZmZXIiLCJfdXBkYXRlSUQiLCJkYXRhIiwiZHJhd1R5cGUiLCJkZXNjcmlwdG9yIiwidXNhZ2UiLCJTVEFUSUMiLCJTVEFUSUNfRFJBVyIsIkRZTkFNSUNfRFJBVyIsImJ1ZmZlclN1YkRhdGEiLCJfdXBkYXRlU2l6ZSIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiYnVmZmVyRGF0YSIsImRlc3Ryb3lBbGwiLCJpZCIsImRlbGV0ZUJ1ZmZlciIsIm9uQnVmZmVyRGVzdHJveSIsImNvbnRleHRMb3N0IiwiQVJSQVlfQlVGRkVSIiwiSU5ERVgiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsIlVOSUZPUk0iLCJjcmVhdGVCdWZmZXIiLCJvbiIsInJlc2V0U3RhdGUiLCJXZWJHTFN5c3RlbSIsIl9HbENvbnRleHRTeXN0ZW0iLCJzdXBwb3J0cyIsInVpbnQzMkluZGljZXMiLCJ1bmlmb3JtQnVmZmVyT2JqZWN0IiwidmVydGV4QXJyYXlPYmplY3QiLCJzcmdiVGV4dHVyZXMiLCJub25Qb3dPZjJ3cmFwcGluZyIsIm1zYWEiLCJub25Qb3dPZjJtaXBtYXBzIiwiZXh0ZW5zaW9ucyIsImhhbmRsZUNvbnRleHRMb3N0IiwiaGFuZGxlQ29udGV4dFJlc3RvcmVkIiwiaXNMb3N0IiwiaXNDb250ZXh0TG9zdCIsIm9wdGlvbnMiLCJkZWZhdWx0T3B0aW9ucyIsIm11bHRpVmlldyIsImNhbnZhcyIsImdldCIsImNyZWF0ZUNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwidmlldyIsImluaXRGcm9tQ29udGV4dCIsImFscGhhIiwiYmFja2dyb3VuZCIsInByZW11bHRpcGxpZWRBbHBoYSIsImFudGlhbGlhcyIsImJhY2tCdWZmZXIiLCJ1c2VCYWNrQnVmZmVyIiwiY3JlYXRlQ29udGV4dCIsInByZWZlcldlYkdMVmVyc2lvbiIsInN0ZW5jaWwiLCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJwb3dlclByZWZlcmVuY2UiLCJlbnN1cmVDYW52YXNTaXplIiwidGFyZ2V0Q2FudmFzIiwiTWF0aCIsIm1heCIsIndlYkdMVmVyc2lvbiIsImdldFdlYkdMUmVuZGVyaW5nQ29udGV4dCIsImdldEV4dGVuc2lvbnMiLCJ2YWxpZGF0ZUNvbnRleHQiLCJlbWl0IiwiZWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZXRDb250ZXh0IiwiRXJyb3IiLCJjb21tb24iLCJhbmlzb3Ryb3BpY0ZpbHRlcmluZyIsImdldEV4dGVuc2lvbiIsImZsb2F0VGV4dHVyZUxpbmVhciIsInMzdGMiLCJzM3RjX3NSR0IiLCJldGMiLCJldGMxIiwicHZydGMiLCJhdGMiLCJhc3RjIiwiYnB0YyIsInJndGMiLCJsb3NlQ29udGV4dCIsImRyYXdCdWZmZXJzIiwiZGVwdGhUZXh0dXJlIiwidWludDMyRWxlbWVudEluZGV4IiwiZmxvYXRUZXh0dXJlIiwidGV4dHVyZUhhbGZGbG9hdCIsInRleHR1cmVIYWxmRmxvYXRMaW5lYXIiLCJ2ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUiLCJzcmdiIiwiY29sb3JCdWZmZXJGbG9hdCIsInByb3Zva2VFeHQiLCJwcm92b2tpbmdWZXJ0ZXhXRUJHTCIsIkZJUlNUX1ZFUlRFWF9DT05WRU5USU9OX1dFQkdMIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsIl9jb250ZXh0TG9zc0ZvcmNlZCIsInNldFRpbWVvdXQiLCJyZXN0b3JlQ29udGV4dCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1c2VQcm9ncmFtIiwiZm9yY2VDb250ZXh0TG9zcyIsImF0dHJpYnV0ZXMiLCJnZXRDb250ZXh0QXR0cmlidXRlcyIsImlzV2ViR2wyIiwiR2xDb250ZXh0U3lzdGVtIiwiR0xfRk9STUFUUyIsIkdMX0ZPUk1BVFMyIiwiR0xfVEFSR0VUUyIsIkdMX1RBUkdFVFMyIiwiR0xfVFlQRVMiLCJHTF9UWVBFUzIiLCJpbmZvTWFwIiwidWludDh4MiIsIlVOU0lHTkVEX0JZVEUiLCJ1aW50OHg0Iiwic2ludDh4MiIsIkJZVEUiLCJzaW50OHg0IiwidW5vcm04eDIiLCJ1bm9ybTh4NCIsInNub3JtOHgyIiwic25vcm04eDQiLCJ1aW50MTZ4MiIsIlVOU0lHTkVEX1NIT1JUIiwidWludDE2eDQiLCJzaW50MTZ4MiIsIlNIT1JUIiwic2ludDE2eDQiLCJ1bm9ybTE2eDIiLCJ1bm9ybTE2eDQiLCJzbm9ybTE2eDIiLCJzbm9ybTE2eDQiLCJmbG9hdDE2eDIiLCJIQUxGX0ZMT0FUIiwiZmxvYXQxNng0IiwiZmxvYXQzMiIsIkZMT0FUIiwiZmxvYXQzMngyIiwiZmxvYXQzMngzIiwiZmxvYXQzMng0IiwidWludDMyIiwiVU5TSUdORURfSU5UIiwidWludDMyeDIiLCJ1aW50MzJ4MyIsInVpbnQzMng0Iiwic2ludDMyIiwiSU5UIiwic2ludDMyeDIiLCJzaW50MzJ4MyIsInNpbnQzMng0IiwiZ2V0R2xUeXBlRnJvbUZvcm1hdCIsImZvcm1hdCIsInRvcG9sb2d5VG9HbE1hcCIsIkdsR2VvbWV0cnlTeXN0ZW0iLCJfZ2VvbWV0cnlWYW9IYXNoIiwiX2FjdGl2ZUdlb21ldHJ5IiwiX2FjdGl2ZVZhbyIsImhhc1ZhbyIsImhhc0luc3RhbmNlIiwibmF0aXZlVmFvRXh0ZW5zaW9uIiwiY3JlYXRlVmVydGV4QXJyYXkiLCJjcmVhdGVWZXJ0ZXhBcnJheU9FUyIsImJpbmRWZXJ0ZXhBcnJheSIsInZhbyIsImJpbmRWZXJ0ZXhBcnJheU9FUyIsImRlbGV0ZVZlcnRleEFycmF5IiwiZGVsZXRlVmVydGV4QXJyYXlPRVMiLCJuYXRpdmVJbnN0YW5jZWRFeHRlbnNpb24iLCJkcmF3QXJyYXlzSW5zdGFuY2VkIiwiYSIsImIiLCJjIiwiZCIsImRyYXdBcnJheXNJbnN0YW5jZWRBTkdMRSIsImRyYXdFbGVtZW50c0luc3RhbmNlZCIsImUiLCJkcmF3RWxlbWVudHNJbnN0YW5jZWRBTkdMRSIsInZlcnRleEF0dHJpYkRpdmlzb3IiLCJwcm9ncmFtIiwiZ2V0VmFvIiwidXBkYXRlQnVmZmVycyIsInVuYmluZCIsImJ1ZmZlclN5c3RlbSIsImJ1ZmZlcnMiLCJsZW5ndGgiLCJjaGVja0NvbXBhdGliaWxpdHkiLCJnZW9tZXRyeUF0dHJpYnV0ZXMiLCJzaGFkZXJBdHRyaWJ1dGVzIiwiX2F0dHJpYnV0ZURhdGEiLCJnZXRTaWduYXR1cmUiLCJhdHRyaWJzIiwic3RyaW5ncyIsInB1c2giLCJsb2NhdGlvbiIsImpvaW4iLCJfa2V5IiwiaW5pdEdlb21ldHJ5VmFvIiwiX2luY1JlZkNvdW50IiwiX2dldFByb2dyYW1EYXRhIiwic2lnbmF0dXJlIiwib25HZW9tZXRyeURlc3Ryb3kiLCJ2YW9PYmplY3RIYXNoIiwiZW5zdXJlQXR0cmlidXRlcyIsImFjdGl2YXRlVmFvIiwiaW5kZXhCdWZmZXIiLCJsYXN0QnVmZmVyIiwiYXR0cmlidXRlIiwicHJvZ3JhbUF0dHJpYiIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwiYXR0cmlidXRlSW5mbyIsImdldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0Iiwic3Vic3RyaW5nIiwidmVydGV4QXR0cmliSVBvaW50ZXIiLCJzdHJpZGUiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwibm9ybWFsaXNlZCIsImluc3RhbmNlIiwiZGl2aXNvciIsImluc3RhbmNlQ291bnQiLCJnbFRvcG9sb2d5IiwiYnl0ZVNpemUiLCJnbFR5cGUiLCJkcmF3RWxlbWVudHMiLCJnZXRTaXplIiwiZHJhd0FycmF5cyIsImJpZ1RyaWFuZ2xlR2VvbWV0cnkiLCJHZW9tZXRyeSIsImFQb3NpdGlvbiIsIl9HbEJhY2tCdWZmZXJTeXN0ZW0iLCJfdXNlQmFja0J1ZmZlclRoaXNSZW5kZXIiLCJfYW50aWFsaWFzIiwiX3N0YXRlIiwiYmlnVHJpYW5nbGVQcm9ncmFtIiwiR2xQcm9ncmFtIiwidmVydGV4IiwiZnJhZ21lbnQiLCJfYmlnVHJpYW5nbGVTaGFkZXIiLCJXSElURSIsInJlbmRlclN0YXJ0IiwicmVuZGVyVGFyZ2V0IiwiZ2V0UmVuZGVyVGFyZ2V0IiwidGFyZ2V0IiwiaXNSb290IiwicmVuZGVyVGFyZ2V0MiIsIl90YXJnZXRUZXh0dXJlIiwiY29sb3JUZXh0dXJlIiwiX2dldEJhY2tCdWZmZXJUZXh0dXJlIiwicmVuZGVyRW5kIiwiX3ByZXNlbnRCYWNrQnVmZmVyIiwiZmluaXNoUmVuZGVyUGFzcyIsIl9iYWNrQnVmZmVyVGV4dHVyZSIsInRhcmdldFNvdXJjZVRleHR1cmUiLCJUZXh0dXJlU291cmNlIiwicmVzb2x1dGlvbiIsIl9yZXNvbHV0aW9uIiwicmVzaXplIiwicHJpb3JpdHkiLCJHbEJhY2tCdWZmZXJTeXN0ZW0iLCJHbENvbG9yTWFza1N5c3RlbSIsIl9jb2xvck1hc2tDYWNoZSIsInNldE1hc2siLCJjb2xvck1hc2siLCJHbEVuY29kZXJTeXN0ZW0iLCJjb21tYW5kRmluaXNoZWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldEdlb21ldHJ5Iiwic2tpcFN5bmMiLCJfYWN0aXZlUHJvZ3JhbSIsIkdsTGltaXRzU3lzdGVtIiwiZ2V0UGFyYW1ldGVyIiwiTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMiLCJjaGVja01heElmU3RhdGVtZW50c0luU2hhZGVyIiwiTUFYX1VOSUZPUk1fQlVGRkVSX0JJTkRJTkdTIiwiR2xTdGVuY2lsU3lzdGVtIiwiX3N0ZW5jaWxDYWNoZSIsImVuYWJsZWQiLCJzdGVuY2lsUmVmZXJlbmNlIiwic3RlbmNpbE1vZGUiLCJOT05FIiwiX3JlbmRlclRhcmdldFN0ZW5jaWxTdGF0ZSIsIm9uUmVuZGVyVGFyZ2V0Q2hhbmdlIiwiX2NvbXBhcmlzb25GdW5jTWFwcGluZyIsImFsd2F5cyIsIkFMV0FZUyIsIm5ldmVyIiwiTkVWRVIiLCJlcXVhbCIsIkVRVUFMIiwiTk9URVFVQUwiLCJsZXNzIiwiTEVTUyIsIkxFUVVBTCIsImdyZWF0ZXIiLCJHUkVBVEVSIiwiR0VRVUFMIiwiX3N0ZW5jaWxPcHNNYXBwaW5nIiwia2VlcCIsIktFRVAiLCJ6ZXJvIiwiWkVSTyIsInJlcGxhY2UiLCJSRVBMQUNFIiwiaW52ZXJ0IiwiSU5WRVJUIiwiSU5DUiIsIkRFQ1IiLCJJTkNSX1dSQVAiLCJERUNSX1dSQVAiLCJfYWN0aXZlUmVuZGVyVGFyZ2V0Iiwic3RlbmNpbFN0YXRlIiwiRElTQUJMRUQiLCJzZXRTdGVuY2lsTW9kZSIsIm1vZGUiLCJHcHVTdGVuY2lsTW9kZXNUb1BpeGkiLCJlbmFibGUiLCJTVEVOQ0lMX1RFU1QiLCJzdGVuY2lsRnVuYyIsInN0ZW5jaWxCYWNrIiwiY29tcGFyZSIsInN0ZW5jaWxPcCIsInBhc3NPcCIsImRpc2FibGUiLCJXR1NMX1RPX1NURDQwX1NJWkUiLCJmMzIiLCJpMzIiLCJjcmVhdGVVYm9FbGVtZW50c1NURDQwIiwidW5pZm9ybURhdGEiLCJ1Ym9FbGVtZW50cyIsIm1hcCIsInVib0VsZW1lbnQiLCJib3VuZGFyeSIsImN1ck9mZnNldCIsImNlaWwiLCJnZW5lcmF0ZUFycmF5U3luY1NURDQwIiwib2Zmc2V0VG9BZGQiLCJyb3dTaXplIiwiZWxlbWVudFNpemUiLCJyZW1haW5kZXIiLCJpbmRleE9mIiwiY3JlYXRlVWJvU3luY0Z1bmN0aW9uU1RENDAiLCJjcmVhdGVVYm9TeW5jRnVuY3Rpb24iLCJ1Ym9TeW5jRnVuY3Rpb25zIiwiR2xVYm9TeXN0ZW0iLCJVYm9TeXN0ZW0iLCJzdXBlciIsImNyZWF0ZVVib0VsZW1lbnRzIiwiZ2VuZXJhdGVVYm9TeW5jIiwiR2xSZW5kZXJUYXJnZXQiLCJtc2FhUmVuZGVyQnVmZmVyIiwiR2xSZW5kZXJUYXJnZXRBZGFwdG9yIiwiX2NsZWFyQ29sb3JDYWNoZSIsIl92aWV3UG9ydENhY2hlIiwiUmVjdGFuZ2xlIiwicmVuZGVyVGFyZ2V0U3lzdGVtIiwiX3JlbmRlclRhcmdldFN5c3RlbSIsImNvcHlUb1RleHR1cmUiLCJzb3VyY2VSZW5kZXJTdXJmYWNlVGV4dHVyZSIsImRlc3RpbmF0aW9uVGV4dHVyZSIsIm9yaWdpblNyYyIsIm9yaWdpbkRlc3QiLCJnbFJlbmRlclRhcmdldCIsImdldEdwdVJlbmRlclRhcmdldCIsImJpbmRGcmFtZWJ1ZmZlciIsIkZSQU1FQlVGRkVSIiwicmVzb2x2ZVRhcmdldEZyYW1lYnVmZmVyIiwiY29weVRleFN1YkltYWdlMkQiLCJURVhUVVJFXzJEIiwieCIsInkiLCJzdGFydFJlbmRlclBhc3MiLCJjbGVhciIsImNsZWFyQ29sb3IiLCJ2aWV3cG9ydCIsImdwdVJlbmRlclRhcmdldCIsInZpZXdQb3J0WSIsInBpeGVsSGVpZ2h0IiwiY29sb3JUZXh0dXJlcyIsImZvckVhY2giLCJmcmFtZWJ1ZmZlciIsInZpZXdQb3J0Q2FjaGUiLCJkZXB0aFN0ZW5jaWxSZW5kZXJCdWZmZXIiLCJkZXB0aCIsIl9pbml0U3RlbmNpbCIsIlJFQURfRlJBTUVCVUZGRVIiLCJibGl0RnJhbWVidWZmZXIiLCJDT0xPUl9CVUZGRVJfQklUIiwiTkVBUkVTVCIsImluaXRHcHVSZW5kZXJUYXJnZXQiLCJDYW52YXNTb3VyY2UiLCJyZXNvdXJjZSIsIl9pbml0Q29sb3IiLCJkZXN0cm95R3B1UmVuZGVyVGFyZ2V0IiwiZGVsZXRlRnJhbWVidWZmZXIiLCJkZWxldGVSZW5kZXJidWZmZXIiLCJyZW5kZXJCdWZmZXIiLCJfcmVuZGVyVGFyZ2V0IiwiQUxMIiwiQ09MT1IiLCJkZWZhdWx0Q2xlYXJDb2xvciIsImNsZWFyQ29sb3JDYWNoZSIsImNsZWFyQ29sb3JBcnJheSIsInJlc2l6ZUdwdVJlbmRlclRhcmdldCIsIl9yZXNpemVDb2xvciIsIl9yZXNpemVTdGVuY2lsIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJwaXhlbFdpZHRoIiwiYmluZFNvdXJjZSIsImdsVGV4dHVyZSIsImdldEdsU291cmNlIiwiZnJhbWVidWZmZXJUZXh0dXJlMkQiLCJDT0xPUl9BVFRBQ0hNRU5UMCIsInZpZXdGcmFtZWJ1ZmZlciIsIl8iLCJjcmVhdGVSZW5kZXJidWZmZXIiLCJzb3VyY2UyIiwiZ2xJbnRlcm5hbEZvcm1hdCIsImludGVybmFsRm9ybWF0IiwiYmluZFJlbmRlcmJ1ZmZlciIsIlJFTkRFUkJVRkZFUiIsInJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSIsImZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyIiwiREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5UIiwiREVQVEgyNF9TVEVOQ0lMOCIsInJlbmRlcmJ1ZmZlclN0b3JhZ2UiLCJERVBUSF9TVEVOQ0lMIiwicHJlcmVuZGVyIiwidGVzdCIsInBvc3RyZW5kZXIiLCJjb250ZXh0Q2FudmFzIiwiY2FudmFzU291cmNlIiwiY29udGV4dDJEIiwiZHJhd0ltYWdlIiwiR2xSZW5kZXJUYXJnZXRTeXN0ZW0iLCJSZW5kZXJUYXJnZXRTeXN0ZW0iLCJhZGFwdG9yIiwiR2xQcm9ncmFtRGF0YSIsInVuaWZvcm1Hcm91cHMiLCJ1bmlmb3JtRGlydHlHcm91cHMiLCJ1bmlmb3JtQmxvY2tCaW5kaW5ncyIsImNvbXBpbGVTaGFkZXIiLCJzcmMiLCJjcmVhdGVTaGFkZXIiLCJzaGFkZXJTb3VyY2UiLCJib29sZWFuQXJyYXkiLCJhcnJheSIsIkFycmF5IiwiZGVmYXVsdFZhbHVlIiwiSW50MzJBcnJheSIsIlVpbnQzMkFycmF5IiwiR0xfVEFCTEUiLCJHTF9UT19HTFNMX1RZUEVTIiwiRkxPQVRfVkVDMiIsIkZMT0FUX1ZFQzMiLCJGTE9BVF9WRUM0IiwiSU5UX1ZFQzIiLCJJTlRfVkVDMyIsIklOVF9WRUM0IiwiVU5TSUdORURfSU5UX1ZFQzIiLCJVTlNJR05FRF9JTlRfVkVDMyIsIlVOU0lHTkVEX0lOVF9WRUM0IiwiQk9PTCIsIkJPT0xfVkVDMiIsIkJPT0xfVkVDMyIsIkJPT0xfVkVDNCIsIkZMT0FUX01BVDIiLCJGTE9BVF9NQVQzIiwiRkxPQVRfTUFUNCIsIlNBTVBMRVJfMkQiLCJJTlRfU0FNUExFUl8yRCIsIlVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEIiwiU0FNUExFUl9DVUJFIiwiSU5UX1NBTVBMRVJfQ1VCRSIsIlVOU0lHTkVEX0lOVF9TQU1QTEVSX0NVQkUiLCJTQU1QTEVSXzJEX0FSUkFZIiwiSU5UX1NBTVBMRVJfMkRfQVJSQVkiLCJVTlNJR05FRF9JTlRfU0FNUExFUl8yRF9BUlJBWSIsIkdMU0xfVE9fVkVSVEVYX1RZUEVTIiwiZmxvYXQiLCJ2ZWMyIiwidmVjMyIsInZlYzQiLCJpbnQiLCJpdmVjMiIsIml2ZWMzIiwiaXZlYzQiLCJ1aW50IiwidXZlYzIiLCJ1dmVjMyIsInV2ZWM0IiwiYm9vbCIsImJ2ZWMyIiwiYnZlYzMiLCJidmVjNCIsIm1hcFR5cGUiLCJ0eXBlTmFtZXMiLCJrZXlzIiwidG4iLCJtYXBHbFRvVmVydGV4Rm9ybWF0IiwidHlwZVZhbHVlIiwibG9nUHJldHR5U2hhZGVyRXJyb3IiLCJzaGFkZXJTcmMiLCJnZXRTaGFkZXJTb3VyY2UiLCJzcGxpdCIsImxpbmUiLCJzaGFkZXJMb2ciLCJnZXRTaGFkZXJJbmZvTG9nIiwic3BsaXRTaGFkZXIiLCJkZWR1cGUiLCJsaW5lTnVtYmVycyIsInBhcnNlRmxvYXQiLCJmaWx0ZXIiLCJuIiwibG9nQXJncyIsIm51bWJlciIsImZyYWdtZW50U291cmNlVG9Mb2ciLCJjb25zb2xlIiwiZXJyb3IiLCJncm91cENvbGxhcHNlZCIsImdyb3VwRW5kIiwiZGVmYXVsdFN5bmNEYXRhIiwidGV4dHVyZUNvdW50IiwiYmxvY2tJbmRleCIsIkdsU2hhZGVyU3lzdGVtIiwiX3Byb2dyYW1EYXRhSGFzaCIsIl9zaGFkZXJTeW5jRnVuY3Rpb25zIiwiX3NldFByb2dyYW0iLCJzeW5jRnVuY3Rpb24iLCJfZ2VuZXJhdGVTaGFkZXJTeW5jIiwidHJhbnNmb3JtRmVlZGJhY2tWYXJ5aW5ncyIsImJpbmRVbmlmb3JtQmxvY2siLCJwcm9ncmFtRGF0YSIsImlzQnVmZmVyUmVzb3VyY2UiLCJfYnVmZmVyUmVzb3VyY2UiLCJ1Ym8iLCJib3VuZExvY2F0aW9uIiwidW5pZm9ybUJsb2NrSW5kZXgiLCJfdW5pZm9ybUJsb2NrRGF0YSIsInVuaWZvcm1CbG9ja0JpbmRpbmciLCJfY3JlYXRlUHJvZ3JhbURhdGEiLCJrZXkiLCJnbFZlcnRTaGFkZXIiLCJWRVJURVhfU0hBREVSIiwiZ2xGcmFnU2hhZGVyIiwiRlJBR01FTlRfU0hBREVSIiwid2ViR0xQcm9ncmFtIiwiY3JlYXRlUHJvZ3JhbSIsImF0dGFjaFNoYWRlciIsIm5hbWVzIiwiYnVmZmVyTW9kZSIsIlNFUEFSQVRFX0FUVFJJQlMiLCJJTlRFUkxFQVZFRF9BVFRSSUJTIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJ2ZXJ0ZXhTaGFkZXIiLCJmcmFnbWVudFNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJsb2dQcm9ncmFtRXJyb3IiLCJzb3J0QXR0cmlidXRlcyIsInRvdGFsQXR0cmlidXRlcyIsIkFDVElWRV9BVFRSSUJVVEVTIiwiYXR0cmliRGF0YSIsImdldEFjdGl2ZUF0dHJpYiIsInN0YXJ0c1dpdGgiLCJzb3J0IiwiYmluZEF0dHJpYkxvY2F0aW9uIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJleHRyYWN0QXR0cmlidXRlc0Zyb21HbFByb2dyYW0iLCJfdW5pZm9ybURhdGEiLCJ0b3RhbFVuaWZvcm1zIiwiQUNUSVZFX1VOSUZPUk1TIiwiZ2V0QWN0aXZlVW5pZm9ybSIsImlzQXJyYXkiLCJtYXRjaCIsImdldFVuaWZvcm1EYXRhIiwiQUNUSVZFX1VOSUZPUk1fQkxPQ0tTIiwidW5pZm9ybUJsb2NrcyIsInRvdGFsVW5pZm9ybXNCbG9ja3MiLCJnZXRBY3RpdmVVbmlmb3JtQmxvY2tOYW1lIiwiZ2V0VW5pZm9ybUJsb2NrSW5kZXgiLCJnZXRBY3RpdmVVbmlmb3JtQmxvY2tQYXJhbWV0ZXIiLCJVTklGT1JNX0JMT0NLX0RBVEFfU0laRSIsImdldFVib0RhdGEiLCJkZWxldGVTaGFkZXIiLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJnZW5lcmF0ZVByb2dyYW0iLCJzaGFkZXJTeXN0ZW0iLCJmdW5jRnJhZ21lbnRzIiwiaGVhZGVyRnJhZ21lbnRzIiwiYWRkZWRUZXh0cmVTeXN0ZW0iLCJncm91cCIsInJlc05hbWUiLCJfdW5pZm9ybUJpbmRNYXAiLCJOdW1iZXIiLCJCdWZmZXJSZXNvdXJjZSIsInVuaWZvcm1OYW1lIiwidW5pZm9ybTFpIiwiZnVuY3Rpb25Tb3VyY2UiLCJGdW5jdGlvbiIsImdlbmVyYXRlU2hhZGVyU3luY0NvZGUiLCJVTklGT1JNX1RPX1NJTkdMRV9TRVRURVJTIiwidTMyIiwiVU5JRk9STV9UT19BUlJBWV9TRVRURVJTIiwiR2xVbmlmb3JtR3JvdXBTeXN0ZW0iLCJfY2FjaGUiLCJfdW5pZm9ybUdyb3VwU3luY0hhc2giLCJzeW5jRGF0YSIsImlzU3RhdGljIiwiX2RpcnR5SWQiLCJfZ2V0VW5pZm9ybVN5bmNGdW5jdGlvbiIsInN5bmNGdW5jIiwiX3NpZ25hdHVyZSIsIl9jcmVhdGVVbmlmb3JtU3luY0Z1bmN0aW9uIiwidW5pZm9ybUdyb3VwU3luY0hhc2giLCJfZ2V0U2lnbmF0dXJlIiwiX2dlbmVyYXRlVW5pZm9ybXNTeW5jIiwidW5pZm9ybSIsInVuaWZvcm1TdHJ1Y3R1cmVzIiwicGFyc2VkIiwidW5pZm9ybVBhcnNlcnMiLCJwYXJzZXIiLCJ0ZW1wbGF0ZSIsImdlbmVyYXRlVW5pZm9ybXNTeW5jIiwicHJlRml4IiwiX0dsU3RhdGVTeXN0ZW0iLCJfaW52ZXJ0RnJvbnRGYWNlIiwic3RhdGVJZCIsInBvbHlnb25PZmZzZXQiLCJfYmxlbmRFcSIsInNldEJsZW5kIiwic2V0T2Zmc2V0Iiwic2V0Q3VsbEZhY2UiLCJzZXREZXB0aFRlc3QiLCJzZXRGcm9udEZhY2UiLCJzZXREZXB0aE1hc2siLCJjaGVja3MiLCJkZWZhdWx0U3RhdGUiLCJfY3VsbEZhY2UiLCJfZnJvbnRGYWNlIiwiX2Zyb250RmFjZURpcnR5IiwiYmxlbmRNb2Rlc01hcCIsImJsZW5kTWFwIiwibm9ybWFsIiwiT05FIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsIm11bHRpcGx5IiwiRFNUX0NPTE9SIiwic2NyZWVuIiwiT05FX01JTlVTX1NSQ19DT0xPUiIsIm5vbmUiLCJTUkNfQUxQSEEiLCJlcmFzZSIsImV4dCIsIm1pbiIsIk1JTl9FWFQiLCJNQVhfRVhUIiwiTUlOIiwiTUFYIiwibWFwV2ViR0xCbGVuZE1vZGVzVG9QaXhpIiwiZGlmZiIsImNhbGwiLCJmb3JjZVN0YXRlIiwiX3VwZGF0ZUNoZWNrIiwiX2NoZWNrQmxlbmRNb2RlIiwiQkxFTkQiLCJfY2hlY2tQb2x5Z29uT2Zmc2V0IiwiUE9MWUdPTl9PRkZTRVRfRklMTCIsIkRFUFRIX1RFU1QiLCJkZXB0aE1hc2siLCJDVUxMX0ZBQ0UiLCJmYWNlTW9kZSIsIl9nbEZyb250RmFjZSIsImZyb250RmFjZSIsInNldEJsZW5kTW9kZSIsImJsZW5kRnVuYyIsImJsZW5kRnVuY1NlcGFyYXRlIiwiYmxlbmRFcXVhdGlvblNlcGFyYXRlIiwiRlVOQ19BREQiLCJzZXRQb2x5Z29uT2Zmc2V0Iiwic2NhbGUiLCJDQ1ciLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJmdW5jIiwic3BsaWNlIiwic3lzdGVtIiwiR2xTdGF0ZVN5c3RlbSIsIkdsVGV4dHVyZSIsIlJHQkEiLCJzYW1wbGVyVHlwZSIsImdsVXBsb2FkQnVmZmVySW1hZ2VSZXNvdXJjZSIsInVwbG9hZCIsInRleFN1YkltYWdlMkQiLCJ0ZXhJbWFnZTJEIiwiY29tcHJlc3NlZEZvcm1hdE1hcCIsImdsVXBsb2FkQ29tcHJlc3NlZFRleHR1cmVSZXNvdXJjZSIsIlVOUEFDS19BTElHTk1FTlQiLCJtaXBXaWR0aCIsIm1pcEhlaWdodCIsImNvbXByZXNzZWQiLCJsZXZlbEJ1ZmZlciIsImNvbXByZXNzZWRUZXhJbWFnZTJEIiwiZ2xVcGxvYWRJbWFnZVJlc291cmNlIiwiZ2xXaWR0aCIsImdsSGVpZ2h0IiwidGV4dHVyZVdpZHRoIiwidGV4dHVyZUhlaWdodCIsInJlc291cmNlV2lkdGgiLCJyZXNvdXJjZUhlaWdodCIsImdsVXBsb2FkVmlkZW9SZXNvdXJjZSIsImlzVmFsaWQiLCJzY2FsZU1vZGVUb0dsRmlsdGVyIiwibGluZWFyIiwibmVhcmVzdCIsIm1pcG1hcFNjYWxlTW9kZVRvR2xGaWx0ZXIiLCJ3cmFwTW9kZVRvR2xBZGRyZXNzIiwicmVwZWF0IiwiY29tcGFyZU1vZGVUb0dsQ29tcGFyZSIsImFwcGx5U3R5bGVQYXJhbXMiLCJtaXBtYXBzIiwiYW5pc290cm9waWNFeHQiLCJnbEZ1bmN0aW9uTmFtZSIsImZpcnN0UGFyYW0iLCJmb3JjZUNsYW1wIiwiZmlyc3RDcmVhdGlvbiIsImNhc3RQYXJhbSIsImFkZHJlc3NNb2RlVSIsImFkZHJlc3NNb2RlViIsImFkZHJlc3NNb2RlVyIsIndyYXBNb2RlUyIsIndyYXBNb2RlVCIsIndyYXBNb2RlUiIsIlRFWFRVUkVfV1JBUF9TIiwiVEVYVFVSRV9XUkFQX1QiLCJURVhUVVJFX1dSQVBfUiIsIm1hZ0ZpbHRlciIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsIm1pcG1hcEZpbHRlciIsImdsRmlsdGVyTW9kZSIsIm1pbkZpbHRlciIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIm1heEFuaXNvdHJvcHkiLCJsZXZlbCIsIk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsIlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiVEVYVFVSRV9DT01QQVJFX0ZVTkMiLCJHbFRleHR1cmVTeXN0ZW0iLCJtYW5hZ2VkVGV4dHVyZXMiLCJfZ2xUZXh0dXJlcyIsIl9nbFNhbXBsZXJzIiwiX2JvdW5kVGV4dHVyZXMiLCJfYWN0aXZlVGV4dHVyZUxvY2F0aW9uIiwiX2JvdW5kU2FtcGxlcnMiLCJfdXBsb2FkcyIsImltYWdlIiwidmlkZW8iLCJfcHJlbXVsdGlwbHlBbHBoYSIsIl91c2VTZXBhcmF0ZVNhbXBsZXJzIiwiX21hcEZvcm1hdFRvSW50ZXJuYWxGb3JtYXQiLCJiZ3JhOHVub3JtIiwiU1JHQjhfQUxQSEE4X0VYVCIsIlNSR0I4X0FMUEhBOCIsIlJHQkE4Iiwicjh1bm9ybSIsIlI4Iiwicjhzbm9ybSIsIlI4X1NOT1JNIiwicjh1aW50IiwiUjhVSSIsInI4c2ludCIsIlI4SSIsInIxNnVpbnQiLCJSMTZVSSIsInIxNnNpbnQiLCJSMTZJIiwicjE2ZmxvYXQiLCJSMTZGIiwicmc4dW5vcm0iLCJSRzgiLCJyZzhzbm9ybSIsIlJHOF9TTk9STSIsInJnOHVpbnQiLCJSRzhVSSIsInJnOHNpbnQiLCJSRzhJIiwicjMydWludCIsIlIzMlVJIiwicjMyc2ludCIsIlIzMkkiLCJyMzJmbG9hdCIsIlIzMkYiLCJyZzE2dWludCIsIlJHMTZVSSIsInJnMTZzaW50IiwiUkcxNkkiLCJyZzE2ZmxvYXQiLCJSRzE2RiIsInJnYmE4dW5vcm0iLCJyZ2JhOHNub3JtIiwiUkdCQThfU05PUk0iLCJyZ2JhOHVpbnQiLCJSR0JBOFVJIiwicmdiYThzaW50IiwiUkdCQThJIiwicmdiOWU1dWZsb2F0IiwiUkdCOV9FNSIsInJnYjEwYTJ1bm9ybSIsIlJHQjEwX0EyIiwicmcxMWIxMHVmbG9hdCIsIlIxMUZfRzExRl9CMTBGIiwicmczMnVpbnQiLCJSRzMyVUkiLCJyZzMyc2ludCIsIlJHMzJJIiwicmczMmZsb2F0IiwiUkczMkYiLCJyZ2JhMTZ1aW50IiwiUkdCQTE2VUkiLCJyZ2JhMTZzaW50IiwiUkdCQTE2SSIsInJnYmExNmZsb2F0IiwiUkdCQTE2RiIsInJnYmEzMnVpbnQiLCJSR0JBMzJVSSIsInJnYmEzMnNpbnQiLCJSR0JBMzJJIiwicmdiYTMyZmxvYXQiLCJSR0JBMzJGIiwic3RlbmNpbDgiLCJTVEVOQ0lMX0lOREVYOCIsImRlcHRoMTZ1bm9ybSIsIkRFUFRIX0NPTVBPTkVOVDE2IiwiZGVwdGgyNHBsdXMiLCJERVBUSF9DT01QT05FTlQyNCIsImRlcHRoMzJmbG9hdCIsIkRFUFRIX0NPTVBPTkVOVDMyRiIsIkRFUFRIMzJGX1NURU5DSUw4IiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUIiwiQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQzX0VYVCIsIkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDVfRVhUIiwiQ09NUFJFU1NFRF9SRURfUkdUQzFfRVhUIiwiQ09NUFJFU1NFRF9TSUdORURfUkVEX1JHVEMxX0VYVCIsIkNPTVBSRVNTRURfUkVEX0dSRUVOX1JHVEMyX0VYVCIsIkNPTVBSRVNTRURfU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9FWFQiLCJDT01QUkVTU0VEX1JHQl9CUFRDX1NJR05FRF9GTE9BVF9FWFQiLCJDT01QUkVTU0VEX1JHQl9CUFRDX1VOU0lHTkVEX0ZMT0FUX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9CUFRDX1VOT1JNX0VYVCIsIkNPTVBSRVNTRURfU1JHQl9BTFBIQV9CUFRDX1VOT1JNX0VYVCIsIkNPTVBSRVNTRURfUkdCOF9FVEMyIiwiQ09NUFJFU1NFRF9TUkdCOF9FVEMyIiwiQ09NUFJFU1NFRF9SR0I4X1BVTkNIVEhST1VHSF9BTFBIQTFfRVRDMiIsIkNPTVBSRVNTRURfU1JHQjhfUFVOQ0hUSFJPVUdIX0FMUEhBMV9FVEMyIiwiQ09NUFJFU1NFRF9SR0JBOF9FVEMyX0VBQyIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0VUQzJfRUFDIiwiQ09NUFJFU1NFRF9SMTFfRUFDIiwiQ09NUFJFU1NFRF9TSUdORURfUkcxMV9FQUMiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ180eDRfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ180eDRfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg0X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNXg0X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzV4NV9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzV4NV9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ182eDVfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ182eDVfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfNng2X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNng2X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzh4NV9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4NV9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ184eDZfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ184eDZfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg4X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOHg4X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDVfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg1X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDZfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg2X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDhfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg4X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDEwX0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4MTBfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfMTJ4MTBfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMngxMF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMngxMl9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEyeDEyX0tIUiIsIm1hcEZvcm1hdFRvR2xJbnRlcm5hbEZvcm1hdCIsIl9tYXBGb3JtYXRUb1R5cGUiLCJVTlNJR05FRF9JTlRfNV85XzlfOV9SRVYiLCJVTlNJR05FRF9JTlRfMl8xMF8xMF8xMF9SRVYiLCJVTlNJR05FRF9JTlRfMTBGXzExRl8xMUZfUkVWIiwiVU5TSUdORURfSU5UXzI0XzgiLCJGTE9BVF8zMl9VTlNJR05FRF9JTlRfMjRfOF9SRVYiLCJtYXBGb3JtYXRUb0dsVHlwZSIsIl9tYXBGb3JtYXRUb0Zvcm1hdCIsIlJFRCIsIlJHIiwiUkdCIiwiREVQVEhfQ09NUE9ORU5UIiwibWFwRm9ybWF0VG9HbEZvcm1hdCIsImluaXRTb3VyY2UiLCJfYmluZFNhbXBsZXIiLCJfdG91Y2hlZCIsInRleHR1cmVHQyIsIl9hY3RpdmF0ZUxvY2F0aW9uIiwiYmluZFRleHR1cmUiLCJiaW5kU2FtcGxlciIsInNhbXBsZXIiLCJfZ2V0R2xTYW1wbGVyIiwiYm91bmRUZXh0dXJlcyIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsIl9pbml0U291cmNlIiwiY3JlYXRlVGV4dHVyZSIsImF1dG9HZW5lcmF0ZU1pcG1hcHMiLCJpc1Bvd2VyT2ZUd28iLCJiaWdnZXN0RGltZW5zaW9uIiwibWlwTGV2ZWxDb3VudCIsImZsb29yIiwibG9nMiIsImluY2x1ZGVzIiwib25Tb3VyY2VVcGRhdGUiLCJvblN0eWxlQ2hhbmdlIiwib25Tb3VyY2VEZXN0cm95Iiwib25Tb3VyY2VVbmxvYWQiLCJvblVwZGF0ZU1pcG1hcHMiLCJ1cGRhdGVTdHlsZSIsImRlbGV0ZVRleHR1cmUiLCJhbHBoYU1vZGUiLCJVTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wiLCJ1cGxvYWRNZXRob2RJZCIsImdlbmVyYXRlTWlwbWFwIiwib2ZmIiwiX2luaXRTYW1wbGVyIiwiZ2xTYW1wbGVyIiwiY3JlYXRlU2FtcGxlciIsIl9yZXNvdXJjZUlkIiwiZ2VuZXJhdGVDYW52YXMiLCJwaXhlbHMiLCJnZXRQaXhlbHMiLCJjdHgiLCJpbWFnZURhdGEiLCJjcmVhdGVJbWFnZURhdGEiLCJwdXRJbWFnZURhdGEiLCJmcmFtZSIsInJvdW5kIiwiVWludDhBcnJheSIsImdsUmVudGVyVGFyZ2V0IiwicmVhZFBpeGVscyIsIlVpbnQ4Q2xhbXBlZEFycmF5Iiwic2xpY2UiLCJmaWxsIiwiRGVmYXVsdFdlYkdMU3lzdGVtcyIsIlNoYXJlZFN5c3RlbXMiLCJEZWZhdWx0V2ViR0xQaXBlcyIsIkRlZmF1bHRXZWJHTEFkYXB0ZXJzIiwic3lzdGVtcyIsInJlbmRlclBpcGVzIiwicmVuZGVyUGlwZUFkYXB0b3JzIiwiaGFuZGxlQnlOYW1lZExpc3QiLCJXZWJHTFBpcGVzIiwiV2ViR0xSZW5kZXJlciIsIkFic3RyYWN0UmVuZGVyZXIiLCJXRUJHTCJdLCJzb3VyY2VSb290IjoiIn0=